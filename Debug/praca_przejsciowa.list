
praca_przejsciowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e50  08003e50  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08003e50  08003e50  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e50  08003e50  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08003e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001e0  08004034  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08004034  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d117  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020af  00000000  00000000  0002d31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  0002f3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  00030090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a35  00000000  00000000  00030c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b97a  00000000  00000000  0004965d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b086  00000000  00000000  00054fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e005d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003904  00000000  00000000  000e00d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c64 	.word	0x08003c64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08003c64 	.word	0x08003c64

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	; (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	; (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	2010      	movs	r0, #16
 8000170:	f000 fcb9 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000174:	2010      	movs	r0, #16
 8000176:	f000 fcd2 	bl	8000b1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	2011      	movs	r0, #17
 8000180:	f000 fcb1 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000184:	2011      	movs	r0, #17
 8000186:	f000 fcca 	bl	8000b1e <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ac:	4b2d      	ldr	r3, [pc, #180]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a2c      	ldr	r2, [pc, #176]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b2a      	ldr	r3, [pc, #168]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c4:	4b27      	ldr	r3, [pc, #156]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a26      	ldr	r2, [pc, #152]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001ca:	f043 0320 	orr.w	r3, r3, #32
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b24      	ldr	r3, [pc, #144]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b21      	ldr	r3, [pc, #132]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a20      	ldr	r2, [pc, #128]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a1a      	ldr	r2, [pc, #104]	; (8000264 <MX_GPIO_Init+0xcc>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <MX_GPIO_Init+0xcc>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	603b      	str	r3, [r7, #0]
 800020a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	2120      	movs	r1, #32
 8000210:	4815      	ldr	r0, [pc, #84]	; (8000268 <MX_GPIO_Init+0xd0>)
 8000212:	f001 f85d 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800021a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800021c:	4b13      	ldr	r3, [pc, #76]	; (800026c <MX_GPIO_Init+0xd4>)
 800021e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000220:	2300      	movs	r3, #0
 8000222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4811      	ldr	r0, [pc, #68]	; (8000270 <MX_GPIO_Init+0xd8>)
 800022c:	f000 fef6 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000230:	2320      	movs	r3, #32
 8000232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000234:	2301      	movs	r3, #1
 8000236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000238:	2300      	movs	r3, #0
 800023a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023c:	2302      	movs	r3, #2
 800023e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	4619      	mov	r1, r3
 8000246:	4808      	ldr	r0, [pc, #32]	; (8000268 <MX_GPIO_Init+0xd0>)
 8000248:	f000 fee8 	bl	800101c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	2028      	movs	r0, #40	; 0x28
 8000252:	f000 fc48 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000256:	2028      	movs	r0, #40	; 0x28
 8000258:	f000 fc61 	bl	8000b1e <HAL_NVIC_EnableIRQ>

}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000
 8000268:	40010800 	.word	0x40010800
 800026c:	10110000 	.word	0x10110000
 8000270:	40011000 	.word	0x40011000

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fafc 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f812 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000280:	f7ff ff8a 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 8000284:	f7ff ff62 	bl	800014c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000288:	f000 fa0a 	bl	80006a0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800028c:	f000 f97a 	bl	8000584 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 8000290:	221c      	movs	r2, #28
 8000292:	4902      	ldr	r1, [pc, #8]	; (800029c <main+0x28>)
 8000294:	4802      	ldr	r0, [pc, #8]	; (80002a0 <main+0x2c>)
 8000296:	f002 f923 	bl	80024e0 <HAL_UART_Receive_DMA>
	//initOneWayList();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800029a:	e7fe      	b.n	800029a <main+0x26>
 800029c:	2000021c 	.word	0x2000021c
 80002a0:	200003d0 	.word	0x200003d0

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fffe 	bl	80032b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	2302      	movs	r3, #2
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2310      	movs	r3, #16
 80002d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002d6:	2300      	movs	r3, #0
 80002d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002da:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 f847 	bl	8001378 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002f0:	f000 f85c 	bl	80003ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2302      	movs	r3, #2
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2102      	movs	r1, #2
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fab2 	bl	8001878 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800031a:	f000 f847 	bl	80003ac <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3740      	adds	r7, #64	; 0x40
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a09      	ldr	r2, [pc, #36]	; (800035c <HAL_UART_RxCpltCallback+0x34>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d10c      	bne.n	8000354 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 800033a:	221c      	movs	r2, #28
 800033c:	4908      	ldr	r1, [pc, #32]	; (8000360 <HAL_UART_RxCpltCallback+0x38>)
 800033e:	4809      	ldr	r0, [pc, #36]	; (8000364 <HAL_UART_RxCpltCallback+0x3c>)
 8000340:	f002 f8ce 	bl	80024e0 <HAL_UART_Receive_DMA>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000344:	2120      	movs	r1, #32
 8000346:	4808      	ldr	r0, [pc, #32]	; (8000368 <HAL_UART_RxCpltCallback+0x40>)
 8000348:	f000 ffda 	bl	8001300 <HAL_GPIO_TogglePin>
		convertToStucture(odebranaWiadomosc, &head);
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <HAL_UART_RxCpltCallback+0x44>)
 800034e:	4804      	ldr	r0, [pc, #16]	; (8000360 <HAL_UART_RxCpltCallback+0x38>)
 8000350:	f002 fce8 	bl	8002d24 <convertToStucture>

	}
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40004400 	.word	0x40004400
 8000360:	2000021c 	.word	0x2000021c
 8000364:	200003d0 	.word	0x200003d0
 8000368:	40010800 	.word	0x40010800
 800036c:	20000214 	.word	0x20000214

08000370 <HAL_TIM_PeriodElapsedCallback>:
	head = (List*) malloc(sizeof(List));
	head = NULL;
	for (int i = 0; i < sizeof(head->data.name[i] = 0); i++)
		; //wypelnienie tablicy name zerami
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1){
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a07      	ldr	r2, [pc, #28]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d107      	bne.n	8000392 <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_UART_Transmit_IT(&huart2, wysylanaWiadomosc, size1);
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b29b      	uxth	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	4906      	ldr	r1, [pc, #24]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800038c:	4806      	ldr	r0, [pc, #24]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800038e:	f001 fff6 	bl	800237e <HAL_UART_Transmit_IT>
	}
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40012c00 	.word	0x40012c00
 80003a0:	2000021a 	.word	0x2000021a
 80003a4:	2000029c 	.word	0x2000029c
 80003a8:	200003d0 	.word	0x200003d0

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <HAL_MspInit+0x5c>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <HAL_MspInit+0x5c>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <HAL_MspInit+0x5c>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <HAL_MspInit+0x5c>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <HAL_MspInit+0x5c>)
 80003dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_MspInit+0x5c>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <HAL_MspInit+0x60>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_MspInit+0x60>)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000
 8000418:	40010000 	.word	0x40010000

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <HardFault_Handler+0x4>

0800042e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <MemManage_Handler+0x4>

08000434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <BusFault_Handler+0x4>

0800043a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <UsageFault_Handler+0x4>

08000440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000468:	f000 fa4a 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}

08000470 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000474:	4802      	ldr	r0, [pc, #8]	; (8000480 <DMA1_Channel6_IRQHandler+0x10>)
 8000476:	f000 fc9d 	bl	8000db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000348 	.word	0x20000348

08000484 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <DMA1_Channel7_IRQHandler+0x10>)
 800048a:	f000 fc93 	bl	8000db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	2000038c 	.word	0x2000038c

08000498 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <TIM1_BRK_IRQHandler+0x10>)
 800049e:	f001 fbd6 	bl	8001c4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000300 	.word	0x20000300

080004ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004b0:	4802      	ldr	r0, [pc, #8]	; (80004bc <TIM1_UP_IRQHandler+0x10>)
 80004b2:	f001 fbcc 	bl	8001c4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000300 	.word	0x20000300

080004c0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80004c6:	f001 fbc2 	bl	8001c4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000300 	.word	0x20000300

080004d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <TIM1_CC_IRQHandler+0x10>)
 80004da:	f001 fbb8 	bl	8001c4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000300 	.word	0x20000300

080004e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <USART2_IRQHandler+0x10>)
 80004ee:	f002 f877 	bl	80025e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200003d0 	.word	0x200003d0

080004fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000500:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000504:	f000 ff16 	bl	8001334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <_sbrk+0x5c>)
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <_sbrk+0x60>)
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <_sbrk+0x64>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <_sbrk+0x68>)
 800052c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	429a      	cmp	r2, r3
 800053a:	d207      	bcs.n	800054c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800053c:	f002 fe64 	bl	8003208 <__errno>
 8000540:	4602      	mov	r2, r0
 8000542:	230c      	movs	r3, #12
 8000544:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	e009      	b.n	8000560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <_sbrk+0x64>)
 800055c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20005000 	.word	0x20005000
 800056c:	00000400 	.word	0x00000400
 8000570:	200001fc 	.word	0x200001fc
 8000574:	20000418 	.word	0x20000418

08000578 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_TIM1_Init+0x98>)
 80005a2:	4a1f      	ldr	r2, [pc, #124]	; (8000620 <MX_TIM1_Init+0x9c>)
 80005a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <MX_TIM1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_TIM1_Init+0x98>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5199;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_TIM1_Init+0x98>)
 80005b4:	f241 424f 	movw	r2, #5199	; 0x144f
 80005b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_TIM1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <MX_TIM1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_TIM1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005cc:	4813      	ldr	r0, [pc, #76]	; (800061c <MX_TIM1_Init+0x98>)
 80005ce:	f001 faef 	bl	8001bb0 <HAL_TIM_Base_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80005d8:	f7ff fee8 	bl	80003ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	4619      	mov	r1, r3
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <MX_TIM1_Init+0x98>)
 80005ea:	f001 fc38 	bl	8001e5e <HAL_TIM_ConfigClockSource>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80005f4:	f7ff feda 	bl	80003ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_TIM1_Init+0x98>)
 8000606:	f001 fdfd 	bl	8002204 <HAL_TIMEx_MasterConfigSynchronization>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000610:	f7ff fecc 	bl	80003ac <Error_Handler>
  }

}
 8000614:	bf00      	nop
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000300 	.word	0x20000300
 8000620:	40012c00 	.word	0x40012c00

08000624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a19      	ldr	r2, [pc, #100]	; (8000698 <HAL_TIM_Base_MspInit+0x74>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d12b      	bne.n	800068e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <HAL_TIM_Base_MspInit+0x78>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <HAL_TIM_Base_MspInit+0x78>)
 800063c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <HAL_TIM_Base_MspInit+0x78>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2018      	movs	r0, #24
 8000654:	f000 fa47 	bl	8000ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000658:	2018      	movs	r0, #24
 800065a:	f000 fa60 	bl	8000b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	2019      	movs	r0, #25
 8000664:	f000 fa3f 	bl	8000ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000668:	2019      	movs	r0, #25
 800066a:	f000 fa58 	bl	8000b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	201a      	movs	r0, #26
 8000674:	f000 fa37 	bl	8000ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000678:	201a      	movs	r0, #26
 800067a:	f000 fa50 	bl	8000b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	201b      	movs	r0, #27
 8000684:	f000 fa2f 	bl	8000ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000688:	201b      	movs	r0, #27
 800068a:	f000 fa48 	bl	8000b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40012c00 	.word	0x40012c00
 800069c:	40021000 	.word	0x40021000

080006a0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f001 fe04 	bl	80022e4 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f7ff fe63 	bl	80003ac <Error_Handler>
  }

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200003d0 	.word	0x200003d0
 80006f0:	40004400 	.word	0x40004400

080006f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a3f      	ldr	r2, [pc, #252]	; (800080c <HAL_UART_MspInit+0x118>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d177      	bne.n	8000804 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000714:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <HAL_UART_MspInit+0x11c>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	4a3d      	ldr	r2, [pc, #244]	; (8000810 <HAL_UART_MspInit+0x11c>)
 800071a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071e:	61d3      	str	r3, [r2, #28]
 8000720:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <HAL_UART_MspInit+0x11c>)
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b38      	ldr	r3, [pc, #224]	; (8000810 <HAL_UART_MspInit+0x11c>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a37      	ldr	r2, [pc, #220]	; (8000810 <HAL_UART_MspInit+0x11c>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b35      	ldr	r3, [pc, #212]	; (8000810 <HAL_UART_MspInit+0x11c>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000744:	230c      	movs	r3, #12
 8000746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	482f      	ldr	r0, [pc, #188]	; (8000814 <HAL_UART_MspInit+0x120>)
 8000758:	f000 fc60 	bl	800101c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <HAL_UART_MspInit+0x124>)
 800075e:	4a2f      	ldr	r2, [pc, #188]	; (800081c <HAL_UART_MspInit+0x128>)
 8000760:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <HAL_UART_MspInit+0x124>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000768:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <HAL_UART_MspInit+0x124>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <HAL_UART_MspInit+0x124>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <HAL_UART_MspInit+0x124>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <HAL_UART_MspInit+0x124>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <HAL_UART_MspInit+0x124>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000786:	4b24      	ldr	r3, [pc, #144]	; (8000818 <HAL_UART_MspInit+0x124>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800078c:	4822      	ldr	r0, [pc, #136]	; (8000818 <HAL_UART_MspInit+0x124>)
 800078e:	f000 f9e1 	bl	8000b54 <HAL_DMA_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8000798:	f7ff fe08 	bl	80003ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <HAL_UART_MspInit+0x124>)
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
 80007a2:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <HAL_UART_MspInit+0x124>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007aa:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <HAL_UART_MspInit+0x130>)
 80007ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007b0:	2210      	movs	r2, #16
 80007b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80007d8:	4811      	ldr	r0, [pc, #68]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007da:	f000 f9bb 	bl	8000b54 <HAL_DMA_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80007e4:	f7ff fde2 	bl	80003ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007ec:	631a      	str	r2, [r3, #48]	; 0x30
 80007ee:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <HAL_UART_MspInit+0x12c>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2026      	movs	r0, #38	; 0x26
 80007fa:	f000 f974 	bl	8000ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007fe:	2026      	movs	r0, #38	; 0x26
 8000800:	f000 f98d 	bl	8000b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40004400 	.word	0x40004400
 8000810:	40021000 	.word	0x40021000
 8000814:	40010800 	.word	0x40010800
 8000818:	20000348 	.word	0x20000348
 800081c:	4002006c 	.word	0x4002006c
 8000820:	2000038c 	.word	0x2000038c
 8000824:	40020080 	.word	0x40020080

08000828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000828:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800082a:	e003      	b.n	8000834 <LoopCopyDataInit>

0800082c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800082e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000830:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000832:	3104      	adds	r1, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000838:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800083c:	d3f6      	bcc.n	800082c <CopyDataInit>
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000840:	e002      	b.n	8000848 <LoopFillZerobss>

08000842 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000844:	f842 3b04 	str.w	r3, [r2], #4

08000848 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800084a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800084c:	d3f9      	bcc.n	8000842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800084e:	f7ff fe93 	bl	8000578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000852:	f002 fcdf 	bl	8003214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff fd0d 	bl	8000274 <main>
  bx lr
 800085a:	4770      	bx	lr
  ldr r3, =_sidata
 800085c:	08003e58 	.word	0x08003e58
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000864:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000868:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 800086c:	20000418 	.word	0x20000418

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>
	...

08000874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_Init+0x28>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_Init+0x28>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f923 	bl	8000ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088a:	2000      	movs	r0, #0
 800088c:	f000 f808 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff fd92 	bl	80003b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x54>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x58>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f93b 	bl	8000b3a <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00e      	b.n	80008ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d80a      	bhi.n	80008ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f000 f903 	bl	8000ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_InitTick+0x5c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a03      	ldr	r2, [pc, #12]	; (8000920 <HAL_IncTick+0x20>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000008 	.word	0x20000008
 8000920:	20000410 	.word	0x20000410

08000924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	; (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000410 	.word	0x20000410

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db0b      	blt.n	80009c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 021f 	and.w	r2, r3, #31
 80009b4:	4906      	ldr	r1, [pc, #24]	; (80009d0 <__NVIC_EnableIRQ+0x34>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	2001      	movs	r0, #1
 80009be:	fa00 f202 	lsl.w	r2, r0, r2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100

080009d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	db0a      	blt.n	80009fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	490c      	ldr	r1, [pc, #48]	; (8000a20 <__NVIC_SetPriority+0x4c>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	440b      	add	r3, r1
 80009f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009fc:	e00a      	b.n	8000a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	; (8000a24 <__NVIC_SetPriority+0x50>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	761a      	strb	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	bf28      	it	cs
 8000a46:	2304      	movcs	r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d902      	bls.n	8000a58 <NVIC_EncodePriority+0x30>
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3b03      	subs	r3, #3
 8000a56:	e000      	b.n	8000a5a <NVIC_EncodePriority+0x32>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43da      	mvns	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43d9      	mvns	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	4313      	orrs	r3, r2
         );
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	; 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a9c:	d301      	bcc.n	8000aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00f      	b.n	8000ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <SysTick_Config+0x40>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aaa:	210f      	movs	r1, #15
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f7ff ff90 	bl	80009d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SysTick_Config+0x40>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SysTick_Config+0x40>)
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff2d 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af8:	f7ff ff42 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	6978      	ldr	r0, [r7, #20]
 8000b04:	f7ff ff90 	bl	8000a28 <NVIC_EncodePriority>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff5f 	bl	80009d4 <__NVIC_SetPriority>
}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff35 	bl	800099c <__NVIC_EnableIRQ>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ffa2 	bl	8000a8c <SysTick_Config>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e043      	b.n	8000bf2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <HAL_DMA_Init+0xa8>)
 8000b72:	4413      	add	r3, r2
 8000b74:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <HAL_DMA_Init+0xac>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	091b      	lsrs	r3, r3, #4
 8000b7c:	009a      	lsls	r2, r3, #2
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <HAL_DMA_Init+0xb0>)
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ba2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	bffdfff8 	.word	0xbffdfff8
 8000c00:	cccccccd 	.word	0xcccccccd
 8000c04:	40020000 	.word	0x40020000

08000c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_DMA_Start_IT+0x20>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e04a      	b.n	8000cbe <HAL_DMA_Start_IT+0xb6>
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d13a      	bne.n	8000cb0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2200      	movs	r2, #0
 8000c46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f9ae 	bl	8000fc0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 020e 	orr.w	r2, r2, #14
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e00f      	b.n	8000c9e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 0204 	bic.w	r2, r2, #4
 8000c8c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f042 020a 	orr.w	r2, r2, #10
 8000c9c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0201 	orr.w	r2, r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e005      	b.n	8000cbc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d005      	beq.n	8000cea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e051      	b.n	8000d8e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 020e 	bic.w	r2, r2, #14
 8000cf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0201 	bic.w	r2, r2, #1
 8000d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <HAL_DMA_Abort_IT+0xd0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d029      	beq.n	8000d68 <HAL_DMA_Abort_IT+0xa0>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <HAL_DMA_Abort_IT+0xd4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d022      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x9c>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_DMA_Abort_IT+0xd8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d01a      	beq.n	8000d5e <HAL_DMA_Abort_IT+0x96>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_DMA_Abort_IT+0xdc>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d012      	beq.n	8000d58 <HAL_DMA_Abort_IT+0x90>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <HAL_DMA_Abort_IT+0xe0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00a      	beq.n	8000d52 <HAL_DMA_Abort_IT+0x8a>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <HAL_DMA_Abort_IT+0xe4>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d102      	bne.n	8000d4c <HAL_DMA_Abort_IT+0x84>
 8000d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d4a:	e00e      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d50:	e00b      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d56:	e008      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5c:	e005      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d62:	e002      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d64:	2310      	movs	r3, #16
 8000d66:	e000      	b.n	8000d6a <HAL_DMA_Abort_IT+0xa2>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <HAL_DMA_Abort_IT+0xe8>)
 8000d6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	4798      	blx	r3
    } 
  }
  return status;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020008 	.word	0x40020008
 8000d9c:	4002001c 	.word	0x4002001c
 8000da0:	40020030 	.word	0x40020030
 8000da4:	40020044 	.word	0x40020044
 8000da8:	40020058 	.word	0x40020058
 8000dac:	4002006c 	.word	0x4002006c
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d04f      	beq.n	8000e7c <HAL_DMA_IRQHandler+0xc8>
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d04a      	beq.n	8000e7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d107      	bne.n	8000e04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0204 	bic.w	r2, r2, #4
 8000e02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a66      	ldr	r2, [pc, #408]	; (8000fa4 <HAL_DMA_IRQHandler+0x1f0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d029      	beq.n	8000e62 <HAL_DMA_IRQHandler+0xae>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a65      	ldr	r2, [pc, #404]	; (8000fa8 <HAL_DMA_IRQHandler+0x1f4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d022      	beq.n	8000e5e <HAL_DMA_IRQHandler+0xaa>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a63      	ldr	r2, [pc, #396]	; (8000fac <HAL_DMA_IRQHandler+0x1f8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d01a      	beq.n	8000e58 <HAL_DMA_IRQHandler+0xa4>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a62      	ldr	r2, [pc, #392]	; (8000fb0 <HAL_DMA_IRQHandler+0x1fc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d012      	beq.n	8000e52 <HAL_DMA_IRQHandler+0x9e>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a60      	ldr	r2, [pc, #384]	; (8000fb4 <HAL_DMA_IRQHandler+0x200>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00a      	beq.n	8000e4c <HAL_DMA_IRQHandler+0x98>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a5f      	ldr	r2, [pc, #380]	; (8000fb8 <HAL_DMA_IRQHandler+0x204>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d102      	bne.n	8000e46 <HAL_DMA_IRQHandler+0x92>
 8000e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e44:	e00e      	b.n	8000e64 <HAL_DMA_IRQHandler+0xb0>
 8000e46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e4a:	e00b      	b.n	8000e64 <HAL_DMA_IRQHandler+0xb0>
 8000e4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e50:	e008      	b.n	8000e64 <HAL_DMA_IRQHandler+0xb0>
 8000e52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e56:	e005      	b.n	8000e64 <HAL_DMA_IRQHandler+0xb0>
 8000e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5c:	e002      	b.n	8000e64 <HAL_DMA_IRQHandler+0xb0>
 8000e5e:	2340      	movs	r3, #64	; 0x40
 8000e60:	e000      	b.n	8000e64 <HAL_DMA_IRQHandler+0xb0>
 8000e62:	2304      	movs	r3, #4
 8000e64:	4a55      	ldr	r2, [pc, #340]	; (8000fbc <HAL_DMA_IRQHandler+0x208>)
 8000e66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 8094 	beq.w	8000f9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e7a:	e08e      	b.n	8000f9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	2202      	movs	r2, #2
 8000e82:	409a      	lsls	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d056      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x186>
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d051      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0320 	and.w	r3, r3, #32
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10b      	bne.n	8000ebc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 020a 	bic.w	r2, r2, #10
 8000eb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a38      	ldr	r2, [pc, #224]	; (8000fa4 <HAL_DMA_IRQHandler+0x1f0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d029      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x166>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a37      	ldr	r2, [pc, #220]	; (8000fa8 <HAL_DMA_IRQHandler+0x1f4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d022      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x162>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a35      	ldr	r2, [pc, #212]	; (8000fac <HAL_DMA_IRQHandler+0x1f8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d01a      	beq.n	8000f10 <HAL_DMA_IRQHandler+0x15c>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a34      	ldr	r2, [pc, #208]	; (8000fb0 <HAL_DMA_IRQHandler+0x1fc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d012      	beq.n	8000f0a <HAL_DMA_IRQHandler+0x156>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <HAL_DMA_IRQHandler+0x200>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00a      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x150>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <HAL_DMA_IRQHandler+0x204>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d102      	bne.n	8000efe <HAL_DMA_IRQHandler+0x14a>
 8000ef8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000efc:	e00e      	b.n	8000f1c <HAL_DMA_IRQHandler+0x168>
 8000efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f02:	e00b      	b.n	8000f1c <HAL_DMA_IRQHandler+0x168>
 8000f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f08:	e008      	b.n	8000f1c <HAL_DMA_IRQHandler+0x168>
 8000f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0e:	e005      	b.n	8000f1c <HAL_DMA_IRQHandler+0x168>
 8000f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f14:	e002      	b.n	8000f1c <HAL_DMA_IRQHandler+0x168>
 8000f16:	2320      	movs	r3, #32
 8000f18:	e000      	b.n	8000f1c <HAL_DMA_IRQHandler+0x168>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <HAL_DMA_IRQHandler+0x208>)
 8000f1e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d034      	beq.n	8000f9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f38:	e02f      	b.n	8000f9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	2208      	movs	r2, #8
 8000f40:	409a      	lsls	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d028      	beq.n	8000f9c <HAL_DMA_IRQHandler+0x1e8>
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d023      	beq.n	8000f9c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 020e 	bic.w	r2, r2, #14
 8000f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	4798      	blx	r3
    }
  }
  return;
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
}
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020008 	.word	0x40020008
 8000fa8:	4002001c 	.word	0x4002001c
 8000fac:	40020030 	.word	0x40020030
 8000fb0:	40020044 	.word	0x40020044
 8000fb4:	40020058 	.word	0x40020058
 8000fb8:	4002006c 	.word	0x4002006c
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b10      	cmp	r3, #16
 8000fec:	d108      	bne.n	8001000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ffe:	e007      	b.n	8001010 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	60da      	str	r2, [r3, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b08b      	sub	sp, #44	; 0x2c
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102e:	e127      	b.n	8001280 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001030:	2201      	movs	r2, #1
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 8116 	bne.w	800127a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b12      	cmp	r3, #18
 8001054:	d034      	beq.n	80010c0 <HAL_GPIO_Init+0xa4>
 8001056:	2b12      	cmp	r3, #18
 8001058:	d80d      	bhi.n	8001076 <HAL_GPIO_Init+0x5a>
 800105a:	2b02      	cmp	r3, #2
 800105c:	d02b      	beq.n	80010b6 <HAL_GPIO_Init+0x9a>
 800105e:	2b02      	cmp	r3, #2
 8001060:	d804      	bhi.n	800106c <HAL_GPIO_Init+0x50>
 8001062:	2b00      	cmp	r3, #0
 8001064:	d031      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 8001066:	2b01      	cmp	r3, #1
 8001068:	d01c      	beq.n	80010a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800106a:	e048      	b.n	80010fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800106c:	2b03      	cmp	r3, #3
 800106e:	d043      	beq.n	80010f8 <HAL_GPIO_Init+0xdc>
 8001070:	2b11      	cmp	r3, #17
 8001072:	d01b      	beq.n	80010ac <HAL_GPIO_Init+0x90>
          break;
 8001074:	e043      	b.n	80010fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001076:	4a89      	ldr	r2, [pc, #548]	; (800129c <HAL_GPIO_Init+0x280>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d026      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 800107c:	4a87      	ldr	r2, [pc, #540]	; (800129c <HAL_GPIO_Init+0x280>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d806      	bhi.n	8001090 <HAL_GPIO_Init+0x74>
 8001082:	4a87      	ldr	r2, [pc, #540]	; (80012a0 <HAL_GPIO_Init+0x284>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d020      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 8001088:	4a86      	ldr	r2, [pc, #536]	; (80012a4 <HAL_GPIO_Init+0x288>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d01d      	beq.n	80010ca <HAL_GPIO_Init+0xae>
          break;
 800108e:	e036      	b.n	80010fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001090:	4a85      	ldr	r2, [pc, #532]	; (80012a8 <HAL_GPIO_Init+0x28c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d019      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 8001096:	4a85      	ldr	r2, [pc, #532]	; (80012ac <HAL_GPIO_Init+0x290>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d016      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 800109c:	4a84      	ldr	r2, [pc, #528]	; (80012b0 <HAL_GPIO_Init+0x294>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0xae>
          break;
 80010a2:	e02c      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e028      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	3304      	adds	r3, #4
 80010b2:	623b      	str	r3, [r7, #32]
          break;
 80010b4:	e023      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	3308      	adds	r3, #8
 80010bc:	623b      	str	r3, [r7, #32]
          break;
 80010be:	e01e      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	330c      	adds	r3, #12
 80010c6:	623b      	str	r3, [r7, #32]
          break;
 80010c8:	e019      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010d2:	2304      	movs	r3, #4
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e012      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d105      	bne.n	80010ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e0:	2308      	movs	r3, #8
 80010e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	611a      	str	r2, [r3, #16]
          break;
 80010ea:	e008      	b.n	80010fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ec:	2308      	movs	r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	615a      	str	r2, [r3, #20]
          break;
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2bff      	cmp	r3, #255	; 0xff
 8001102:	d801      	bhi.n	8001108 <HAL_GPIO_Init+0xec>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	e001      	b.n	800110c <HAL_GPIO_Init+0xf0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3304      	adds	r3, #4
 800110c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2bff      	cmp	r3, #255	; 0xff
 8001112:	d802      	bhi.n	800111a <HAL_GPIO_Init+0xfe>
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x104>
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	3b08      	subs	r3, #8
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	210f      	movs	r1, #15
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	401a      	ands	r2, r3
 8001132:	6a39      	ldr	r1, [r7, #32]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	431a      	orrs	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 8096 	beq.w	800127a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <HAL_GPIO_Init+0x298>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <HAL_GPIO_Init+0x298>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b56      	ldr	r3, [pc, #344]	; (80012b4 <HAL_GPIO_Init+0x298>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001166:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <HAL_GPIO_Init+0x29c>)
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4013      	ands	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <HAL_GPIO_Init+0x2a0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x19e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4a      	ldr	r2, [pc, #296]	; (80012c0 <HAL_GPIO_Init+0x2a4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x19a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <HAL_GPIO_Init+0x2a8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x196>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2ac>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x192>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x1a0>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e004      	b.n	80011bc <HAL_GPIO_Init+0x1a0>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_Init+0x1a0>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_GPIO_Init+0x1a0>
 80011ba:	2300      	movs	r3, #0
 80011bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011be:	f002 0203 	and.w	r2, r2, #3
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4093      	lsls	r3, r2
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011cc:	493a      	ldr	r1, [pc, #232]	; (80012b8 <HAL_GPIO_Init+0x29c>)
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4938      	ldr	r1, [pc, #224]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
 80011f2:	e006      	b.n	8001202 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4933      	ldr	r1, [pc, #204]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 80011fe:	4013      	ands	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	492e      	ldr	r1, [pc, #184]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	43db      	mvns	r3, r3
 8001224:	4929      	ldr	r1, [pc, #164]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001226:	4013      	ands	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	4924      	ldr	r1, [pc, #144]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	608b      	str	r3, [r1, #8]
 8001242:	e006      	b.n	8001252 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	43db      	mvns	r3, r3
 800124c:	491f      	ldr	r1, [pc, #124]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 800124e:	4013      	ands	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	491a      	ldr	r1, [pc, #104]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	60cb      	str	r3, [r1, #12]
 800126a:	e006      	b.n	800127a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	43db      	mvns	r3, r3
 8001274:	4915      	ldr	r1, [pc, #84]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001276:	4013      	ands	r3, r2
 8001278:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	3301      	adds	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	fa22 f303 	lsr.w	r3, r2, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	f47f aed0 	bne.w	8001030 <HAL_GPIO_Init+0x14>
  }
}
 8001290:	bf00      	nop
 8001292:	372c      	adds	r7, #44	; 0x2c
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	10210000 	.word	0x10210000
 80012a0:	10110000 	.word	0x10110000
 80012a4:	10120000 	.word	0x10120000
 80012a8:	10310000 	.word	0x10310000
 80012ac:	10320000 	.word	0x10320000
 80012b0:	10220000 	.word	0x10220000
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40011400 	.word	0x40011400
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012ec:	e003      	b.n	80012f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	611a      	str	r2, [r3, #16]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43d9      	mvns	r1, r3
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	400b      	ands	r3, r1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	611a      	str	r2, [r3, #16]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
	...

08001334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f806 	bl	8001364 <HAL_GPIO_EXTI_Callback>
  }
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e26c      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8087 	beq.w	80014a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001398:	4b92      	ldr	r3, [pc, #584]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d00c      	beq.n	80013be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a4:	4b8f      	ldr	r3, [pc, #572]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d112      	bne.n	80013d6 <HAL_RCC_OscConfig+0x5e>
 80013b0:	4b8c      	ldr	r3, [pc, #560]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d10b      	bne.n	80013d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013be:	4b89      	ldr	r3, [pc, #548]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d06c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x12c>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d168      	bne.n	80014a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e246      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x76>
 80013e0:	4b80      	ldr	r3, [pc, #512]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a7f      	ldr	r2, [pc, #508]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e02e      	b.n	800144c <HAL_RCC_OscConfig+0xd4>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x98>
 80013f6:	4b7b      	ldr	r3, [pc, #492]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7a      	ldr	r2, [pc, #488]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b78      	ldr	r3, [pc, #480]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xd4>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0xbc>
 800141a:	4b72      	ldr	r3, [pc, #456]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a71      	ldr	r2, [pc, #452]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6e      	ldr	r2, [pc, #440]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xd4>
 8001434:	4b6b      	ldr	r3, [pc, #428]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a6a      	ldr	r2, [pc, #424]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a67      	ldr	r2, [pc, #412]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fa66 	bl	8000924 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fa62 	bl	8000924 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1fa      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b5d      	ldr	r3, [pc, #372]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xe4>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fa52 	bl	8000924 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fa4e 	bl	8000924 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1e6      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x10c>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014b2:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014be:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x18c>
 80014ca:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x176>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1ba      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4939      	ldr	r1, [pc, #228]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fa07 	bl	8000924 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fa03 	bl	8000924 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e19b      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4927      	ldr	r1, [pc, #156]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff f9e6 	bl	8000924 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff f9e2 	bl	8000924 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e17a      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d03a      	beq.n	80015fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d019      	beq.n	80015c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_RCC_OscConfig+0x274>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff f9c6 	bl	8000924 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff f9c2 	bl	8000924 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e15a      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f000 fada 	bl	8001b74 <RCC_Delay>
 80015c0:	e01c      	b.n	80015fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_RCC_OscConfig+0x274>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff f9ac 	bl	8000924 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ce:	e00f      	b.n	80015f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff f9a8 	bl	8000924 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d908      	bls.n	80015f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e140      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	42420000 	.word	0x42420000
 80015ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	4b9e      	ldr	r3, [pc, #632]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1e9      	bne.n	80015d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80a6 	beq.w	8001756 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160e:	4b97      	ldr	r3, [pc, #604]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10d      	bne.n	8001636 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b94      	ldr	r3, [pc, #592]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a93      	ldr	r2, [pc, #588]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b91      	ldr	r3, [pc, #580]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	4b8e      	ldr	r3, [pc, #568]	; (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d118      	bne.n	8001674 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001642:	4b8b      	ldr	r3, [pc, #556]	; (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a8a      	ldr	r2, [pc, #552]	; (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164e:	f7ff f969 	bl	8000924 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001656:	f7ff f965 	bl	8000924 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b64      	cmp	r3, #100	; 0x64
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e0fd      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	4b81      	ldr	r3, [pc, #516]	; (8001870 <HAL_RCC_OscConfig+0x4f8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x312>
 800167c:	4b7b      	ldr	r3, [pc, #492]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a7a      	ldr	r2, [pc, #488]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	e02d      	b.n	80016e6 <HAL_RCC_OscConfig+0x36e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x334>
 8001692:	4b76      	ldr	r3, [pc, #472]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4a75      	ldr	r2, [pc, #468]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6213      	str	r3, [r2, #32]
 800169e:	4b73      	ldr	r3, [pc, #460]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4a72      	ldr	r2, [pc, #456]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	6213      	str	r3, [r2, #32]
 80016aa:	e01c      	b.n	80016e6 <HAL_RCC_OscConfig+0x36e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d10c      	bne.n	80016ce <HAL_RCC_OscConfig+0x356>
 80016b4:	4b6d      	ldr	r3, [pc, #436]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a6c      	ldr	r2, [pc, #432]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4a69      	ldr	r2, [pc, #420]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6213      	str	r3, [r2, #32]
 80016cc:	e00b      	b.n	80016e6 <HAL_RCC_OscConfig+0x36e>
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a66      	ldr	r2, [pc, #408]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	6213      	str	r3, [r2, #32]
 80016da:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a63      	ldr	r2, [pc, #396]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d015      	beq.n	800171a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff f919 	bl	8000924 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff f915 	bl	8000924 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e0ab      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170c:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0ee      	beq.n	80016f6 <HAL_RCC_OscConfig+0x37e>
 8001718:	e014      	b.n	8001744 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff f903 	bl	8000924 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff f8ff 	bl	8000924 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e095      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	4b4c      	ldr	r3, [pc, #304]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d105      	bne.n	8001756 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174a:	4b48      	ldr	r3, [pc, #288]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a47      	ldr	r2, [pc, #284]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001754:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8081 	beq.w	8001862 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d061      	beq.n	8001830 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d146      	bne.n	8001802 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001774:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_RCC_OscConfig+0x4fc>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff f8d3 	bl	8000924 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff f8cf 	bl	8000924 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e067      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001794:	4b35      	ldr	r3, [pc, #212]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d108      	bne.n	80017bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017aa:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	492d      	ldr	r1, [pc, #180]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a19      	ldr	r1, [r3, #32]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	430b      	orrs	r3, r1
 80017ce:	4927      	ldr	r1, [pc, #156]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_RCC_OscConfig+0x4fc>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff f8a3 	bl	8000924 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff f89f 	bl	8000924 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e037      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x46a>
 8001800:	e02f      	b.n	8001862 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_RCC_OscConfig+0x4fc>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff f88c 	bl	8000924 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff f888 	bl	8000924 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e020      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x498>
 800182e:	e018      	b.n	8001862 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e013      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_OscConfig+0x4f4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	429a      	cmp	r2, r3
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	40007000 	.word	0x40007000
 8001874:	42420060 	.word	0x42420060

08001878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0d0      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800188c:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d910      	bls.n	80018bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0207 	bic.w	r2, r3, #7
 80018a2:	4965      	ldr	r1, [pc, #404]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0b8      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d4:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a58      	ldr	r2, [pc, #352]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ec:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a52      	ldr	r2, [pc, #328]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f8:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	494d      	ldr	r1, [pc, #308]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d040      	beq.n	8001998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d115      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e07f      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e073      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001946:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06b      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4936      	ldr	r1, [pc, #216]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001968:	f7fe ffdc 	bl	8000924 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	e00a      	b.n	8001986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7fe ffd8 	bl	8000924 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e053      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 020c 	and.w	r2, r3, #12
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	429a      	cmp	r2, r3
 8001996:	d1eb      	bne.n	8001970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d210      	bcs.n	80019c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 0207 	bic.w	r2, r3, #7
 80019ae:	4922      	ldr	r1, [pc, #136]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e032      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4916      	ldr	r1, [pc, #88]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	490e      	ldr	r1, [pc, #56]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a06:	f000 f821 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	5cd3      	ldrb	r3, [r2, r3]
 8001a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <HAL_RCC_ClockConfig+0x1cc>)
 8001a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_RCC_ClockConfig+0x1d0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe ff3a 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	08003cf8 	.word	0x08003cf8
 8001a44:	20000000 	.word	0x20000000
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a4c:	b490      	push	{r4, r7}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a54:	1d3c      	adds	r4, r7, #4
 8001a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x40>
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x46>
 8001a8a:	e02d      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a8e:	623b      	str	r3, [r7, #32]
      break;
 8001a90:	e02d      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	0c9b      	lsrs	r3, r3, #18
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aa4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	0c5b      	lsrs	r3, r3, #17
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001abe:	4413      	add	r3, r2
 8001ac0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ac4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aca:	fb02 f203 	mul.w	r2, r2, r3
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	e004      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	623b      	str	r3, [r7, #32]
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aea:	623b      	str	r3, [r7, #32]
      break;
 8001aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aee:	6a3b      	ldr	r3, [r7, #32]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3728      	adds	r7, #40	; 0x28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc90      	pop	{r4, r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	08003c7c 	.word	0x08003c7c
 8001b00:	08003c8c 	.word	0x08003c8c
 8001b04:	40021000 	.word	0x40021000
 8001b08:	007a1200 	.word	0x007a1200
 8001b0c:	003d0900 	.word	0x003d0900

08001b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b28:	f7ff fff2 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4a03      	ldr	r2, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08003d08 	.word	0x08003d08

08001b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b54:	4601      	mov	r1, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	0adb      	lsrs	r3, r3, #11
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08003d08 	.word	0x08003d08

08001b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <RCC_Delay+0x34>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <RCC_Delay+0x38>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b90:	bf00      	nop
  }
  while (Delay --);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1e5a      	subs	r2, r3, #1
 8001b96:	60fa      	str	r2, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f9      	bne.n	8001b90 <RCC_Delay+0x1c>
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	10624dd3 	.word	0x10624dd3

08001bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e041      	b.n	8001c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fd24 	bl	8000624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3304      	adds	r3, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f000 fa10 	bl	8002014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d122      	bne.n	8001caa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d11b      	bne.n	8001caa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 0202 	mvn.w	r2, #2
 8001c7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f9a4 	bl	8001fde <HAL_TIM_IC_CaptureCallback>
 8001c96:	e005      	b.n	8001ca4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f997 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f9a6 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d122      	bne.n	8001cfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d11b      	bne.n	8001cfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f06f 0204 	mvn.w	r2, #4
 8001cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f97a 	bl	8001fde <HAL_TIM_IC_CaptureCallback>
 8001cea:	e005      	b.n	8001cf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f96d 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f97c 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d122      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d11b      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f06f 0208 	mvn.w	r2, #8
 8001d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2204      	movs	r2, #4
 8001d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f950 	bl	8001fde <HAL_TIM_IC_CaptureCallback>
 8001d3e:	e005      	b.n	8001d4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f943 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f952 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d122      	bne.n	8001da6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d11b      	bne.n	8001da6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f06f 0210 	mvn.w	r2, #16
 8001d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f926 	bl	8001fde <HAL_TIM_IC_CaptureCallback>
 8001d92:	e005      	b.n	8001da0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f919 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f928 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d10e      	bne.n	8001dd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f06f 0201 	mvn.w	r2, #1
 8001dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7fe facf 	bl	8000370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ddc:	2b80      	cmp	r3, #128	; 0x80
 8001dde:	d10e      	bne.n	8001dfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dea:	2b80      	cmp	r3, #128	; 0x80
 8001dec:	d107      	bne.n	8001dfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fa6a 	bl	80022d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e08:	2b40      	cmp	r3, #64	; 0x40
 8001e0a:	d10e      	bne.n	8001e2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e16:	2b40      	cmp	r3, #64	; 0x40
 8001e18:	d107      	bne.n	8001e2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f8ec 	bl	8002002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d10e      	bne.n	8001e56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d107      	bne.n	8001e56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f06f 0220 	mvn.w	r2, #32
 8001e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fa35 	bl	80022c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_TIM_ConfigClockSource+0x18>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e0a6      	b.n	8001fc4 <HAL_TIM_ConfigClockSource+0x166>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e94:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e9c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b40      	cmp	r3, #64	; 0x40
 8001eac:	d067      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x120>
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d80b      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x6c>
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d073      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x140>
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d802      	bhi.n	8001ec0 <HAL_TIM_ConfigClockSource+0x62>
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d06f      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001ebe:	e078      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d06c      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x140>
 8001ec4:	2b30      	cmp	r3, #48	; 0x30
 8001ec6:	d06a      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001ec8:	e073      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001eca:	2b70      	cmp	r3, #112	; 0x70
 8001ecc:	d00d      	beq.n	8001eea <HAL_TIM_ConfigClockSource+0x8c>
 8001ece:	2b70      	cmp	r3, #112	; 0x70
 8001ed0:	d804      	bhi.n	8001edc <HAL_TIM_ConfigClockSource+0x7e>
 8001ed2:	2b50      	cmp	r3, #80	; 0x50
 8001ed4:	d033      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0xe0>
 8001ed6:	2b60      	cmp	r3, #96	; 0x60
 8001ed8:	d041      	beq.n	8001f5e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001eda:	e06a      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee0:	d066      	beq.n	8001fb0 <HAL_TIM_ConfigClockSource+0x152>
 8001ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee6:	d017      	beq.n	8001f18 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001ee8:	e063      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6899      	ldr	r1, [r3, #8]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f000 f964 	bl	80021c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	609a      	str	r2, [r3, #8]
      break;
 8001f16:	e04c      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f000 f94d 	bl	80021c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f3a:	609a      	str	r2, [r3, #8]
      break;
 8001f3c:	e039      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6859      	ldr	r1, [r3, #4]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f000 f8c4 	bl	80020d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2150      	movs	r1, #80	; 0x50
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f91b 	bl	8002192 <TIM_ITRx_SetConfig>
      break;
 8001f5c:	e029      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f000 f8e2 	bl	8002134 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2160      	movs	r1, #96	; 0x60
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f90b 	bl	8002192 <TIM_ITRx_SetConfig>
      break;
 8001f7c:	e019      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f000 f8a4 	bl	80020d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2140      	movs	r1, #64	; 0x40
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f8fb 	bl	8002192 <TIM_ITRx_SetConfig>
      break;
 8001f9c:	e009      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4610      	mov	r0, r2
 8001faa:	f000 f8f2 	bl	8002192 <TIM_ITRx_SetConfig>
        break;
 8001fae:	e000      	b.n	8001fb2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001fb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a29      	ldr	r2, [pc, #164]	; (80020cc <TIM_Base_SetConfig+0xb8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x30>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x30>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <TIM_Base_SetConfig+0xbc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x30>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <TIM_Base_SetConfig+0xc0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <TIM_Base_SetConfig+0xb8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00b      	beq.n	8002076 <TIM_Base_SetConfig+0x62>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d007      	beq.n	8002076 <TIM_Base_SetConfig+0x62>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <TIM_Base_SetConfig+0xbc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d003      	beq.n	8002076 <TIM_Base_SetConfig+0x62>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <TIM_Base_SetConfig+0xc0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800207c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <TIM_Base_SetConfig+0xb8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d103      	bne.n	80020bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	615a      	str	r2, [r3, #20]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800

080020d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	f023 0201 	bic.w	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f023 030a 	bic.w	r3, r3, #10
 8002114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
 800211c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	621a      	str	r2, [r3, #32]
}
 800212a:	bf00      	nop
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f023 0210 	bic.w	r2, r3, #16
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800215e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	031b      	lsls	r3, r3, #12
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002170:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	621a      	str	r2, [r3, #32]
}
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f043 0307 	orr.w	r3, r3, #7
 80021b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	609a      	str	r2, [r3, #8]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b087      	sub	sp, #28
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	021a      	lsls	r2, r3, #8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	609a      	str	r2, [r3, #8]
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002218:	2302      	movs	r3, #2
 800221a:	e046      	b.n	80022aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00e      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d009      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10c      	bne.n	8002298 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4313      	orrs	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e03f      	b.n	8002376 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe f9f2 	bl	80006f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fc6d 	bl	8002c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800233c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800234c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800235c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	4613      	mov	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b20      	cmp	r3, #32
 8002396:	d130      	bne.n	80023fa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_UART_Transmit_IT+0x26>
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e029      	b.n	80023fc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Transmit_IT+0x38>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e022      	b.n	80023fc <HAL_UART_Transmit_IT+0x7e>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	88fa      	ldrh	r2, [r7, #6]
 80023ce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2221      	movs	r2, #33	; 0x21
 80023da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
	...

08002408 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	4613      	mov	r3, r2
 8002414:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b20      	cmp	r3, #32
 8002420:	d153      	bne.n	80024ca <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_UART_Transmit_DMA+0x26>
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e04c      	b.n	80024cc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_UART_Transmit_DMA+0x38>
 800243c:	2302      	movs	r3, #2
 800243e:	e045      	b.n	80024cc <HAL_UART_Transmit_DMA+0xc4>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2221      	movs	r2, #33	; 0x21
 8002464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_UART_Transmit_DMA+0xcc>)
 800246e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_UART_Transmit_DMA+0xd0>)
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_UART_Transmit_DMA+0xd4>)
 800247e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	2200      	movs	r2, #0
 8002486:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002488:	f107 0308 	add.w	r3, r7, #8
 800248c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3304      	adds	r3, #4
 800249c:	461a      	mov	r2, r3
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	f7fe fbb2 	bl	8000c08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024c4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
  }
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	08002829 	.word	0x08002829
 80024d8:	0800287b 	.word	0x0800287b
 80024dc:	0800291b 	.word	0x0800291b

080024e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d166      	bne.n	80025c8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_UART_Receive_DMA+0x26>
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e05f      	b.n	80025ca <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_UART_Receive_DMA+0x38>
 8002514:	2302      	movs	r3, #2
 8002516:	e058      	b.n	80025ca <HAL_UART_Receive_DMA+0xea>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	88fa      	ldrh	r2, [r7, #6]
 800252a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2222      	movs	r2, #34	; 0x22
 8002536:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	4a25      	ldr	r2, [pc, #148]	; (80025d4 <HAL_UART_Receive_DMA+0xf4>)
 8002540:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002546:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <HAL_UART_Receive_DMA+0xf8>)
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_UART_Receive_DMA+0xfc>)
 8002550:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002556:	2200      	movs	r2, #0
 8002558:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800255a:	f107 0308 	add.w	r3, r7, #8
 800255e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3304      	adds	r3, #4
 800256a:	4619      	mov	r1, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	f7fe fb49 	bl	8000c08 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	08002897 	.word	0x08002897
 80025d8:	080028ff 	.word	0x080028ff
 80025dc:	0800291b 	.word	0x0800291b

080025e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_UART_IRQHandler+0x52>
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fa6c 	bl	8002b08 <UART_Receive_IT>
      return;
 8002630:	e0d1      	b.n	80027d6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80b0 	beq.w	800279a <HAL_UART_IRQHandler+0x1ba>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d105      	bne.n	8002650 <HAL_UART_IRQHandler+0x70>
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80a5 	beq.w	800279a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_UART_IRQHandler+0x90>
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_UART_IRQHandler+0xb0>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	f043 0202 	orr.w	r2, r3, #2
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_UART_IRQHandler+0xd0>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00f      	beq.n	80026da <HAL_UART_IRQHandler+0xfa>
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d104      	bne.n	80026ce <HAL_UART_IRQHandler+0xee>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	f043 0208 	orr.w	r2, r3, #8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d078      	beq.n	80027d4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_UART_IRQHandler+0x11c>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa06 	bl	8002b08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_UART_IRQHandler+0x144>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d031      	beq.n	8002788 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f957 	bl	80029d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d023      	beq.n	8002780 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002746:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	4a21      	ldr	r2, [pc, #132]	; (80027dc <HAL_UART_IRQHandler+0x1fc>)
 8002756:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fab3 	bl	8000cc8 <HAL_DMA_Abort_IT>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d016      	beq.n	8002796 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002772:	4610      	mov	r0, r2
 8002774:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002776:	e00e      	b.n	8002796 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f84c 	bl	8002816 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277e:	e00a      	b.n	8002796 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f848 	bl	8002816 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002786:	e006      	b.n	8002796 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f844 	bl	8002816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002794:	e01e      	b.n	80027d4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002796:	bf00      	nop
    return;
 8002798:	e01c      	b.n	80027d4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_UART_IRQHandler+0x1d6>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f943 	bl	8002a3a <UART_Transmit_IT>
    return;
 80027b4:	e00f      	b.n	80027d6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_UART_IRQHandler+0x1f6>
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f984 	bl	8002ad8 <UART_EndTransmit_IT>
    return;
 80027d0:	bf00      	nop
 80027d2:	e000      	b.n	80027d6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80027d4:	bf00      	nop
  }
}
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	08002a13 	.word	0x08002a13

080027e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d113      	bne.n	800286c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002858:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002868:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800286a:	e002      	b.n	8002872 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff ffb7 	bl	80027e0 <HAL_UART_TxCpltCallback>
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff ffb2 	bl	80027f2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d11e      	bne.n	80028f0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7fd fd19 	bl	8000328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7ff ff79 	bl	8002804 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b21      	cmp	r3, #33	; 0x21
 800294c:	d108      	bne.n	8002960 <UART_DMAError+0x46>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800295a:	68b8      	ldr	r0, [r7, #8]
 800295c:	f000 f827 	bl	80029ae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b22      	cmp	r3, #34	; 0x22
 8002980:	d108      	bne.n	8002994 <UART_DMAError+0x7a>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2200      	movs	r2, #0
 800298c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800298e:	68b8      	ldr	r0, [r7, #8]
 8002990:	f000 f822 	bl	80029d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	f043 0210 	orr.w	r2, r3, #16
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029a0:	68b8      	ldr	r0, [r7, #8]
 80029a2:	f7ff ff38 	bl	8002816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80029c4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff fef2 	bl	8002816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b21      	cmp	r3, #33	; 0x21
 8002a4c:	d13e      	bne.n	8002acc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a56:	d114      	bne.n	8002a82 <UART_Transmit_IT+0x48>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d110      	bne.n	8002a82 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	1c9a      	adds	r2, r3, #2
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	621a      	str	r2, [r3, #32]
 8002a80:	e008      	b.n	8002a94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	1c59      	adds	r1, r3, #1
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6211      	str	r1, [r2, #32]
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fe71 	bl	80027e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b22      	cmp	r3, #34	; 0x22
 8002b1a:	d170      	bne.n	8002bfe <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	d117      	bne.n	8002b56 <UART_Receive_IT+0x4e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d113      	bne.n	8002b56 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	1c9a      	adds	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
 8002b54:	e026      	b.n	8002ba4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d007      	beq.n	8002b7a <UART_Receive_IT+0x72>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <UART_Receive_IT+0x80>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e008      	b.n	8002b9a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d120      	bne.n	8002bfa <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0220 	bic.w	r2, r2, #32
 8002bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fd fb99 	bl	8000328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e002      	b.n	8002c00 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
  }
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c42:	f023 030c 	bic.w	r3, r3, #12
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <UART_SetConfig+0x114>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d103      	bne.n	8002c78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c70:	f7fe ff6c 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	e002      	b.n	8002c7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c78:	f7fe ff54 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002c7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	009a      	lsls	r2, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <UART_SetConfig+0x118>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	0119      	lsls	r1, r3, #4
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009a      	lsls	r2, r3, #2
 8002ca8:	441a      	add	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <UART_SetConfig+0x118>)
 8002cb6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2064      	movs	r0, #100	; 0x64
 8002cbe:	fb00 f303 	mul.w	r3, r0, r3
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	3332      	adds	r3, #50	; 0x32
 8002cc8:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <UART_SetConfig+0x118>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd4:	4419      	add	r1, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	009a      	lsls	r2, r3, #2
 8002ce0:	441a      	add	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <UART_SetConfig+0x118>)
 8002cee:	fba3 0302 	umull	r0, r3, r3, r2
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2064      	movs	r0, #100	; 0x64
 8002cf6:	fb00 f303 	mul.w	r3, r0, r3
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	3332      	adds	r3, #50	; 0x32
 8002d00:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <UART_SetConfig+0x118>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	f003 020f 	and.w	r2, r3, #15
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	440a      	add	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40013800 	.word	0x40013800
 8002d20:	51eb851f 	.word	0x51eb851f

08002d24 <convertToStucture>:
#include <string.h>
#include<ctype.h>
#include<stdlib.h>
#include<main.h>
#include<stm32f1xx.h>
void convertToStucture(uint8_t *msg, struct List **prog) {
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	b0a0      	sub	sp, #128	; 0x80
 8002d28:	af0a      	add	r7, sp, #40	; 0x28
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
	uint8_t buffor[10];
	uint8_t i = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Subroutine tempData;
	static uint8_t ID = 0;
	//wypelnienie tablicy name[] i heatingCycle zerami
	for (int i = 0; i < sizeof(tempData.name); i++) {
 8002d34:	2300      	movs	r3, #0
 8002d36:	653b      	str	r3, [r7, #80]	; 0x50
 8002d38:	e008      	b.n	8002d4c <convertToStucture+0x28>
		tempData.name[i] = 0;
 8002d3a:	f107 0209 	add.w	r2, r7, #9
 8002d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d40:	4413      	add	r3, r2
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tempData.name); i++) {
 8002d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d48:	3301      	adds	r3, #1
 8002d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8002d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4e:	2b13      	cmp	r3, #19
 8002d50:	d9f3      	bls.n	8002d3a <convertToStucture+0x16>
	}
	for (int i = 0; i < 5; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d56:	e015      	b.n	8002d84 <convertToStucture+0x60>
		for (int j = 0; j < 2; j++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d5c:	e00c      	b.n	8002d78 <convertToStucture+0x54>
			tempData.heatingCycle[i][j] = 0;
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002d66:	441a      	add	r2, r3
 8002d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b3b      	subs	r3, #59	; 0x3b
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 2; j++)
 8002d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d74:	3301      	adds	r3, #1
 8002d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	ddef      	ble.n	8002d5e <convertToStucture+0x3a>
	for (int i = 0; i < 5; i++)
 8002d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d80:	3301      	adds	r3, #1
 8002d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	dde6      	ble.n	8002d58 <convertToStucture+0x34>

	//przewin do ' ' i pobierz komendę do buffora, aby ją porównać
	while ((buffor[i++] = *msg++) != ' ')
 8002d8a:	bf00      	nop
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002d96:	1c51      	adds	r1, r2, #1
 8002d98:	f887 1057 	strb.w	r1, [r7, #87]	; 0x57
 8002d9c:	7819      	ldrb	r1, [r3, #0]
 8002d9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002da2:	4413      	add	r3, r2
 8002da4:	f803 1c20 	strb.w	r1, [r3, #-32]
 8002da8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dac:	4413      	add	r3, r2
 8002dae:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d1ea      	bne.n	8002d8c <convertToStucture+0x68>
		;
	//-----------odszyfrowanie komend--------------
	if (strncmp((char*) buffor, "NEW", 3) == 0) { //------------NEW---------
 8002db6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002dba:	2203      	movs	r2, #3
 8002dbc:	4971      	ldr	r1, [pc, #452]	; (8002f84 <convertToStucture+0x260>)
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fb63 	bl	800348a <strncmp>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d15a      	bne.n	8002e80 <convertToStucture+0x15c>
		//stworzenie nowego programu na liscie

		msg = przewinDo(msg, '[');
 8002dca:	215b      	movs	r1, #91	; 0x5b
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f8e5 	bl	8002f9c <przewinDo>
 8002dd2:	6078      	str	r0, [r7, #4]
		uint8_t i = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		while (!(*(++msg) == ']'))
 8002dda:	e00c      	b.n	8002df6 <convertToStucture+0xd2>
			tempData.name[i++] = *msg; // tymczasowa nazwa
 8002ddc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8002de6:	4619      	mov	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002df0:	440b      	add	r3, r1
 8002df2:	f803 2c4f 	strb.w	r2, [r3, #-79]
		while (!(*(++msg) == ']'))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b5d      	cmp	r3, #93	; 0x5d
 8002e02:	d1eb      	bne.n	8002ddc <convertToStucture+0xb8>
//----------odszyfrowanie temperatur----------
		for (uint8_t i = 0; i < 5; i++) {
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e0a:	e00d      	b.n	8002e28 <convertToStucture+0x104>
			msg = readTemperature(msg, &tempData, i);
 8002e0c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002e10:	f107 0308 	add.w	r3, r7, #8
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8d4 	bl	8002fc4 <readTemperature>
 8002e1c:	6078      	str	r0, [r7, #4]
		for (uint8_t i = 0; i < 5; i++) {
 8002e1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e22:	3301      	adds	r3, #1
 8002e24:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d9ed      	bls.n	8002e0c <convertToStucture+0xe8>
		}
//----------nadanie nowego ID------------
		tempData.ID = ID;
 8002e30:	4b55      	ldr	r3, [pc, #340]	; (8002f88 <convertToStucture+0x264>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	723b      	strb	r3, [r7, #8]
		ID++;
 8002e36:	4b54      	ldr	r3, [pc, #336]	; (8002f88 <convertToStucture+0x264>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b52      	ldr	r3, [pc, #328]	; (8002f88 <convertToStucture+0x264>)
 8002e40:	701a      	strb	r2, [r3, #0]
		push_front(prog, tempData);
 8002e42:	466d      	mov	r5, sp
 8002e44:	f107 0410 	add.w	r4, r7, #16
 8002e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e58:	f107 0308 	add.w	r3, r7, #8
 8002e5c:	cb0c      	ldmia	r3, {r2, r3}
 8002e5e:	6838      	ldr	r0, [r7, #0]
 8002e60:	f000 f955 	bl	800310e <push_front>
		(*prog)->data = tempData;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461d      	mov	r5, r3
 8002e6a:	f107 0408 	add.w	r4, r7, #8
 8002e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002e7e:	e077      	b.n	8002f70 <convertToStucture+0x24c>
	} else if (strncmp((char*) buffor, "LIST", 4) == 0) { //------------LIST--------------
 8002e80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e84:	2204      	movs	r2, #4
 8002e86:	4941      	ldr	r1, [pc, #260]	; (8002f8c <convertToStucture+0x268>)
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fafe 	bl	800348a <strncmp>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <convertToStucture+0x17c>
		show(*prog);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f961 	bl	8003160 <show>
 8002e9e:	e067      	b.n	8002f70 <convertToStucture+0x24c>
	} else if (strncmp((char*) buffor, "READ", 4) == 0) {
 8002ea0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	493a      	ldr	r1, [pc, #232]	; (8002f90 <convertToStucture+0x26c>)
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 faee 	bl	800348a <strncmp>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d05d      	beq.n	8002f70 <convertToStucture+0x24c>

	} else if (strncmp((char*) buffor, "SET", 3) == 0) { //-------------SET-------------
 8002eb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4936      	ldr	r1, [pc, #216]	; (8002f94 <convertToStucture+0x270>)
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fae4 	bl	800348a <strncmp>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d14c      	bne.n	8002f62 <convertToStucture+0x23e>
		msg = przewinDo(msg, '[');
 8002ec8:	215b      	movs	r1, #91	; 0x5b
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f866 	bl	8002f9c <przewinDo>
 8002ed0:	6078      	str	r0, [r7, #4]
		msg = conv(msg, &tempData.ID);
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f8dc 	bl	8003096 <conv>
 8002ede:	6078      	str	r0, [r7, #4]
		msg = przewinDo(msg, '[');
 8002ee0:	215b      	movs	r1, #91	; 0x5b
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f85a 	bl	8002f9c <przewinDo>
 8002ee8:	6078      	str	r0, [r7, #4]
		uint8_t i = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		while (!(*(++msg) == ']'))
 8002ef0:	e00c      	b.n	8002f0c <convertToStucture+0x1e8>
			tempData.name[i++] = *msg; // tymczasowa nazwa
 8002ef2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8002efc:	4619      	mov	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f06:	440b      	add	r3, r1
 8002f08:	f803 2c4f 	strb.w	r2, [r3, #-79]
		while (!(*(++msg) == ']'))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b5d      	cmp	r3, #93	; 0x5d
 8002f18:	d1eb      	bne.n	8002ef2 <convertToStucture+0x1ce>
		//----------odszyfrowanie temperatur----------
		for (uint8_t i = 0; i < 5; i++) {
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8002f20:	e00d      	b.n	8002f3e <convertToStucture+0x21a>
			msg = readTemperature(msg, &tempData, i);
 8002f22:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002f26:	f107 0308 	add.w	r3, r7, #8
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f849 	bl	8002fc4 <readTemperature>
 8002f32:	6078      	str	r0, [r7, #4]
		for (uint8_t i = 0; i < 5; i++) {
 8002f34:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8002f3e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d9ed      	bls.n	8002f22 <convertToStucture+0x1fe>
		}
		(*prog)->data = tempData;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	f107 0408 	add.w	r4, r7, #8
 8002f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f5c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f60:	e006      	b.n	8002f70 <convertToStucture+0x24c>
	} else if (strncmp((char*) buffor, "ACTIVE", 6) == 0) { //----------ACTIVE-------------
 8002f62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f66:	2206      	movs	r2, #6
 8002f68:	490b      	ldr	r1, [pc, #44]	; (8002f98 <convertToStucture+0x274>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa8d 	bl	800348a <strncmp>

	}
	//--------przewin msg do konca------------
	msg=przewinDo(msg,'\0');
 8002f70:	2100      	movs	r1, #0
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f812 	bl	8002f9c <przewinDo>
 8002f78:	6078      	str	r0, [r7, #4]
}
 8002f7a:	bf00      	nop
 8002f7c:	3758      	adds	r7, #88	; 0x58
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bdb0      	pop	{r4, r5, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08003c90 	.word	0x08003c90
 8002f88:	20000200 	.word	0x20000200
 8002f8c:	08003c94 	.word	0x08003c94
 8002f90:	08003c9c 	.word	0x08003c9c
 8002f94:	08003ca4 	.word	0x08003ca4
 8002f98:	08003ca8 	.word	0x08003ca8

08002f9c <przewinDo>:
uint8_t* przewinDo(uint8_t *msg, uint8_t znak) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
	while (!(*(++msg) == znak))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3301      	adds	r3, #1
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1f7      	bne.n	8002fa8 <przewinDo+0xc>
		;
	return msg;
 8002fb8:	687b      	ldr	r3, [r7, #4]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <readTemperature>:
uint8_t* readTemperature(uint8_t *msg, Subroutine *dataTemp,
		uint8_t currentCycle) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	71fb      	strb	r3, [r7, #7]
	//--------jezeli faktycznieeee poprawnie uzyte----------
	if ((*msg) != '\0') {
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d04f      	beq.n	800307a <readTemperature+0xb6>
		//-------przewiń do S------
		if (strstr((char*) msg, "S")) {
 8002fda:	2153      	movs	r1, #83	; 0x53
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 fa47 	bl	8003470 <strchr>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d042      	beq.n	800306e <readTemperature+0xaa>
			while ((*msg++) != 'S')
 8002fe8:	bf00      	nop
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	60fa      	str	r2, [r7, #12]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b53      	cmp	r3, #83	; 0x53
 8002ff4:	d1f9      	bne.n	8002fea <readTemperature+0x26>
				;
			//-------PID lub dwustawna--------
			dataTemp->regType = *msg++ == 0 ? false : true;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	60fa      	str	r2, [r7, #12]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2da      	uxtb	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f883 2020 	strb.w	r2, [r3, #32]
		}
		//-------Wypełnienie cykli--------

		/*tymczasowa convna temp służy do
		 zamienienia kilkucyfrowego ciągu znaków w liczbę*/
		while (*msg != ';') {
 800300e:	e02e      	b.n	800306e <readTemperature+0xaa>

			//-----Pobranie temperatury------
			if (*msg == 'T') {
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b54      	cmp	r3, #84	; 0x54
 8003016:	d10b      	bne.n	8003030 <readTemperature+0x6c>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][0]);
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	3308      	adds	r3, #8
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	4413      	add	r3, r2
 8003022:	3305      	adds	r3, #5
 8003024:	4619      	mov	r1, r3
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f835 	bl	8003096 <conv>
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	e01e      	b.n	800306e <readTemperature+0xaa>

				//---------Pobranie czasu-------
			} else if (*msg == 't') {
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b74      	cmp	r3, #116	; 0x74
 8003036:	d10b      	bne.n	8003050 <readTemperature+0x8c>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][1]);
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	3311      	adds	r3, #17
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4413      	add	r3, r2
 8003042:	3305      	adds	r3, #5
 8003044:	4619      	mov	r1, r3
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f825 	bl	8003096 <conv>
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	e00e      	b.n	800306e <readTemperature+0xaa>
			} else if (*msg == 'H') { //histereza
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b48      	cmp	r3, #72	; 0x48
 8003056:	d00a      	beq.n	800306e <readTemperature+0xaa>

			} else if (*msg == 'P') {
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b50      	cmp	r3, #80	; 0x50
 800305e:	d10b      	bne.n	8003078 <readTemperature+0xb4>
				msg = conv(msg, &dataTemp->pumpingTime);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	331f      	adds	r3, #31
 8003064:	4619      	mov	r1, r3
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f815 	bl	8003096 <conv>
 800306c:	60f8      	str	r0, [r7, #12]
		while (*msg != ';') {
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b3b      	cmp	r3, #59	; 0x3b
 8003074:	d1cc      	bne.n	8003010 <readTemperature+0x4c>
 8003076:	e000      	b.n	800307a <readTemperature+0xb6>
			} else
				break;
 8003078:	bf00      	nop

		}
	}
	return (*msg) != '\0' ? ++msg : msg; //zwroc wskaznik w ostatnim polozeniu
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <readTemperature+0xc8>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3301      	adds	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	e000      	b.n	800308e <readTemperature+0xca>
 800308c:	68fb      	ldr	r3, [r7, #12]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <conv>:
uint8_t* conv(uint8_t *msg, uint8_t *digit) {
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
	uint8_t temp[3] = { 'a' };
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	2100      	movs	r1, #0
 80030a6:	460a      	mov	r2, r1
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	460a      	mov	r2, r1
 80030ac:	709a      	strb	r2, [r3, #2]
 80030ae:	2361      	movs	r3, #97	; 0x61
 80030b0:	733b      	strb	r3, [r7, #12]
	uint8_t i;
	++msg;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3301      	adds	r3, #1
 80030b6:	607b      	str	r3, [r7, #4]
	for (i = 0; isdigit(*msg); i++) {
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	e00d      	b.n	80030da <conv+0x44>
		temp[i] = *msg++;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	7819      	ldrb	r1, [r3, #0]
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4413      	add	r3, r2
 80030ce:	460a      	mov	r2, r1
 80030d0:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (i = 0; isdigit(*msg); i++) {
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	3301      	adds	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
 80030da:	f000 f8c3 	bl	8003264 <__locale_ctype_ptr>
 80030de:	4602      	mov	r2, r0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e5      	bne.n	80030be <conv+0x28>
	}
	*digit = atoi((char*) temp);
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f882 	bl	8003200 <atoi>
 80030fc:	4603      	mov	r3, r0
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	701a      	strb	r2, [r3, #0]
	return msg;
 8003104:	687b      	ldr	r3, [r7, #4]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <push_front>:
void push_front(List **head, Subroutine data) {
 800310e:	b082      	sub	sp, #8
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	f107 0120 	add.w	r1, r7, #32
 800311c:	e881 000c 	stmia.w	r1, {r2, r3}
	List *current;
	current = (List*) malloc(sizeof(List));
 8003120:	2038      	movs	r0, #56	; 0x38
 8003122:	f000 f8ad 	bl	8003280 <malloc>
 8003126:	4603      	mov	r3, r0
 8003128:	60fb      	str	r3, [r7, #12]

	current->data = data;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	461c      	mov	r4, r3
 800312e:	f107 0520 	add.w	r5, r7, #32
 8003132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800313a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800313e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	current->next = (*head);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
	*head = current;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	601a      	str	r2, [r3, #0]
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800315a:	b002      	add	sp, #8
 800315c:	4770      	bx	lr
	...

08003160 <show>:

		current->next = (List*) malloc(sizeof(List));
		current->next->next = NULL;
	}
}
void show(List *head) {
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b08b      	sub	sp, #44	; 0x2c
 8003164:	af02      	add	r7, sp, #8
 8003166:	6078      	str	r0, [r7, #4]
	char tekst1[] = "List is empty\n\r";
 8003168:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <show+0x84>)
 800316a:	f107 040c 	add.w	r4, r7, #12
 800316e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (head == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d107      	bne.n	800318a <show+0x2a>
		HAL_UART_Transmit_DMA(&huart2,  tekst1, sizeof(tekst1));
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	2210      	movs	r2, #16
 8003180:	4619      	mov	r1, r3
 8003182:	4819      	ldr	r0, [pc, #100]	; (80031e8 <show+0x88>)
 8003184:	f7ff f940 	bl	8002408 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_IT(&huart2, wysylanaWiadomosc, size1);
			current = current->next;
		} while (current != NULL);

	}
}
 8003188:	e027      	b.n	80031da <show+0x7a>
		List *current = head;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	61fb      	str	r3, [r7, #28]
					current->data.ID, current->data.name,
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	781b      	ldrb	r3, [r3, #0]
			size1 = sprintf((char*) wysylanaWiadomosc,
 8003192:	4619      	mov	r1, r3
					current->data.ID, current->data.name,
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	1c5a      	adds	r2, r3, #1
					current->data.regType == 1 ? "PID" : "Dwustawna");
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f893 3020 	ldrb.w	r3, [r3, #32]
			size1 = sprintf((char*) wysylanaWiadomosc,
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <show+0x46>
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <show+0x8c>)
 80031a4:	e000      	b.n	80031a8 <show+0x48>
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <show+0x90>)
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	460a      	mov	r2, r1
 80031ae:	4911      	ldr	r1, [pc, #68]	; (80031f4 <show+0x94>)
 80031b0:	4811      	ldr	r0, [pc, #68]	; (80031f8 <show+0x98>)
 80031b2:	f000 f93d 	bl	8003430 <siprintf>
 80031b6:	4603      	mov	r3, r0
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <show+0x9c>)
 80031bc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, wysylanaWiadomosc, size1);
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <show+0x9c>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	490c      	ldr	r1, [pc, #48]	; (80031f8 <show+0x98>)
 80031c8:	4807      	ldr	r0, [pc, #28]	; (80031e8 <show+0x88>)
 80031ca:	f7ff f8d8 	bl	800237e <HAL_UART_Transmit_IT>
			current = current->next;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	61fb      	str	r3, [r7, #28]
		} while (current != NULL);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1d9      	bne.n	800318e <show+0x2e>
}
 80031da:	bf00      	nop
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd90      	pop	{r4, r7, pc}
 80031e2:	bf00      	nop
 80031e4:	08003ce8 	.word	0x08003ce8
 80031e8:	200003d0 	.word	0x200003d0
 80031ec:	08003cb0 	.word	0x08003cb0
 80031f0:	08003cb4 	.word	0x08003cb4
 80031f4:	08003cc0 	.word	0x08003cc0
 80031f8:	2000029c 	.word	0x2000029c
 80031fc:	2000021a 	.word	0x2000021a

08003200 <atoi>:
 8003200:	220a      	movs	r2, #10
 8003202:	2100      	movs	r1, #0
 8003204:	f000 b9ce 	b.w	80035a4 <strtol>

08003208 <__errno>:
 8003208:	4b01      	ldr	r3, [pc, #4]	; (8003210 <__errno+0x8>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	2000000c 	.word	0x2000000c

08003214 <__libc_init_array>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	2500      	movs	r5, #0
 8003218:	4e0c      	ldr	r6, [pc, #48]	; (800324c <__libc_init_array+0x38>)
 800321a:	4c0d      	ldr	r4, [pc, #52]	; (8003250 <__libc_init_array+0x3c>)
 800321c:	1ba4      	subs	r4, r4, r6
 800321e:	10a4      	asrs	r4, r4, #2
 8003220:	42a5      	cmp	r5, r4
 8003222:	d109      	bne.n	8003238 <__libc_init_array+0x24>
 8003224:	f000 fd1e 	bl	8003c64 <_init>
 8003228:	2500      	movs	r5, #0
 800322a:	4e0a      	ldr	r6, [pc, #40]	; (8003254 <__libc_init_array+0x40>)
 800322c:	4c0a      	ldr	r4, [pc, #40]	; (8003258 <__libc_init_array+0x44>)
 800322e:	1ba4      	subs	r4, r4, r6
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	42a5      	cmp	r5, r4
 8003234:	d105      	bne.n	8003242 <__libc_init_array+0x2e>
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800323c:	4798      	blx	r3
 800323e:	3501      	adds	r5, #1
 8003240:	e7ee      	b.n	8003220 <__libc_init_array+0xc>
 8003242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003246:	4798      	blx	r3
 8003248:	3501      	adds	r5, #1
 800324a:	e7f2      	b.n	8003232 <__libc_init_array+0x1e>
 800324c:	08003e50 	.word	0x08003e50
 8003250:	08003e50 	.word	0x08003e50
 8003254:	08003e50 	.word	0x08003e50
 8003258:	08003e54 	.word	0x08003e54

0800325c <__locale_ctype_ptr_l>:
 800325c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003260:	4770      	bx	lr
	...

08003264 <__locale_ctype_ptr>:
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <__locale_ctype_ptr+0x14>)
 8003266:	4a05      	ldr	r2, [pc, #20]	; (800327c <__locale_ctype_ptr+0x18>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf08      	it	eq
 8003270:	4613      	moveq	r3, r2
 8003272:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8003276:	4770      	bx	lr
 8003278:	2000000c 	.word	0x2000000c
 800327c:	20000070 	.word	0x20000070

08003280 <malloc>:
 8003280:	4b02      	ldr	r3, [pc, #8]	; (800328c <malloc+0xc>)
 8003282:	4601      	mov	r1, r0
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	f000 b869 	b.w	800335c <_malloc_r>
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c

08003290 <__ascii_mbtowc>:
 8003290:	b082      	sub	sp, #8
 8003292:	b901      	cbnz	r1, 8003296 <__ascii_mbtowc+0x6>
 8003294:	a901      	add	r1, sp, #4
 8003296:	b142      	cbz	r2, 80032aa <__ascii_mbtowc+0x1a>
 8003298:	b14b      	cbz	r3, 80032ae <__ascii_mbtowc+0x1e>
 800329a:	7813      	ldrb	r3, [r2, #0]
 800329c:	600b      	str	r3, [r1, #0]
 800329e:	7812      	ldrb	r2, [r2, #0]
 80032a0:	1c10      	adds	r0, r2, #0
 80032a2:	bf18      	it	ne
 80032a4:	2001      	movne	r0, #1
 80032a6:	b002      	add	sp, #8
 80032a8:	4770      	bx	lr
 80032aa:	4610      	mov	r0, r2
 80032ac:	e7fb      	b.n	80032a6 <__ascii_mbtowc+0x16>
 80032ae:	f06f 0001 	mvn.w	r0, #1
 80032b2:	e7f8      	b.n	80032a6 <__ascii_mbtowc+0x16>

080032b4 <memset>:
 80032b4:	4603      	mov	r3, r0
 80032b6:	4402      	add	r2, r0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d100      	bne.n	80032be <memset+0xa>
 80032bc:	4770      	bx	lr
 80032be:	f803 1b01 	strb.w	r1, [r3], #1
 80032c2:	e7f9      	b.n	80032b8 <memset+0x4>

080032c4 <_free_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	4605      	mov	r5, r0
 80032c8:	2900      	cmp	r1, #0
 80032ca:	d043      	beq.n	8003354 <_free_r+0x90>
 80032cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032d0:	1f0c      	subs	r4, r1, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bfb8      	it	lt
 80032d6:	18e4      	addlt	r4, r4, r3
 80032d8:	f000 f987 	bl	80035ea <__malloc_lock>
 80032dc:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <_free_r+0x94>)
 80032de:	6813      	ldr	r3, [r2, #0]
 80032e0:	4610      	mov	r0, r2
 80032e2:	b933      	cbnz	r3, 80032f2 <_free_r+0x2e>
 80032e4:	6063      	str	r3, [r4, #4]
 80032e6:	6014      	str	r4, [r2, #0]
 80032e8:	4628      	mov	r0, r5
 80032ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ee:	f000 b97d 	b.w	80035ec <__malloc_unlock>
 80032f2:	42a3      	cmp	r3, r4
 80032f4:	d90b      	bls.n	800330e <_free_r+0x4a>
 80032f6:	6821      	ldr	r1, [r4, #0]
 80032f8:	1862      	adds	r2, r4, r1
 80032fa:	4293      	cmp	r3, r2
 80032fc:	bf01      	itttt	eq
 80032fe:	681a      	ldreq	r2, [r3, #0]
 8003300:	685b      	ldreq	r3, [r3, #4]
 8003302:	1852      	addeq	r2, r2, r1
 8003304:	6022      	streq	r2, [r4, #0]
 8003306:	6063      	str	r3, [r4, #4]
 8003308:	6004      	str	r4, [r0, #0]
 800330a:	e7ed      	b.n	80032e8 <_free_r+0x24>
 800330c:	4613      	mov	r3, r2
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	b10a      	cbz	r2, 8003316 <_free_r+0x52>
 8003312:	42a2      	cmp	r2, r4
 8003314:	d9fa      	bls.n	800330c <_free_r+0x48>
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	1858      	adds	r0, r3, r1
 800331a:	42a0      	cmp	r0, r4
 800331c:	d10b      	bne.n	8003336 <_free_r+0x72>
 800331e:	6820      	ldr	r0, [r4, #0]
 8003320:	4401      	add	r1, r0
 8003322:	1858      	adds	r0, r3, r1
 8003324:	4282      	cmp	r2, r0
 8003326:	6019      	str	r1, [r3, #0]
 8003328:	d1de      	bne.n	80032e8 <_free_r+0x24>
 800332a:	6810      	ldr	r0, [r2, #0]
 800332c:	6852      	ldr	r2, [r2, #4]
 800332e:	4401      	add	r1, r0
 8003330:	6019      	str	r1, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	e7d8      	b.n	80032e8 <_free_r+0x24>
 8003336:	d902      	bls.n	800333e <_free_r+0x7a>
 8003338:	230c      	movs	r3, #12
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	e7d4      	b.n	80032e8 <_free_r+0x24>
 800333e:	6820      	ldr	r0, [r4, #0]
 8003340:	1821      	adds	r1, r4, r0
 8003342:	428a      	cmp	r2, r1
 8003344:	bf01      	itttt	eq
 8003346:	6811      	ldreq	r1, [r2, #0]
 8003348:	6852      	ldreq	r2, [r2, #4]
 800334a:	1809      	addeq	r1, r1, r0
 800334c:	6021      	streq	r1, [r4, #0]
 800334e:	6062      	str	r2, [r4, #4]
 8003350:	605c      	str	r4, [r3, #4]
 8003352:	e7c9      	b.n	80032e8 <_free_r+0x24>
 8003354:	bd38      	pop	{r3, r4, r5, pc}
 8003356:	bf00      	nop
 8003358:	20000204 	.word	0x20000204

0800335c <_malloc_r>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	1ccd      	adds	r5, r1, #3
 8003360:	f025 0503 	bic.w	r5, r5, #3
 8003364:	3508      	adds	r5, #8
 8003366:	2d0c      	cmp	r5, #12
 8003368:	bf38      	it	cc
 800336a:	250c      	movcc	r5, #12
 800336c:	2d00      	cmp	r5, #0
 800336e:	4606      	mov	r6, r0
 8003370:	db01      	blt.n	8003376 <_malloc_r+0x1a>
 8003372:	42a9      	cmp	r1, r5
 8003374:	d903      	bls.n	800337e <_malloc_r+0x22>
 8003376:	230c      	movs	r3, #12
 8003378:	6033      	str	r3, [r6, #0]
 800337a:	2000      	movs	r0, #0
 800337c:	bd70      	pop	{r4, r5, r6, pc}
 800337e:	f000 f934 	bl	80035ea <__malloc_lock>
 8003382:	4a21      	ldr	r2, [pc, #132]	; (8003408 <_malloc_r+0xac>)
 8003384:	6814      	ldr	r4, [r2, #0]
 8003386:	4621      	mov	r1, r4
 8003388:	b991      	cbnz	r1, 80033b0 <_malloc_r+0x54>
 800338a:	4c20      	ldr	r4, [pc, #128]	; (800340c <_malloc_r+0xb0>)
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	b91b      	cbnz	r3, 8003398 <_malloc_r+0x3c>
 8003390:	4630      	mov	r0, r6
 8003392:	f000 f83d 	bl	8003410 <_sbrk_r>
 8003396:	6020      	str	r0, [r4, #0]
 8003398:	4629      	mov	r1, r5
 800339a:	4630      	mov	r0, r6
 800339c:	f000 f838 	bl	8003410 <_sbrk_r>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d124      	bne.n	80033ee <_malloc_r+0x92>
 80033a4:	230c      	movs	r3, #12
 80033a6:	4630      	mov	r0, r6
 80033a8:	6033      	str	r3, [r6, #0]
 80033aa:	f000 f91f 	bl	80035ec <__malloc_unlock>
 80033ae:	e7e4      	b.n	800337a <_malloc_r+0x1e>
 80033b0:	680b      	ldr	r3, [r1, #0]
 80033b2:	1b5b      	subs	r3, r3, r5
 80033b4:	d418      	bmi.n	80033e8 <_malloc_r+0x8c>
 80033b6:	2b0b      	cmp	r3, #11
 80033b8:	d90f      	bls.n	80033da <_malloc_r+0x7e>
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	18cc      	adds	r4, r1, r3
 80033be:	50cd      	str	r5, [r1, r3]
 80033c0:	4630      	mov	r0, r6
 80033c2:	f000 f913 	bl	80035ec <__malloc_unlock>
 80033c6:	f104 000b 	add.w	r0, r4, #11
 80033ca:	1d23      	adds	r3, r4, #4
 80033cc:	f020 0007 	bic.w	r0, r0, #7
 80033d0:	1ac3      	subs	r3, r0, r3
 80033d2:	d0d3      	beq.n	800337c <_malloc_r+0x20>
 80033d4:	425a      	negs	r2, r3
 80033d6:	50e2      	str	r2, [r4, r3]
 80033d8:	e7d0      	b.n	800337c <_malloc_r+0x20>
 80033da:	684b      	ldr	r3, [r1, #4]
 80033dc:	428c      	cmp	r4, r1
 80033de:	bf16      	itet	ne
 80033e0:	6063      	strne	r3, [r4, #4]
 80033e2:	6013      	streq	r3, [r2, #0]
 80033e4:	460c      	movne	r4, r1
 80033e6:	e7eb      	b.n	80033c0 <_malloc_r+0x64>
 80033e8:	460c      	mov	r4, r1
 80033ea:	6849      	ldr	r1, [r1, #4]
 80033ec:	e7cc      	b.n	8003388 <_malloc_r+0x2c>
 80033ee:	1cc4      	adds	r4, r0, #3
 80033f0:	f024 0403 	bic.w	r4, r4, #3
 80033f4:	42a0      	cmp	r0, r4
 80033f6:	d005      	beq.n	8003404 <_malloc_r+0xa8>
 80033f8:	1a21      	subs	r1, r4, r0
 80033fa:	4630      	mov	r0, r6
 80033fc:	f000 f808 	bl	8003410 <_sbrk_r>
 8003400:	3001      	adds	r0, #1
 8003402:	d0cf      	beq.n	80033a4 <_malloc_r+0x48>
 8003404:	6025      	str	r5, [r4, #0]
 8003406:	e7db      	b.n	80033c0 <_malloc_r+0x64>
 8003408:	20000204 	.word	0x20000204
 800340c:	20000208 	.word	0x20000208

08003410 <_sbrk_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	2300      	movs	r3, #0
 8003414:	4c05      	ldr	r4, [pc, #20]	; (800342c <_sbrk_r+0x1c>)
 8003416:	4605      	mov	r5, r0
 8003418:	4608      	mov	r0, r1
 800341a:	6023      	str	r3, [r4, #0]
 800341c:	f7fd f876 	bl	800050c <_sbrk>
 8003420:	1c43      	adds	r3, r0, #1
 8003422:	d102      	bne.n	800342a <_sbrk_r+0x1a>
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	b103      	cbz	r3, 800342a <_sbrk_r+0x1a>
 8003428:	602b      	str	r3, [r5, #0]
 800342a:	bd38      	pop	{r3, r4, r5, pc}
 800342c:	20000414 	.word	0x20000414

08003430 <siprintf>:
 8003430:	b40e      	push	{r1, r2, r3}
 8003432:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003436:	b500      	push	{lr}
 8003438:	b09c      	sub	sp, #112	; 0x70
 800343a:	ab1d      	add	r3, sp, #116	; 0x74
 800343c:	9002      	str	r0, [sp, #8]
 800343e:	9006      	str	r0, [sp, #24]
 8003440:	9107      	str	r1, [sp, #28]
 8003442:	9104      	str	r1, [sp, #16]
 8003444:	4808      	ldr	r0, [pc, #32]	; (8003468 <siprintf+0x38>)
 8003446:	4909      	ldr	r1, [pc, #36]	; (800346c <siprintf+0x3c>)
 8003448:	f853 2b04 	ldr.w	r2, [r3], #4
 800344c:	9105      	str	r1, [sp, #20]
 800344e:	6800      	ldr	r0, [r0, #0]
 8003450:	a902      	add	r1, sp, #8
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	f000 f926 	bl	80036a4 <_svfiprintf_r>
 8003458:	2200      	movs	r2, #0
 800345a:	9b02      	ldr	r3, [sp, #8]
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	b01c      	add	sp, #112	; 0x70
 8003460:	f85d eb04 	ldr.w	lr, [sp], #4
 8003464:	b003      	add	sp, #12
 8003466:	4770      	bx	lr
 8003468:	2000000c 	.word	0x2000000c
 800346c:	ffff0208 	.word	0xffff0208

08003470 <strchr>:
 8003470:	b2c9      	uxtb	r1, r1
 8003472:	4603      	mov	r3, r0
 8003474:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003478:	b11a      	cbz	r2, 8003482 <strchr+0x12>
 800347a:	428a      	cmp	r2, r1
 800347c:	d1f9      	bne.n	8003472 <strchr+0x2>
 800347e:	4618      	mov	r0, r3
 8003480:	4770      	bx	lr
 8003482:	2900      	cmp	r1, #0
 8003484:	bf18      	it	ne
 8003486:	2300      	movne	r3, #0
 8003488:	e7f9      	b.n	800347e <strchr+0xe>

0800348a <strncmp>:
 800348a:	b510      	push	{r4, lr}
 800348c:	b16a      	cbz	r2, 80034aa <strncmp+0x20>
 800348e:	3901      	subs	r1, #1
 8003490:	1884      	adds	r4, r0, r2
 8003492:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003496:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800349a:	4293      	cmp	r3, r2
 800349c:	d103      	bne.n	80034a6 <strncmp+0x1c>
 800349e:	42a0      	cmp	r0, r4
 80034a0:	d001      	beq.n	80034a6 <strncmp+0x1c>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f5      	bne.n	8003492 <strncmp+0x8>
 80034a6:	1a98      	subs	r0, r3, r2
 80034a8:	bd10      	pop	{r4, pc}
 80034aa:	4610      	mov	r0, r2
 80034ac:	e7fc      	b.n	80034a8 <strncmp+0x1e>

080034ae <_strtol_l.isra.0>:
 80034ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b2:	4680      	mov	r8, r0
 80034b4:	4689      	mov	r9, r1
 80034b6:	4692      	mov	sl, r2
 80034b8:	461e      	mov	r6, r3
 80034ba:	460f      	mov	r7, r1
 80034bc:	463d      	mov	r5, r7
 80034be:	9808      	ldr	r0, [sp, #32]
 80034c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034c4:	f7ff feca 	bl	800325c <__locale_ctype_ptr_l>
 80034c8:	4420      	add	r0, r4
 80034ca:	7843      	ldrb	r3, [r0, #1]
 80034cc:	f013 0308 	ands.w	r3, r3, #8
 80034d0:	d132      	bne.n	8003538 <_strtol_l.isra.0+0x8a>
 80034d2:	2c2d      	cmp	r4, #45	; 0x2d
 80034d4:	d132      	bne.n	800353c <_strtol_l.isra.0+0x8e>
 80034d6:	2201      	movs	r2, #1
 80034d8:	787c      	ldrb	r4, [r7, #1]
 80034da:	1cbd      	adds	r5, r7, #2
 80034dc:	2e00      	cmp	r6, #0
 80034de:	d05d      	beq.n	800359c <_strtol_l.isra.0+0xee>
 80034e0:	2e10      	cmp	r6, #16
 80034e2:	d109      	bne.n	80034f8 <_strtol_l.isra.0+0x4a>
 80034e4:	2c30      	cmp	r4, #48	; 0x30
 80034e6:	d107      	bne.n	80034f8 <_strtol_l.isra.0+0x4a>
 80034e8:	782b      	ldrb	r3, [r5, #0]
 80034ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80034ee:	2b58      	cmp	r3, #88	; 0x58
 80034f0:	d14f      	bne.n	8003592 <_strtol_l.isra.0+0xe4>
 80034f2:	2610      	movs	r6, #16
 80034f4:	786c      	ldrb	r4, [r5, #1]
 80034f6:	3502      	adds	r5, #2
 80034f8:	2a00      	cmp	r2, #0
 80034fa:	bf14      	ite	ne
 80034fc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003500:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003504:	2700      	movs	r7, #0
 8003506:	fbb1 fcf6 	udiv	ip, r1, r6
 800350a:	4638      	mov	r0, r7
 800350c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003510:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003514:	2b09      	cmp	r3, #9
 8003516:	d817      	bhi.n	8003548 <_strtol_l.isra.0+0x9a>
 8003518:	461c      	mov	r4, r3
 800351a:	42a6      	cmp	r6, r4
 800351c:	dd23      	ble.n	8003566 <_strtol_l.isra.0+0xb8>
 800351e:	1c7b      	adds	r3, r7, #1
 8003520:	d007      	beq.n	8003532 <_strtol_l.isra.0+0x84>
 8003522:	4584      	cmp	ip, r0
 8003524:	d31c      	bcc.n	8003560 <_strtol_l.isra.0+0xb2>
 8003526:	d101      	bne.n	800352c <_strtol_l.isra.0+0x7e>
 8003528:	45a6      	cmp	lr, r4
 800352a:	db19      	blt.n	8003560 <_strtol_l.isra.0+0xb2>
 800352c:	2701      	movs	r7, #1
 800352e:	fb00 4006 	mla	r0, r0, r6, r4
 8003532:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003536:	e7eb      	b.n	8003510 <_strtol_l.isra.0+0x62>
 8003538:	462f      	mov	r7, r5
 800353a:	e7bf      	b.n	80034bc <_strtol_l.isra.0+0xe>
 800353c:	2c2b      	cmp	r4, #43	; 0x2b
 800353e:	bf04      	itt	eq
 8003540:	1cbd      	addeq	r5, r7, #2
 8003542:	787c      	ldrbeq	r4, [r7, #1]
 8003544:	461a      	mov	r2, r3
 8003546:	e7c9      	b.n	80034dc <_strtol_l.isra.0+0x2e>
 8003548:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800354c:	2b19      	cmp	r3, #25
 800354e:	d801      	bhi.n	8003554 <_strtol_l.isra.0+0xa6>
 8003550:	3c37      	subs	r4, #55	; 0x37
 8003552:	e7e2      	b.n	800351a <_strtol_l.isra.0+0x6c>
 8003554:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003558:	2b19      	cmp	r3, #25
 800355a:	d804      	bhi.n	8003566 <_strtol_l.isra.0+0xb8>
 800355c:	3c57      	subs	r4, #87	; 0x57
 800355e:	e7dc      	b.n	800351a <_strtol_l.isra.0+0x6c>
 8003560:	f04f 37ff 	mov.w	r7, #4294967295
 8003564:	e7e5      	b.n	8003532 <_strtol_l.isra.0+0x84>
 8003566:	1c7b      	adds	r3, r7, #1
 8003568:	d108      	bne.n	800357c <_strtol_l.isra.0+0xce>
 800356a:	2322      	movs	r3, #34	; 0x22
 800356c:	4608      	mov	r0, r1
 800356e:	f8c8 3000 	str.w	r3, [r8]
 8003572:	f1ba 0f00 	cmp.w	sl, #0
 8003576:	d107      	bne.n	8003588 <_strtol_l.isra.0+0xda>
 8003578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357c:	b102      	cbz	r2, 8003580 <_strtol_l.isra.0+0xd2>
 800357e:	4240      	negs	r0, r0
 8003580:	f1ba 0f00 	cmp.w	sl, #0
 8003584:	d0f8      	beq.n	8003578 <_strtol_l.isra.0+0xca>
 8003586:	b10f      	cbz	r7, 800358c <_strtol_l.isra.0+0xde>
 8003588:	f105 39ff 	add.w	r9, r5, #4294967295
 800358c:	f8ca 9000 	str.w	r9, [sl]
 8003590:	e7f2      	b.n	8003578 <_strtol_l.isra.0+0xca>
 8003592:	2430      	movs	r4, #48	; 0x30
 8003594:	2e00      	cmp	r6, #0
 8003596:	d1af      	bne.n	80034f8 <_strtol_l.isra.0+0x4a>
 8003598:	2608      	movs	r6, #8
 800359a:	e7ad      	b.n	80034f8 <_strtol_l.isra.0+0x4a>
 800359c:	2c30      	cmp	r4, #48	; 0x30
 800359e:	d0a3      	beq.n	80034e8 <_strtol_l.isra.0+0x3a>
 80035a0:	260a      	movs	r6, #10
 80035a2:	e7a9      	b.n	80034f8 <_strtol_l.isra.0+0x4a>

080035a4 <strtol>:
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <strtol+0x24>)
 80035a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035a8:	681c      	ldr	r4, [r3, #0]
 80035aa:	4d08      	ldr	r5, [pc, #32]	; (80035cc <strtol+0x28>)
 80035ac:	6a23      	ldr	r3, [r4, #32]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf08      	it	eq
 80035b2:	462b      	moveq	r3, r5
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	460a      	mov	r2, r1
 80035ba:	4601      	mov	r1, r0
 80035bc:	4620      	mov	r0, r4
 80035be:	f7ff ff76 	bl	80034ae <_strtol_l.isra.0>
 80035c2:	b003      	add	sp, #12
 80035c4:	bd30      	pop	{r4, r5, pc}
 80035c6:	bf00      	nop
 80035c8:	2000000c 	.word	0x2000000c
 80035cc:	20000070 	.word	0x20000070

080035d0 <__ascii_wctomb>:
 80035d0:	b149      	cbz	r1, 80035e6 <__ascii_wctomb+0x16>
 80035d2:	2aff      	cmp	r2, #255	; 0xff
 80035d4:	bf8b      	itete	hi
 80035d6:	238a      	movhi	r3, #138	; 0x8a
 80035d8:	700a      	strbls	r2, [r1, #0]
 80035da:	6003      	strhi	r3, [r0, #0]
 80035dc:	2001      	movls	r0, #1
 80035de:	bf88      	it	hi
 80035e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80035e4:	4770      	bx	lr
 80035e6:	4608      	mov	r0, r1
 80035e8:	4770      	bx	lr

080035ea <__malloc_lock>:
 80035ea:	4770      	bx	lr

080035ec <__malloc_unlock>:
 80035ec:	4770      	bx	lr

080035ee <__ssputs_r>:
 80035ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f2:	688e      	ldr	r6, [r1, #8]
 80035f4:	4682      	mov	sl, r0
 80035f6:	429e      	cmp	r6, r3
 80035f8:	460c      	mov	r4, r1
 80035fa:	4690      	mov	r8, r2
 80035fc:	4699      	mov	r9, r3
 80035fe:	d837      	bhi.n	8003670 <__ssputs_r+0x82>
 8003600:	898a      	ldrh	r2, [r1, #12]
 8003602:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003606:	d031      	beq.n	800366c <__ssputs_r+0x7e>
 8003608:	2302      	movs	r3, #2
 800360a:	6825      	ldr	r5, [r4, #0]
 800360c:	6909      	ldr	r1, [r1, #16]
 800360e:	1a6f      	subs	r7, r5, r1
 8003610:	6965      	ldr	r5, [r4, #20]
 8003612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003616:	fb95 f5f3 	sdiv	r5, r5, r3
 800361a:	f109 0301 	add.w	r3, r9, #1
 800361e:	443b      	add	r3, r7
 8003620:	429d      	cmp	r5, r3
 8003622:	bf38      	it	cc
 8003624:	461d      	movcc	r5, r3
 8003626:	0553      	lsls	r3, r2, #21
 8003628:	d530      	bpl.n	800368c <__ssputs_r+0x9e>
 800362a:	4629      	mov	r1, r5
 800362c:	f7ff fe96 	bl	800335c <_malloc_r>
 8003630:	4606      	mov	r6, r0
 8003632:	b950      	cbnz	r0, 800364a <__ssputs_r+0x5c>
 8003634:	230c      	movs	r3, #12
 8003636:	f04f 30ff 	mov.w	r0, #4294967295
 800363a:	f8ca 3000 	str.w	r3, [sl]
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003644:	81a3      	strh	r3, [r4, #12]
 8003646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800364a:	463a      	mov	r2, r7
 800364c:	6921      	ldr	r1, [r4, #16]
 800364e:	f000 fab7 	bl	8003bc0 <memcpy>
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365c:	81a3      	strh	r3, [r4, #12]
 800365e:	6126      	str	r6, [r4, #16]
 8003660:	443e      	add	r6, r7
 8003662:	6026      	str	r6, [r4, #0]
 8003664:	464e      	mov	r6, r9
 8003666:	6165      	str	r5, [r4, #20]
 8003668:	1bed      	subs	r5, r5, r7
 800366a:	60a5      	str	r5, [r4, #8]
 800366c:	454e      	cmp	r6, r9
 800366e:	d900      	bls.n	8003672 <__ssputs_r+0x84>
 8003670:	464e      	mov	r6, r9
 8003672:	4632      	mov	r2, r6
 8003674:	4641      	mov	r1, r8
 8003676:	6820      	ldr	r0, [r4, #0]
 8003678:	f000 faad 	bl	8003bd6 <memmove>
 800367c:	68a3      	ldr	r3, [r4, #8]
 800367e:	2000      	movs	r0, #0
 8003680:	1b9b      	subs	r3, r3, r6
 8003682:	60a3      	str	r3, [r4, #8]
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	441e      	add	r6, r3
 8003688:	6026      	str	r6, [r4, #0]
 800368a:	e7dc      	b.n	8003646 <__ssputs_r+0x58>
 800368c:	462a      	mov	r2, r5
 800368e:	f000 fabb 	bl	8003c08 <_realloc_r>
 8003692:	4606      	mov	r6, r0
 8003694:	2800      	cmp	r0, #0
 8003696:	d1e2      	bne.n	800365e <__ssputs_r+0x70>
 8003698:	6921      	ldr	r1, [r4, #16]
 800369a:	4650      	mov	r0, sl
 800369c:	f7ff fe12 	bl	80032c4 <_free_r>
 80036a0:	e7c8      	b.n	8003634 <__ssputs_r+0x46>
	...

080036a4 <_svfiprintf_r>:
 80036a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a8:	461d      	mov	r5, r3
 80036aa:	898b      	ldrh	r3, [r1, #12]
 80036ac:	b09d      	sub	sp, #116	; 0x74
 80036ae:	061f      	lsls	r7, r3, #24
 80036b0:	4680      	mov	r8, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	4616      	mov	r6, r2
 80036b6:	d50f      	bpl.n	80036d8 <_svfiprintf_r+0x34>
 80036b8:	690b      	ldr	r3, [r1, #16]
 80036ba:	b96b      	cbnz	r3, 80036d8 <_svfiprintf_r+0x34>
 80036bc:	2140      	movs	r1, #64	; 0x40
 80036be:	f7ff fe4d 	bl	800335c <_malloc_r>
 80036c2:	6020      	str	r0, [r4, #0]
 80036c4:	6120      	str	r0, [r4, #16]
 80036c6:	b928      	cbnz	r0, 80036d4 <_svfiprintf_r+0x30>
 80036c8:	230c      	movs	r3, #12
 80036ca:	f8c8 3000 	str.w	r3, [r8]
 80036ce:	f04f 30ff 	mov.w	r0, #4294967295
 80036d2:	e0c8      	b.n	8003866 <_svfiprintf_r+0x1c2>
 80036d4:	2340      	movs	r3, #64	; 0x40
 80036d6:	6163      	str	r3, [r4, #20]
 80036d8:	2300      	movs	r3, #0
 80036da:	9309      	str	r3, [sp, #36]	; 0x24
 80036dc:	2320      	movs	r3, #32
 80036de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036e2:	2330      	movs	r3, #48	; 0x30
 80036e4:	f04f 0b01 	mov.w	fp, #1
 80036e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036ec:	9503      	str	r5, [sp, #12]
 80036ee:	4637      	mov	r7, r6
 80036f0:	463d      	mov	r5, r7
 80036f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80036f6:	b10b      	cbz	r3, 80036fc <_svfiprintf_r+0x58>
 80036f8:	2b25      	cmp	r3, #37	; 0x25
 80036fa:	d13e      	bne.n	800377a <_svfiprintf_r+0xd6>
 80036fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003700:	d00b      	beq.n	800371a <_svfiprintf_r+0x76>
 8003702:	4653      	mov	r3, sl
 8003704:	4632      	mov	r2, r6
 8003706:	4621      	mov	r1, r4
 8003708:	4640      	mov	r0, r8
 800370a:	f7ff ff70 	bl	80035ee <__ssputs_r>
 800370e:	3001      	adds	r0, #1
 8003710:	f000 80a4 	beq.w	800385c <_svfiprintf_r+0x1b8>
 8003714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003716:	4453      	add	r3, sl
 8003718:	9309      	str	r3, [sp, #36]	; 0x24
 800371a:	783b      	ldrb	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 809d 	beq.w	800385c <_svfiprintf_r+0x1b8>
 8003722:	2300      	movs	r3, #0
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800372c:	9304      	str	r3, [sp, #16]
 800372e:	9307      	str	r3, [sp, #28]
 8003730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003734:	931a      	str	r3, [sp, #104]	; 0x68
 8003736:	462f      	mov	r7, r5
 8003738:	2205      	movs	r2, #5
 800373a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800373e:	4850      	ldr	r0, [pc, #320]	; (8003880 <_svfiprintf_r+0x1dc>)
 8003740:	f000 fa30 	bl	8003ba4 <memchr>
 8003744:	9b04      	ldr	r3, [sp, #16]
 8003746:	b9d0      	cbnz	r0, 800377e <_svfiprintf_r+0xda>
 8003748:	06d9      	lsls	r1, r3, #27
 800374a:	bf44      	itt	mi
 800374c:	2220      	movmi	r2, #32
 800374e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003752:	071a      	lsls	r2, r3, #28
 8003754:	bf44      	itt	mi
 8003756:	222b      	movmi	r2, #43	; 0x2b
 8003758:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800375c:	782a      	ldrb	r2, [r5, #0]
 800375e:	2a2a      	cmp	r2, #42	; 0x2a
 8003760:	d015      	beq.n	800378e <_svfiprintf_r+0xea>
 8003762:	462f      	mov	r7, r5
 8003764:	2000      	movs	r0, #0
 8003766:	250a      	movs	r5, #10
 8003768:	9a07      	ldr	r2, [sp, #28]
 800376a:	4639      	mov	r1, r7
 800376c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003770:	3b30      	subs	r3, #48	; 0x30
 8003772:	2b09      	cmp	r3, #9
 8003774:	d94d      	bls.n	8003812 <_svfiprintf_r+0x16e>
 8003776:	b1b8      	cbz	r0, 80037a8 <_svfiprintf_r+0x104>
 8003778:	e00f      	b.n	800379a <_svfiprintf_r+0xf6>
 800377a:	462f      	mov	r7, r5
 800377c:	e7b8      	b.n	80036f0 <_svfiprintf_r+0x4c>
 800377e:	4a40      	ldr	r2, [pc, #256]	; (8003880 <_svfiprintf_r+0x1dc>)
 8003780:	463d      	mov	r5, r7
 8003782:	1a80      	subs	r0, r0, r2
 8003784:	fa0b f000 	lsl.w	r0, fp, r0
 8003788:	4318      	orrs	r0, r3
 800378a:	9004      	str	r0, [sp, #16]
 800378c:	e7d3      	b.n	8003736 <_svfiprintf_r+0x92>
 800378e:	9a03      	ldr	r2, [sp, #12]
 8003790:	1d11      	adds	r1, r2, #4
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	9103      	str	r1, [sp, #12]
 8003796:	2a00      	cmp	r2, #0
 8003798:	db01      	blt.n	800379e <_svfiprintf_r+0xfa>
 800379a:	9207      	str	r2, [sp, #28]
 800379c:	e004      	b.n	80037a8 <_svfiprintf_r+0x104>
 800379e:	4252      	negs	r2, r2
 80037a0:	f043 0302 	orr.w	r3, r3, #2
 80037a4:	9207      	str	r2, [sp, #28]
 80037a6:	9304      	str	r3, [sp, #16]
 80037a8:	783b      	ldrb	r3, [r7, #0]
 80037aa:	2b2e      	cmp	r3, #46	; 0x2e
 80037ac:	d10c      	bne.n	80037c8 <_svfiprintf_r+0x124>
 80037ae:	787b      	ldrb	r3, [r7, #1]
 80037b0:	2b2a      	cmp	r3, #42	; 0x2a
 80037b2:	d133      	bne.n	800381c <_svfiprintf_r+0x178>
 80037b4:	9b03      	ldr	r3, [sp, #12]
 80037b6:	3702      	adds	r7, #2
 80037b8:	1d1a      	adds	r2, r3, #4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	9203      	str	r2, [sp, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bfb8      	it	lt
 80037c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80037c6:	9305      	str	r3, [sp, #20]
 80037c8:	4d2e      	ldr	r5, [pc, #184]	; (8003884 <_svfiprintf_r+0x1e0>)
 80037ca:	2203      	movs	r2, #3
 80037cc:	7839      	ldrb	r1, [r7, #0]
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 f9e8 	bl	8003ba4 <memchr>
 80037d4:	b138      	cbz	r0, 80037e6 <_svfiprintf_r+0x142>
 80037d6:	2340      	movs	r3, #64	; 0x40
 80037d8:	1b40      	subs	r0, r0, r5
 80037da:	fa03 f000 	lsl.w	r0, r3, r0
 80037de:	9b04      	ldr	r3, [sp, #16]
 80037e0:	3701      	adds	r7, #1
 80037e2:	4303      	orrs	r3, r0
 80037e4:	9304      	str	r3, [sp, #16]
 80037e6:	7839      	ldrb	r1, [r7, #0]
 80037e8:	2206      	movs	r2, #6
 80037ea:	4827      	ldr	r0, [pc, #156]	; (8003888 <_svfiprintf_r+0x1e4>)
 80037ec:	1c7e      	adds	r6, r7, #1
 80037ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037f2:	f000 f9d7 	bl	8003ba4 <memchr>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d038      	beq.n	800386c <_svfiprintf_r+0x1c8>
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <_svfiprintf_r+0x1e8>)
 80037fc:	bb13      	cbnz	r3, 8003844 <_svfiprintf_r+0x1a0>
 80037fe:	9b03      	ldr	r3, [sp, #12]
 8003800:	3307      	adds	r3, #7
 8003802:	f023 0307 	bic.w	r3, r3, #7
 8003806:	3308      	adds	r3, #8
 8003808:	9303      	str	r3, [sp, #12]
 800380a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800380c:	444b      	add	r3, r9
 800380e:	9309      	str	r3, [sp, #36]	; 0x24
 8003810:	e76d      	b.n	80036ee <_svfiprintf_r+0x4a>
 8003812:	fb05 3202 	mla	r2, r5, r2, r3
 8003816:	2001      	movs	r0, #1
 8003818:	460f      	mov	r7, r1
 800381a:	e7a6      	b.n	800376a <_svfiprintf_r+0xc6>
 800381c:	2300      	movs	r3, #0
 800381e:	250a      	movs	r5, #10
 8003820:	4619      	mov	r1, r3
 8003822:	3701      	adds	r7, #1
 8003824:	9305      	str	r3, [sp, #20]
 8003826:	4638      	mov	r0, r7
 8003828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800382c:	3a30      	subs	r2, #48	; 0x30
 800382e:	2a09      	cmp	r2, #9
 8003830:	d903      	bls.n	800383a <_svfiprintf_r+0x196>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0c8      	beq.n	80037c8 <_svfiprintf_r+0x124>
 8003836:	9105      	str	r1, [sp, #20]
 8003838:	e7c6      	b.n	80037c8 <_svfiprintf_r+0x124>
 800383a:	fb05 2101 	mla	r1, r5, r1, r2
 800383e:	2301      	movs	r3, #1
 8003840:	4607      	mov	r7, r0
 8003842:	e7f0      	b.n	8003826 <_svfiprintf_r+0x182>
 8003844:	ab03      	add	r3, sp, #12
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	4622      	mov	r2, r4
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <_svfiprintf_r+0x1ec>)
 800384c:	a904      	add	r1, sp, #16
 800384e:	4640      	mov	r0, r8
 8003850:	f3af 8000 	nop.w
 8003854:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003858:	4681      	mov	r9, r0
 800385a:	d1d6      	bne.n	800380a <_svfiprintf_r+0x166>
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	065b      	lsls	r3, r3, #25
 8003860:	f53f af35 	bmi.w	80036ce <_svfiprintf_r+0x2a>
 8003864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003866:	b01d      	add	sp, #116	; 0x74
 8003868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800386c:	ab03      	add	r3, sp, #12
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	4622      	mov	r2, r4
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <_svfiprintf_r+0x1ec>)
 8003874:	a904      	add	r1, sp, #16
 8003876:	4640      	mov	r0, r8
 8003878:	f000 f882 	bl	8003980 <_printf_i>
 800387c:	e7ea      	b.n	8003854 <_svfiprintf_r+0x1b0>
 800387e:	bf00      	nop
 8003880:	08003e1b 	.word	0x08003e1b
 8003884:	08003e21 	.word	0x08003e21
 8003888:	08003e25 	.word	0x08003e25
 800388c:	00000000 	.word	0x00000000
 8003890:	080035ef 	.word	0x080035ef

08003894 <_printf_common>:
 8003894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	4691      	mov	r9, r2
 800389a:	461f      	mov	r7, r3
 800389c:	688a      	ldr	r2, [r1, #8]
 800389e:	690b      	ldr	r3, [r1, #16]
 80038a0:	4606      	mov	r6, r0
 80038a2:	4293      	cmp	r3, r2
 80038a4:	bfb8      	it	lt
 80038a6:	4613      	movlt	r3, r2
 80038a8:	f8c9 3000 	str.w	r3, [r9]
 80038ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b0:	460c      	mov	r4, r1
 80038b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038b6:	b112      	cbz	r2, 80038be <_printf_common+0x2a>
 80038b8:	3301      	adds	r3, #1
 80038ba:	f8c9 3000 	str.w	r3, [r9]
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	0699      	lsls	r1, r3, #26
 80038c2:	bf42      	ittt	mi
 80038c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038c8:	3302      	addmi	r3, #2
 80038ca:	f8c9 3000 	strmi.w	r3, [r9]
 80038ce:	6825      	ldr	r5, [r4, #0]
 80038d0:	f015 0506 	ands.w	r5, r5, #6
 80038d4:	d107      	bne.n	80038e6 <_printf_common+0x52>
 80038d6:	f104 0a19 	add.w	sl, r4, #25
 80038da:	68e3      	ldr	r3, [r4, #12]
 80038dc:	f8d9 2000 	ldr.w	r2, [r9]
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	42ab      	cmp	r3, r5
 80038e4:	dc29      	bgt.n	800393a <_printf_common+0xa6>
 80038e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	3300      	adds	r3, #0
 80038ee:	bf18      	it	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	0692      	lsls	r2, r2, #26
 80038f4:	d42e      	bmi.n	8003954 <_printf_common+0xc0>
 80038f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038fa:	4639      	mov	r1, r7
 80038fc:	4630      	mov	r0, r6
 80038fe:	47c0      	blx	r8
 8003900:	3001      	adds	r0, #1
 8003902:	d021      	beq.n	8003948 <_printf_common+0xb4>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	68e5      	ldr	r5, [r4, #12]
 8003908:	f003 0306 	and.w	r3, r3, #6
 800390c:	2b04      	cmp	r3, #4
 800390e:	bf18      	it	ne
 8003910:	2500      	movne	r5, #0
 8003912:	f8d9 2000 	ldr.w	r2, [r9]
 8003916:	f04f 0900 	mov.w	r9, #0
 800391a:	bf08      	it	eq
 800391c:	1aad      	subeq	r5, r5, r2
 800391e:	68a3      	ldr	r3, [r4, #8]
 8003920:	6922      	ldr	r2, [r4, #16]
 8003922:	bf08      	it	eq
 8003924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003928:	4293      	cmp	r3, r2
 800392a:	bfc4      	itt	gt
 800392c:	1a9b      	subgt	r3, r3, r2
 800392e:	18ed      	addgt	r5, r5, r3
 8003930:	341a      	adds	r4, #26
 8003932:	454d      	cmp	r5, r9
 8003934:	d11a      	bne.n	800396c <_printf_common+0xd8>
 8003936:	2000      	movs	r0, #0
 8003938:	e008      	b.n	800394c <_printf_common+0xb8>
 800393a:	2301      	movs	r3, #1
 800393c:	4652      	mov	r2, sl
 800393e:	4639      	mov	r1, r7
 8003940:	4630      	mov	r0, r6
 8003942:	47c0      	blx	r8
 8003944:	3001      	adds	r0, #1
 8003946:	d103      	bne.n	8003950 <_printf_common+0xbc>
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003950:	3501      	adds	r5, #1
 8003952:	e7c2      	b.n	80038da <_printf_common+0x46>
 8003954:	2030      	movs	r0, #48	; 0x30
 8003956:	18e1      	adds	r1, r4, r3
 8003958:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003962:	4422      	add	r2, r4
 8003964:	3302      	adds	r3, #2
 8003966:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800396a:	e7c4      	b.n	80038f6 <_printf_common+0x62>
 800396c:	2301      	movs	r3, #1
 800396e:	4622      	mov	r2, r4
 8003970:	4639      	mov	r1, r7
 8003972:	4630      	mov	r0, r6
 8003974:	47c0      	blx	r8
 8003976:	3001      	adds	r0, #1
 8003978:	d0e6      	beq.n	8003948 <_printf_common+0xb4>
 800397a:	f109 0901 	add.w	r9, r9, #1
 800397e:	e7d8      	b.n	8003932 <_printf_common+0x9e>

08003980 <_printf_i>:
 8003980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003984:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003988:	460c      	mov	r4, r1
 800398a:	7e09      	ldrb	r1, [r1, #24]
 800398c:	b085      	sub	sp, #20
 800398e:	296e      	cmp	r1, #110	; 0x6e
 8003990:	4617      	mov	r7, r2
 8003992:	4606      	mov	r6, r0
 8003994:	4698      	mov	r8, r3
 8003996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003998:	f000 80b3 	beq.w	8003b02 <_printf_i+0x182>
 800399c:	d822      	bhi.n	80039e4 <_printf_i+0x64>
 800399e:	2963      	cmp	r1, #99	; 0x63
 80039a0:	d036      	beq.n	8003a10 <_printf_i+0x90>
 80039a2:	d80a      	bhi.n	80039ba <_printf_i+0x3a>
 80039a4:	2900      	cmp	r1, #0
 80039a6:	f000 80b9 	beq.w	8003b1c <_printf_i+0x19c>
 80039aa:	2958      	cmp	r1, #88	; 0x58
 80039ac:	f000 8083 	beq.w	8003ab6 <_printf_i+0x136>
 80039b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80039b8:	e032      	b.n	8003a20 <_printf_i+0xa0>
 80039ba:	2964      	cmp	r1, #100	; 0x64
 80039bc:	d001      	beq.n	80039c2 <_printf_i+0x42>
 80039be:	2969      	cmp	r1, #105	; 0x69
 80039c0:	d1f6      	bne.n	80039b0 <_printf_i+0x30>
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	6813      	ldr	r3, [r2, #0]
 80039c6:	0605      	lsls	r5, r0, #24
 80039c8:	f103 0104 	add.w	r1, r3, #4
 80039cc:	d52a      	bpl.n	8003a24 <_printf_i+0xa4>
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6011      	str	r1, [r2, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da03      	bge.n	80039de <_printf_i+0x5e>
 80039d6:	222d      	movs	r2, #45	; 0x2d
 80039d8:	425b      	negs	r3, r3
 80039da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80039de:	486f      	ldr	r0, [pc, #444]	; (8003b9c <_printf_i+0x21c>)
 80039e0:	220a      	movs	r2, #10
 80039e2:	e039      	b.n	8003a58 <_printf_i+0xd8>
 80039e4:	2973      	cmp	r1, #115	; 0x73
 80039e6:	f000 809d 	beq.w	8003b24 <_printf_i+0x1a4>
 80039ea:	d808      	bhi.n	80039fe <_printf_i+0x7e>
 80039ec:	296f      	cmp	r1, #111	; 0x6f
 80039ee:	d020      	beq.n	8003a32 <_printf_i+0xb2>
 80039f0:	2970      	cmp	r1, #112	; 0x70
 80039f2:	d1dd      	bne.n	80039b0 <_printf_i+0x30>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	f043 0320 	orr.w	r3, r3, #32
 80039fa:	6023      	str	r3, [r4, #0]
 80039fc:	e003      	b.n	8003a06 <_printf_i+0x86>
 80039fe:	2975      	cmp	r1, #117	; 0x75
 8003a00:	d017      	beq.n	8003a32 <_printf_i+0xb2>
 8003a02:	2978      	cmp	r1, #120	; 0x78
 8003a04:	d1d4      	bne.n	80039b0 <_printf_i+0x30>
 8003a06:	2378      	movs	r3, #120	; 0x78
 8003a08:	4865      	ldr	r0, [pc, #404]	; (8003ba0 <_printf_i+0x220>)
 8003a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a0e:	e055      	b.n	8003abc <_printf_i+0x13c>
 8003a10:	6813      	ldr	r3, [r2, #0]
 8003a12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a16:	1d19      	adds	r1, r3, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6011      	str	r1, [r2, #0]
 8003a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a20:	2301      	movs	r3, #1
 8003a22:	e08c      	b.n	8003b3e <_printf_i+0x1be>
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a2a:	6011      	str	r1, [r2, #0]
 8003a2c:	bf18      	it	ne
 8003a2e:	b21b      	sxthne	r3, r3
 8003a30:	e7cf      	b.n	80039d2 <_printf_i+0x52>
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	6825      	ldr	r5, [r4, #0]
 8003a36:	1d18      	adds	r0, r3, #4
 8003a38:	6010      	str	r0, [r2, #0]
 8003a3a:	0628      	lsls	r0, r5, #24
 8003a3c:	d501      	bpl.n	8003a42 <_printf_i+0xc2>
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	e002      	b.n	8003a48 <_printf_i+0xc8>
 8003a42:	0668      	lsls	r0, r5, #25
 8003a44:	d5fb      	bpl.n	8003a3e <_printf_i+0xbe>
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	296f      	cmp	r1, #111	; 0x6f
 8003a4a:	bf14      	ite	ne
 8003a4c:	220a      	movne	r2, #10
 8003a4e:	2208      	moveq	r2, #8
 8003a50:	4852      	ldr	r0, [pc, #328]	; (8003b9c <_printf_i+0x21c>)
 8003a52:	2100      	movs	r1, #0
 8003a54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a58:	6865      	ldr	r5, [r4, #4]
 8003a5a:	2d00      	cmp	r5, #0
 8003a5c:	60a5      	str	r5, [r4, #8]
 8003a5e:	f2c0 8095 	blt.w	8003b8c <_printf_i+0x20c>
 8003a62:	6821      	ldr	r1, [r4, #0]
 8003a64:	f021 0104 	bic.w	r1, r1, #4
 8003a68:	6021      	str	r1, [r4, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d13d      	bne.n	8003aea <_printf_i+0x16a>
 8003a6e:	2d00      	cmp	r5, #0
 8003a70:	f040 808e 	bne.w	8003b90 <_printf_i+0x210>
 8003a74:	4665      	mov	r5, ip
 8003a76:	2a08      	cmp	r2, #8
 8003a78:	d10b      	bne.n	8003a92 <_printf_i+0x112>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	07db      	lsls	r3, r3, #31
 8003a7e:	d508      	bpl.n	8003a92 <_printf_i+0x112>
 8003a80:	6923      	ldr	r3, [r4, #16]
 8003a82:	6862      	ldr	r2, [r4, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	bfde      	ittt	le
 8003a88:	2330      	movle	r3, #48	; 0x30
 8003a8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a92:	ebac 0305 	sub.w	r3, ip, r5
 8003a96:	6123      	str	r3, [r4, #16]
 8003a98:	f8cd 8000 	str.w	r8, [sp]
 8003a9c:	463b      	mov	r3, r7
 8003a9e:	aa03      	add	r2, sp, #12
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f7ff fef6 	bl	8003894 <_printf_common>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d14d      	bne.n	8003b48 <_printf_i+0x1c8>
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	b005      	add	sp, #20
 8003ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ab6:	4839      	ldr	r0, [pc, #228]	; (8003b9c <_printf_i+0x21c>)
 8003ab8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003abc:	6813      	ldr	r3, [r2, #0]
 8003abe:	6821      	ldr	r1, [r4, #0]
 8003ac0:	1d1d      	adds	r5, r3, #4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6015      	str	r5, [r2, #0]
 8003ac6:	060a      	lsls	r2, r1, #24
 8003ac8:	d50b      	bpl.n	8003ae2 <_printf_i+0x162>
 8003aca:	07ca      	lsls	r2, r1, #31
 8003acc:	bf44      	itt	mi
 8003ace:	f041 0120 	orrmi.w	r1, r1, #32
 8003ad2:	6021      	strmi	r1, [r4, #0]
 8003ad4:	b91b      	cbnz	r3, 8003ade <_printf_i+0x15e>
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	f022 0220 	bic.w	r2, r2, #32
 8003adc:	6022      	str	r2, [r4, #0]
 8003ade:	2210      	movs	r2, #16
 8003ae0:	e7b7      	b.n	8003a52 <_printf_i+0xd2>
 8003ae2:	064d      	lsls	r5, r1, #25
 8003ae4:	bf48      	it	mi
 8003ae6:	b29b      	uxthmi	r3, r3
 8003ae8:	e7ef      	b.n	8003aca <_printf_i+0x14a>
 8003aea:	4665      	mov	r5, ip
 8003aec:	fbb3 f1f2 	udiv	r1, r3, r2
 8003af0:	fb02 3311 	mls	r3, r2, r1, r3
 8003af4:	5cc3      	ldrb	r3, [r0, r3]
 8003af6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003afa:	460b      	mov	r3, r1
 8003afc:	2900      	cmp	r1, #0
 8003afe:	d1f5      	bne.n	8003aec <_printf_i+0x16c>
 8003b00:	e7b9      	b.n	8003a76 <_printf_i+0xf6>
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	6825      	ldr	r5, [r4, #0]
 8003b06:	1d18      	adds	r0, r3, #4
 8003b08:	6961      	ldr	r1, [r4, #20]
 8003b0a:	6010      	str	r0, [r2, #0]
 8003b0c:	0628      	lsls	r0, r5, #24
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	d501      	bpl.n	8003b16 <_printf_i+0x196>
 8003b12:	6019      	str	r1, [r3, #0]
 8003b14:	e002      	b.n	8003b1c <_printf_i+0x19c>
 8003b16:	066a      	lsls	r2, r5, #25
 8003b18:	d5fb      	bpl.n	8003b12 <_printf_i+0x192>
 8003b1a:	8019      	strh	r1, [r3, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4665      	mov	r5, ip
 8003b20:	6123      	str	r3, [r4, #16]
 8003b22:	e7b9      	b.n	8003a98 <_printf_i+0x118>
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	1d19      	adds	r1, r3, #4
 8003b28:	6011      	str	r1, [r2, #0]
 8003b2a:	681d      	ldr	r5, [r3, #0]
 8003b2c:	6862      	ldr	r2, [r4, #4]
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4628      	mov	r0, r5
 8003b32:	f000 f837 	bl	8003ba4 <memchr>
 8003b36:	b108      	cbz	r0, 8003b3c <_printf_i+0x1bc>
 8003b38:	1b40      	subs	r0, r0, r5
 8003b3a:	6060      	str	r0, [r4, #4]
 8003b3c:	6863      	ldr	r3, [r4, #4]
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	2300      	movs	r3, #0
 8003b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b46:	e7a7      	b.n	8003a98 <_printf_i+0x118>
 8003b48:	6923      	ldr	r3, [r4, #16]
 8003b4a:	462a      	mov	r2, r5
 8003b4c:	4639      	mov	r1, r7
 8003b4e:	4630      	mov	r0, r6
 8003b50:	47c0      	blx	r8
 8003b52:	3001      	adds	r0, #1
 8003b54:	d0aa      	beq.n	8003aac <_printf_i+0x12c>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	079b      	lsls	r3, r3, #30
 8003b5a:	d413      	bmi.n	8003b84 <_printf_i+0x204>
 8003b5c:	68e0      	ldr	r0, [r4, #12]
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	4298      	cmp	r0, r3
 8003b62:	bfb8      	it	lt
 8003b64:	4618      	movlt	r0, r3
 8003b66:	e7a3      	b.n	8003ab0 <_printf_i+0x130>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	464a      	mov	r2, r9
 8003b6c:	4639      	mov	r1, r7
 8003b6e:	4630      	mov	r0, r6
 8003b70:	47c0      	blx	r8
 8003b72:	3001      	adds	r0, #1
 8003b74:	d09a      	beq.n	8003aac <_printf_i+0x12c>
 8003b76:	3501      	adds	r5, #1
 8003b78:	68e3      	ldr	r3, [r4, #12]
 8003b7a:	9a03      	ldr	r2, [sp, #12]
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	42ab      	cmp	r3, r5
 8003b80:	dcf2      	bgt.n	8003b68 <_printf_i+0x1e8>
 8003b82:	e7eb      	b.n	8003b5c <_printf_i+0x1dc>
 8003b84:	2500      	movs	r5, #0
 8003b86:	f104 0919 	add.w	r9, r4, #25
 8003b8a:	e7f5      	b.n	8003b78 <_printf_i+0x1f8>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ac      	bne.n	8003aea <_printf_i+0x16a>
 8003b90:	7803      	ldrb	r3, [r0, #0]
 8003b92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b9a:	e76c      	b.n	8003a76 <_printf_i+0xf6>
 8003b9c:	08003e2c 	.word	0x08003e2c
 8003ba0:	08003e3d 	.word	0x08003e3d

08003ba4 <memchr>:
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	b2c9      	uxtb	r1, r1
 8003ba8:	4402      	add	r2, r0
 8003baa:	4290      	cmp	r0, r2
 8003bac:	4603      	mov	r3, r0
 8003bae:	d101      	bne.n	8003bb4 <memchr+0x10>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e003      	b.n	8003bbc <memchr+0x18>
 8003bb4:	781c      	ldrb	r4, [r3, #0]
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	428c      	cmp	r4, r1
 8003bba:	d1f6      	bne.n	8003baa <memchr+0x6>
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd10      	pop	{r4, pc}

08003bc0 <memcpy>:
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	1e43      	subs	r3, r0, #1
 8003bc4:	440a      	add	r2, r1
 8003bc6:	4291      	cmp	r1, r2
 8003bc8:	d100      	bne.n	8003bcc <memcpy+0xc>
 8003bca:	bd10      	pop	{r4, pc}
 8003bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bd4:	e7f7      	b.n	8003bc6 <memcpy+0x6>

08003bd6 <memmove>:
 8003bd6:	4288      	cmp	r0, r1
 8003bd8:	b510      	push	{r4, lr}
 8003bda:	eb01 0302 	add.w	r3, r1, r2
 8003bde:	d807      	bhi.n	8003bf0 <memmove+0x1a>
 8003be0:	1e42      	subs	r2, r0, #1
 8003be2:	4299      	cmp	r1, r3
 8003be4:	d00a      	beq.n	8003bfc <memmove+0x26>
 8003be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003bee:	e7f8      	b.n	8003be2 <memmove+0xc>
 8003bf0:	4283      	cmp	r3, r0
 8003bf2:	d9f5      	bls.n	8003be0 <memmove+0xa>
 8003bf4:	1881      	adds	r1, r0, r2
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	42d3      	cmn	r3, r2
 8003bfa:	d100      	bne.n	8003bfe <memmove+0x28>
 8003bfc:	bd10      	pop	{r4, pc}
 8003bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c06:	e7f7      	b.n	8003bf8 <memmove+0x22>

08003c08 <_realloc_r>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	4607      	mov	r7, r0
 8003c0c:	4614      	mov	r4, r2
 8003c0e:	460e      	mov	r6, r1
 8003c10:	b921      	cbnz	r1, 8003c1c <_realloc_r+0x14>
 8003c12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c16:	4611      	mov	r1, r2
 8003c18:	f7ff bba0 	b.w	800335c <_malloc_r>
 8003c1c:	b922      	cbnz	r2, 8003c28 <_realloc_r+0x20>
 8003c1e:	f7ff fb51 	bl	80032c4 <_free_r>
 8003c22:	4625      	mov	r5, r4
 8003c24:	4628      	mov	r0, r5
 8003c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c28:	f000 f814 	bl	8003c54 <_malloc_usable_size_r>
 8003c2c:	42a0      	cmp	r0, r4
 8003c2e:	d20f      	bcs.n	8003c50 <_realloc_r+0x48>
 8003c30:	4621      	mov	r1, r4
 8003c32:	4638      	mov	r0, r7
 8003c34:	f7ff fb92 	bl	800335c <_malloc_r>
 8003c38:	4605      	mov	r5, r0
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d0f2      	beq.n	8003c24 <_realloc_r+0x1c>
 8003c3e:	4631      	mov	r1, r6
 8003c40:	4622      	mov	r2, r4
 8003c42:	f7ff ffbd 	bl	8003bc0 <memcpy>
 8003c46:	4631      	mov	r1, r6
 8003c48:	4638      	mov	r0, r7
 8003c4a:	f7ff fb3b 	bl	80032c4 <_free_r>
 8003c4e:	e7e9      	b.n	8003c24 <_realloc_r+0x1c>
 8003c50:	4635      	mov	r5, r6
 8003c52:	e7e7      	b.n	8003c24 <_realloc_r+0x1c>

08003c54 <_malloc_usable_size_r>:
 8003c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c58:	1f18      	subs	r0, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfbc      	itt	lt
 8003c5e:	580b      	ldrlt	r3, [r1, r0]
 8003c60:	18c0      	addlt	r0, r0, r3
 8003c62:	4770      	bx	lr

08003c64 <_init>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr

08003c70 <_fini>:
 8003c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c72:	bf00      	nop
 8003c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c76:	bc08      	pop	{r3}
 8003c78:	469e      	mov	lr, r3
 8003c7a:	4770      	bx	lr
