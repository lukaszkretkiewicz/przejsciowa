
praca_przejsciowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080033cc  080033cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a0  080035a0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080035a0  080035a0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a0  080035a0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080035a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001e0  08003784  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08003784  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008518  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a76  00000000  00000000  0002871d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000730  00000000  00000000  0002a198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  0002a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b2b  00000000  00000000  0002af00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d1b  00000000  00000000  00042a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082dd2  00000000  00000000  0004a746  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002004  00000000  00000000  000cd594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080033b4 	.word	0x080033b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	080033b4 	.word	0x080033b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <MX_DMA_Init+0x48>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <MX_DMA_Init+0x48>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6153      	str	r3, [r2, #20]
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <MX_DMA_Init+0x48>)
 8000170:	695b      	ldr	r3, [r3, #20]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	2010      	movs	r0, #16
 8000180:	f000 fbe3 	bl	800094a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000184:	2010      	movs	r0, #16
 8000186:	f000 fbfc 	bl	8000982 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800018a:	2200      	movs	r2, #0
 800018c:	2100      	movs	r1, #0
 800018e:	2011      	movs	r0, #17
 8000190:	f000 fbdb 	bl	800094a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000194:	2011      	movs	r0, #17
 8000196:	f000 fbf4 	bl	8000982 <HAL_NVIC_EnableIRQ>

}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b088      	sub	sp, #32
 80001ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	f107 0310 	add.w	r3, r7, #16
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001bc:	4b2d      	ldr	r3, [pc, #180]	; (8000274 <MX_GPIO_Init+0xcc>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a2c      	ldr	r2, [pc, #176]	; (8000274 <MX_GPIO_Init+0xcc>)
 80001c2:	f043 0310 	orr.w	r3, r3, #16
 80001c6:	6193      	str	r3, [r2, #24]
 80001c8:	4b2a      	ldr	r3, [pc, #168]	; (8000274 <MX_GPIO_Init+0xcc>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	f003 0310 	and.w	r3, r3, #16
 80001d0:	60fb      	str	r3, [r7, #12]
 80001d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001d4:	4b27      	ldr	r3, [pc, #156]	; (8000274 <MX_GPIO_Init+0xcc>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a26      	ldr	r2, [pc, #152]	; (8000274 <MX_GPIO_Init+0xcc>)
 80001da:	f043 0320 	orr.w	r3, r3, #32
 80001de:	6193      	str	r3, [r2, #24]
 80001e0:	4b24      	ldr	r3, [pc, #144]	; (8000274 <MX_GPIO_Init+0xcc>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	f003 0320 	and.w	r3, r3, #32
 80001e8:	60bb      	str	r3, [r7, #8]
 80001ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ec:	4b21      	ldr	r3, [pc, #132]	; (8000274 <MX_GPIO_Init+0xcc>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a20      	ldr	r2, [pc, #128]	; (8000274 <MX_GPIO_Init+0xcc>)
 80001f2:	f043 0304 	orr.w	r3, r3, #4
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b1e      	ldr	r3, [pc, #120]	; (8000274 <MX_GPIO_Init+0xcc>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f003 0304 	and.w	r3, r3, #4
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000204:	4b1b      	ldr	r3, [pc, #108]	; (8000274 <MX_GPIO_Init+0xcc>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <MX_GPIO_Init+0xcc>)
 800020a:	f043 0308 	orr.w	r3, r3, #8
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b18      	ldr	r3, [pc, #96]	; (8000274 <MX_GPIO_Init+0xcc>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0308 	and.w	r3, r3, #8
 8000218:	603b      	str	r3, [r7, #0]
 800021a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2120      	movs	r1, #32
 8000220:	4815      	ldr	r0, [pc, #84]	; (8000278 <MX_GPIO_Init+0xd0>)
 8000222:	f000 ff87 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800022a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800022c:	4b13      	ldr	r3, [pc, #76]	; (800027c <MX_GPIO_Init+0xd4>)
 800022e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	4811      	ldr	r0, [pc, #68]	; (8000280 <MX_GPIO_Init+0xd8>)
 800023c:	f000 fe20 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000240:	2320      	movs	r3, #32
 8000242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	2301      	movs	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	2302      	movs	r3, #2
 800024e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000250:	f107 0310 	add.w	r3, r7, #16
 8000254:	4619      	mov	r1, r3
 8000256:	4808      	ldr	r0, [pc, #32]	; (8000278 <MX_GPIO_Init+0xd0>)
 8000258:	f000 fe12 	bl	8000e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800025c:	2200      	movs	r2, #0
 800025e:	2100      	movs	r1, #0
 8000260:	2028      	movs	r0, #40	; 0x28
 8000262:	f000 fb72 	bl	800094a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000266:	2028      	movs	r0, #40	; 0x28
 8000268:	f000 fb8b 	bl	8000982 <HAL_NVIC_EnableIRQ>

}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40021000 	.word	0x40021000
 8000278:	40010800 	.word	0x40010800
 800027c:	10110000 	.word	0x10110000
 8000280:	40011000 	.word	0x40011000

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 fa26 	bl	80006d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f810 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f7ff ff8a 	bl	80001a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000294:	f7ff ff62 	bl	800015c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000298:	f000 f934 	bl	8000504 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 800029c:	221c      	movs	r2, #28
 800029e:	4902      	ldr	r1, [pc, #8]	; (80002a8 <main+0x24>)
 80002a0:	4802      	ldr	r0, [pc, #8]	; (80002ac <main+0x28>)
 80002a2:	f001 fc71 	bl	8001b88 <HAL_UART_Receive_DMA>
	//initOneWayList();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80002a6:	e7fe      	b.n	80002a6 <main+0x22>
 80002a8:	2000021c 	.word	0x2000021c
 80002ac:	20000324 	.word	0x20000324

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fba0 	bl	8002a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	2310      	movs	r3, #16
 80002dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002e2:	2300      	movs	r3, #0
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 ff73 	bl	80011dc <HAL_RCC_OscConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002fc:	f000 f83e 	bl	800037c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	230f      	movs	r3, #15
 8000302:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2302      	movs	r3, #2
 8000306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000310:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2102      	movs	r1, #2
 800031a:	4618      	mov	r0, r3
 800031c:	f001 f9de 	bl	80016dc <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000326:	f000 f829 	bl	800037c <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3740      	adds	r7, #64	; 0x40
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a09      	ldr	r2, [pc, #36]	; (8000368 <HAL_UART_RxCpltCallback+0x34>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d10c      	bne.n	8000360 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 8000346:	221c      	movs	r2, #28
 8000348:	4908      	ldr	r1, [pc, #32]	; (800036c <HAL_UART_RxCpltCallback+0x38>)
 800034a:	4809      	ldr	r0, [pc, #36]	; (8000370 <HAL_UART_RxCpltCallback+0x3c>)
 800034c:	f001 fc1c 	bl	8001b88 <HAL_UART_Receive_DMA>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000350:	2120      	movs	r1, #32
 8000352:	4808      	ldr	r0, [pc, #32]	; (8000374 <HAL_UART_RxCpltCallback+0x40>)
 8000354:	f000 ff06 	bl	8001164 <HAL_GPIO_TogglePin>
		convertToStucture(odebranaWiadomosc, &head);
 8000358:	4907      	ldr	r1, [pc, #28]	; (8000378 <HAL_UART_RxCpltCallback+0x44>)
 800035a:	4804      	ldr	r0, [pc, #16]	; (800036c <HAL_UART_RxCpltCallback+0x38>)
 800035c:	f002 f836 	bl	80023cc <convertToStucture>

	}
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40004400 	.word	0x40004400
 800036c:	2000021c 	.word	0x2000021c
 8000370:	20000324 	.word	0x20000324
 8000374:	40010800 	.word	0x40010800
 8000378:	20000214 	.word	0x20000214

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <HAL_MspInit+0x5c>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <HAL_MspInit+0x5c>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <HAL_MspInit+0x5c>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <HAL_MspInit+0x5c>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <HAL_MspInit+0x5c>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <HAL_MspInit+0x5c>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <HAL_MspInit+0x60>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <HAL_MspInit+0x60>)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010000 	.word	0x40010000

080003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <HardFault_Handler+0x4>

080003fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000402:	e7fe      	b.n	8000402 <MemManage_Handler+0x4>

08000404 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <BusFault_Handler+0x4>

0800040a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040e:	e7fe      	b.n	800040e <UsageFault_Handler+0x4>

08000410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000438:	f000 f994 	bl	8000764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}

08000440 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <DMA1_Channel6_IRQHandler+0x10>)
 8000446:	f000 fbe7 	bl	8000c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2000029c 	.word	0x2000029c

08000454 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <DMA1_Channel7_IRQHandler+0x10>)
 800045a:	f000 fbdd 	bl	8000c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200002e0 	.word	0x200002e0

08000468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <USART2_IRQHandler+0x10>)
 800046e:	f001 fc0b 	bl	8001c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000324 	.word	0x20000324

0800047c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000480:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000484:	f000 fe88 	bl	8001198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}

0800048c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000494:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <_sbrk+0x5c>)
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <_sbrk+0x60>)
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a0:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <_sbrk+0x64>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d102      	bne.n	80004ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <_sbrk+0x64>)
 80004aa:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <_sbrk+0x68>)
 80004ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <_sbrk+0x64>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4413      	add	r3, r2
 80004b6:	693a      	ldr	r2, [r7, #16]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d207      	bcs.n	80004cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004bc:	f002 fa44 	bl	8002948 <__errno>
 80004c0:	4602      	mov	r2, r0
 80004c2:	230c      	movs	r3, #12
 80004c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80004c6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ca:	e009      	b.n	80004e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <_sbrk+0x64>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <_sbrk+0x64>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <_sbrk+0x64>)
 80004dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3718      	adds	r7, #24
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20005000 	.word	0x20005000
 80004ec:	00000400 	.word	0x00000400
 80004f0:	200001fc 	.word	0x200001fc
 80004f4:	20000370 	.word	0x20000370

080004f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <MX_USART2_UART_Init+0x50>)
 800050c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 800052a:	220c      	movs	r2, #12
 800052c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 800053c:	f001 fa6a 	bl	8001a14 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000546:	f7ff ff19 	bl	800037c <Error_Handler>
  }

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000324 	.word	0x20000324
 8000554:	40004400 	.word	0x40004400

08000558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a3f      	ldr	r2, [pc, #252]	; (8000670 <HAL_UART_MspInit+0x118>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d177      	bne.n	8000668 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000578:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <HAL_UART_MspInit+0x11c>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	4a3d      	ldr	r2, [pc, #244]	; (8000674 <HAL_UART_MspInit+0x11c>)
 800057e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000582:	61d3      	str	r3, [r2, #28]
 8000584:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <HAL_UART_MspInit+0x11c>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b38      	ldr	r3, [pc, #224]	; (8000674 <HAL_UART_MspInit+0x11c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a37      	ldr	r2, [pc, #220]	; (8000674 <HAL_UART_MspInit+0x11c>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b35      	ldr	r3, [pc, #212]	; (8000674 <HAL_UART_MspInit+0x11c>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a8:	230c      	movs	r3, #12
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	482f      	ldr	r0, [pc, #188]	; (8000678 <HAL_UART_MspInit+0x120>)
 80005bc:	f000 fc60 	bl	8000e80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <HAL_UART_MspInit+0x124>)
 80005c2:	4a2f      	ldr	r2, [pc, #188]	; (8000680 <HAL_UART_MspInit+0x128>)
 80005c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <HAL_UART_MspInit+0x124>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <HAL_UART_MspInit+0x124>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <HAL_UART_MspInit+0x124>)
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <HAL_UART_MspInit+0x124>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <HAL_UART_MspInit+0x124>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <HAL_UART_MspInit+0x124>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <HAL_UART_MspInit+0x124>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80005f0:	4822      	ldr	r0, [pc, #136]	; (800067c <HAL_UART_MspInit+0x124>)
 80005f2:	f000 f9e1 	bl	80009b8 <HAL_DMA_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 80005fc:	f7ff febe 	bl	800037c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <HAL_UART_MspInit+0x124>)
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <HAL_UART_MspInit+0x124>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <HAL_UART_MspInit+0x12c>)
 800060e:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <HAL_UART_MspInit+0x130>)
 8000610:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <HAL_UART_MspInit+0x12c>)
 8000614:	2210      	movs	r2, #16
 8000616:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <HAL_UART_MspInit+0x12c>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <HAL_UART_MspInit+0x12c>)
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HAL_UART_MspInit+0x12c>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <HAL_UART_MspInit+0x12c>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <HAL_UART_MspInit+0x12c>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <HAL_UART_MspInit+0x12c>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <HAL_UART_MspInit+0x12c>)
 800063e:	f000 f9bb 	bl	80009b8 <HAL_DMA_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000648:	f7ff fe98 	bl	800037c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <HAL_UART_MspInit+0x12c>)
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
 8000652:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <HAL_UART_MspInit+0x12c>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2026      	movs	r0, #38	; 0x26
 800065e:	f000 f974 	bl	800094a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000662:	2026      	movs	r0, #38	; 0x26
 8000664:	f000 f98d 	bl	8000982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40004400 	.word	0x40004400
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800
 800067c:	2000029c 	.word	0x2000029c
 8000680:	4002006c 	.word	0x4002006c
 8000684:	200002e0 	.word	0x200002e0
 8000688:	40020080 	.word	0x40020080

0800068c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800068c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800068e:	e003      	b.n	8000698 <LoopCopyDataInit>

08000690 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000692:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000694:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000696:	3104      	adds	r1, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800069c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800069e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a0:	d3f6      	bcc.n	8000690 <CopyDataInit>
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006a4:	e002      	b.n	80006ac <LoopFillZerobss>

080006a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006a8:	f842 3b04 	str.w	r3, [r2], #4

080006ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b0:	d3f9      	bcc.n	80006a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b2:	f7ff ff21 	bl	80004f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f002 f94d 	bl	8002954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fde3 	bl	8000284 <main>
  bx lr
 80006be:	4770      	bx	lr
  ldr r3, =_sidata
 80006c0:	080035a8 	.word	0x080035a8
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80006cc:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80006d0:	2000036c 	.word	0x2000036c

080006d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_2_IRQHandler>
	...

080006d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <HAL_Init+0x28>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <HAL_Init+0x28>)
 80006e2:	f043 0310 	orr.w	r3, r3, #16
 80006e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f000 f923 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f808 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f4:	f7ff fe48 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_InitTick+0x54>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x58>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	fbb3 f3f1 	udiv	r3, r3, r1
 800071e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f93b 	bl	800099e <HAL_SYSTICK_Config>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	e00e      	b.n	8000750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b0f      	cmp	r3, #15
 8000736:	d80a      	bhi.n	800074e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000738:	2200      	movs	r2, #0
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f000 f903 	bl	800094a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <HAL_InitTick+0x5c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074a:	2300      	movs	r3, #0
 800074c:	e000      	b.n	8000750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000000 	.word	0x20000000
 800075c:	20000008 	.word	0x20000008
 8000760:	20000004 	.word	0x20000004

08000764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_IncTick+0x1c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x20>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4413      	add	r3, r2
 8000774:	4a03      	ldr	r2, [pc, #12]	; (8000784 <HAL_IncTick+0x20>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	20000008 	.word	0x20000008
 8000784:	20000364 	.word	0x20000364

08000788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return uwTick;
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <HAL_GetTick+0x10>)
 800078e:	681b      	ldr	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000364 	.word	0x20000364

0800079c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	60d3      	str	r3, [r2, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__NVIC_GetPriorityGrouping+0x18>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	f003 0307 	and.w	r3, r3, #7
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	2b00      	cmp	r3, #0
 8000810:	db0b      	blt.n	800082a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 021f 	and.w	r2, r3, #31
 8000818:	4906      	ldr	r1, [pc, #24]	; (8000834 <__NVIC_EnableIRQ+0x34>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	2001      	movs	r0, #1
 8000822:	fa00 f202 	lsl.w	r2, r0, r2
 8000826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	; (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	; (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f7ff ff90 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff2d 	bl	800079c <__NVIC_SetPriorityGrouping>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800095c:	f7ff ff42 	bl	80007e4 <__NVIC_GetPriorityGrouping>
 8000960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff ff90 	bl	800088c <NVIC_EncodePriority>
 800096c:	4602      	mov	r2, r0
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5f 	bl	8000838 <__NVIC_SetPriority>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff35 	bl	8000800 <__NVIC_EnableIRQ>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff ffa2 	bl	80008f0 <SysTick_Config>
 80009ac:	4603      	mov	r3, r0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e043      	b.n	8000a56 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <HAL_DMA_Init+0xa8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <HAL_DMA_Init+0xac>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	091b      	lsrs	r3, r3, #4
 80009e0:	009a      	lsls	r2, r3, #2
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <HAL_DMA_Init+0xb0>)
 80009ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2202      	movs	r2, #2
 80009f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	bffdfff8 	.word	0xbffdfff8
 8000a64:	cccccccd 	.word	0xcccccccd
 8000a68:	40020000 	.word	0x40020000

08000a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d101      	bne.n	8000a8c <HAL_DMA_Start_IT+0x20>
 8000a88:	2302      	movs	r3, #2
 8000a8a:	e04a      	b.n	8000b22 <HAL_DMA_Start_IT+0xb6>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d13a      	bne.n	8000b14 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f022 0201 	bic.w	r2, r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f000 f9ae 	bl	8000e24 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d008      	beq.n	8000ae2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 020e 	orr.w	r2, r2, #14
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e00f      	b.n	8000b02 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f022 0204 	bic.w	r2, r2, #4
 8000af0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f042 020a 	orr.w	r2, r2, #10
 8000b00:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0201 	orr.w	r2, r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e005      	b.n	8000b20 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d005      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2204      	movs	r2, #4
 8000b46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e051      	b.n	8000bf2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 020e 	bic.w	r2, r2, #14
 8000b5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0201 	bic.w	r2, r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_DMA_Abort_IT+0xd0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d029      	beq.n	8000bcc <HAL_DMA_Abort_IT+0xa0>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a20      	ldr	r2, [pc, #128]	; (8000c00 <HAL_DMA_Abort_IT+0xd4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d022      	beq.n	8000bc8 <HAL_DMA_Abort_IT+0x9c>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <HAL_DMA_Abort_IT+0xd8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d01a      	beq.n	8000bc2 <HAL_DMA_Abort_IT+0x96>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <HAL_DMA_Abort_IT+0xdc>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d012      	beq.n	8000bbc <HAL_DMA_Abort_IT+0x90>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <HAL_DMA_Abort_IT+0xe0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00a      	beq.n	8000bb6 <HAL_DMA_Abort_IT+0x8a>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <HAL_DMA_Abort_IT+0xe4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d102      	bne.n	8000bb0 <HAL_DMA_Abort_IT+0x84>
 8000baa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bae:	e00e      	b.n	8000bce <HAL_DMA_Abort_IT+0xa2>
 8000bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bb4:	e00b      	b.n	8000bce <HAL_DMA_Abort_IT+0xa2>
 8000bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bba:	e008      	b.n	8000bce <HAL_DMA_Abort_IT+0xa2>
 8000bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc0:	e005      	b.n	8000bce <HAL_DMA_Abort_IT+0xa2>
 8000bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc6:	e002      	b.n	8000bce <HAL_DMA_Abort_IT+0xa2>
 8000bc8:	2310      	movs	r3, #16
 8000bca:	e000      	b.n	8000bce <HAL_DMA_Abort_IT+0xa2>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <HAL_DMA_Abort_IT+0xe8>)
 8000bd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	4798      	blx	r3
    } 
  }
  return status;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40020008 	.word	0x40020008
 8000c00:	4002001c 	.word	0x4002001c
 8000c04:	40020030 	.word	0x40020030
 8000c08:	40020044 	.word	0x40020044
 8000c0c:	40020058 	.word	0x40020058
 8000c10:	4002006c 	.word	0x4002006c
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	2204      	movs	r2, #4
 8000c36:	409a      	lsls	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d04f      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0xc8>
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d04a      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0320 	and.w	r3, r3, #32
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d107      	bne.n	8000c68 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0204 	bic.w	r2, r2, #4
 8000c66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a66      	ldr	r2, [pc, #408]	; (8000e08 <HAL_DMA_IRQHandler+0x1f0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d029      	beq.n	8000cc6 <HAL_DMA_IRQHandler+0xae>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a65      	ldr	r2, [pc, #404]	; (8000e0c <HAL_DMA_IRQHandler+0x1f4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d022      	beq.n	8000cc2 <HAL_DMA_IRQHandler+0xaa>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a63      	ldr	r2, [pc, #396]	; (8000e10 <HAL_DMA_IRQHandler+0x1f8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d01a      	beq.n	8000cbc <HAL_DMA_IRQHandler+0xa4>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a62      	ldr	r2, [pc, #392]	; (8000e14 <HAL_DMA_IRQHandler+0x1fc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d012      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x9e>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a60      	ldr	r2, [pc, #384]	; (8000e18 <HAL_DMA_IRQHandler+0x200>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d00a      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0x98>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a5f      	ldr	r2, [pc, #380]	; (8000e1c <HAL_DMA_IRQHandler+0x204>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d102      	bne.n	8000caa <HAL_DMA_IRQHandler+0x92>
 8000ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ca8:	e00e      	b.n	8000cc8 <HAL_DMA_IRQHandler+0xb0>
 8000caa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000cae:	e00b      	b.n	8000cc8 <HAL_DMA_IRQHandler+0xb0>
 8000cb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000cb4:	e008      	b.n	8000cc8 <HAL_DMA_IRQHandler+0xb0>
 8000cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cba:	e005      	b.n	8000cc8 <HAL_DMA_IRQHandler+0xb0>
 8000cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc0:	e002      	b.n	8000cc8 <HAL_DMA_IRQHandler+0xb0>
 8000cc2:	2340      	movs	r3, #64	; 0x40
 8000cc4:	e000      	b.n	8000cc8 <HAL_DMA_IRQHandler+0xb0>
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	4a55      	ldr	r2, [pc, #340]	; (8000e20 <HAL_DMA_IRQHandler+0x208>)
 8000cca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 8094 	beq.w	8000dfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000cde:	e08e      	b.n	8000dfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d056      	beq.n	8000d9e <HAL_DMA_IRQHandler+0x186>
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d051      	beq.n	8000d9e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0320 	and.w	r3, r3, #32
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10b      	bne.n	8000d20 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 020a 	bic.w	r2, r2, #10
 8000d16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <HAL_DMA_IRQHandler+0x1f0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d029      	beq.n	8000d7e <HAL_DMA_IRQHandler+0x166>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a37      	ldr	r2, [pc, #220]	; (8000e0c <HAL_DMA_IRQHandler+0x1f4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d022      	beq.n	8000d7a <HAL_DMA_IRQHandler+0x162>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a35      	ldr	r2, [pc, #212]	; (8000e10 <HAL_DMA_IRQHandler+0x1f8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01a      	beq.n	8000d74 <HAL_DMA_IRQHandler+0x15c>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <HAL_DMA_IRQHandler+0x1fc>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d012      	beq.n	8000d6e <HAL_DMA_IRQHandler+0x156>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a32      	ldr	r2, [pc, #200]	; (8000e18 <HAL_DMA_IRQHandler+0x200>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d00a      	beq.n	8000d68 <HAL_DMA_IRQHandler+0x150>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a31      	ldr	r2, [pc, #196]	; (8000e1c <HAL_DMA_IRQHandler+0x204>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d102      	bne.n	8000d62 <HAL_DMA_IRQHandler+0x14a>
 8000d5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d60:	e00e      	b.n	8000d80 <HAL_DMA_IRQHandler+0x168>
 8000d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d66:	e00b      	b.n	8000d80 <HAL_DMA_IRQHandler+0x168>
 8000d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6c:	e008      	b.n	8000d80 <HAL_DMA_IRQHandler+0x168>
 8000d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d72:	e005      	b.n	8000d80 <HAL_DMA_IRQHandler+0x168>
 8000d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d78:	e002      	b.n	8000d80 <HAL_DMA_IRQHandler+0x168>
 8000d7a:	2320      	movs	r3, #32
 8000d7c:	e000      	b.n	8000d80 <HAL_DMA_IRQHandler+0x168>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_DMA_IRQHandler+0x208>)
 8000d82:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d034      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d9c:	e02f      	b.n	8000dfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	2208      	movs	r2, #8
 8000da4:	409a      	lsls	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4013      	ands	r3, r2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d028      	beq.n	8000e00 <HAL_DMA_IRQHandler+0x1e8>
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d023      	beq.n	8000e00 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 020e 	bic.w	r2, r2, #14
 8000dc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	4798      	blx	r3
    }
  }
  return;
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
}
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40020008 	.word	0x40020008
 8000e0c:	4002001c 	.word	0x4002001c
 8000e10:	40020030 	.word	0x40020030
 8000e14:	40020044 	.word	0x40020044
 8000e18:	40020058 	.word	0x40020058
 8000e1c:	4002006c 	.word	0x4002006c
 8000e20:	40020000 	.word	0x40020000

08000e24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b10      	cmp	r3, #16
 8000e50:	d108      	bne.n	8000e64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e62:	e007      	b.n	8000e74 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	60da      	str	r2, [r3, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b08b      	sub	sp, #44	; 0x2c
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	e127      	b.n	80010e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e94:	2201      	movs	r2, #1
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8116 	bne.w	80010de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d034      	beq.n	8000f24 <HAL_GPIO_Init+0xa4>
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d80d      	bhi.n	8000eda <HAL_GPIO_Init+0x5a>
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d02b      	beq.n	8000f1a <HAL_GPIO_Init+0x9a>
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d804      	bhi.n	8000ed0 <HAL_GPIO_Init+0x50>
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d031      	beq.n	8000f2e <HAL_GPIO_Init+0xae>
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d01c      	beq.n	8000f08 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ece:	e048      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d043      	beq.n	8000f5c <HAL_GPIO_Init+0xdc>
 8000ed4:	2b11      	cmp	r3, #17
 8000ed6:	d01b      	beq.n	8000f10 <HAL_GPIO_Init+0x90>
          break;
 8000ed8:	e043      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eda:	4a89      	ldr	r2, [pc, #548]	; (8001100 <HAL_GPIO_Init+0x280>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d026      	beq.n	8000f2e <HAL_GPIO_Init+0xae>
 8000ee0:	4a87      	ldr	r2, [pc, #540]	; (8001100 <HAL_GPIO_Init+0x280>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d806      	bhi.n	8000ef4 <HAL_GPIO_Init+0x74>
 8000ee6:	4a87      	ldr	r2, [pc, #540]	; (8001104 <HAL_GPIO_Init+0x284>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d020      	beq.n	8000f2e <HAL_GPIO_Init+0xae>
 8000eec:	4a86      	ldr	r2, [pc, #536]	; (8001108 <HAL_GPIO_Init+0x288>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01d      	beq.n	8000f2e <HAL_GPIO_Init+0xae>
          break;
 8000ef2:	e036      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ef4:	4a85      	ldr	r2, [pc, #532]	; (800110c <HAL_GPIO_Init+0x28c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0xae>
 8000efa:	4a85      	ldr	r2, [pc, #532]	; (8001110 <HAL_GPIO_Init+0x290>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d016      	beq.n	8000f2e <HAL_GPIO_Init+0xae>
 8000f00:	4a84      	ldr	r2, [pc, #528]	; (8001114 <HAL_GPIO_Init+0x294>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0xae>
          break;
 8000f06:	e02c      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	623b      	str	r3, [r7, #32]
          break;
 8000f0e:	e028      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	3304      	adds	r3, #4
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e023      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	3308      	adds	r3, #8
 8000f20:	623b      	str	r3, [r7, #32]
          break;
 8000f22:	e01e      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	330c      	adds	r3, #12
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	e019      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f36:	2304      	movs	r3, #4
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e012      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d105      	bne.n	8000f50 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	611a      	str	r2, [r3, #16]
          break;
 8000f4e:	e008      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f50:	2308      	movs	r3, #8
 8000f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	615a      	str	r2, [r3, #20]
          break;
 8000f5a:	e002      	b.n	8000f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
          break;
 8000f60:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2bff      	cmp	r3, #255	; 0xff
 8000f66:	d801      	bhi.n	8000f6c <HAL_GPIO_Init+0xec>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	e001      	b.n	8000f70 <HAL_GPIO_Init+0xf0>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2bff      	cmp	r3, #255	; 0xff
 8000f76:	d802      	bhi.n	8000f7e <HAL_GPIO_Init+0xfe>
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x104>
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	3b08      	subs	r3, #8
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	401a      	ands	r2, r3
 8000f96:	6a39      	ldr	r1, [r7, #32]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8096 	beq.w	80010de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb2:	4b59      	ldr	r3, [pc, #356]	; (8001118 <HAL_GPIO_Init+0x298>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a58      	ldr	r2, [pc, #352]	; (8001118 <HAL_GPIO_Init+0x298>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b56      	ldr	r3, [pc, #344]	; (8001118 <HAL_GPIO_Init+0x298>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fca:	4a54      	ldr	r2, [pc, #336]	; (800111c <HAL_GPIO_Init+0x29c>)
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4b      	ldr	r2, [pc, #300]	; (8001120 <HAL_GPIO_Init+0x2a0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d013      	beq.n	800101e <HAL_GPIO_Init+0x19e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4a      	ldr	r2, [pc, #296]	; (8001124 <HAL_GPIO_Init+0x2a4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00d      	beq.n	800101a <HAL_GPIO_Init+0x19a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a49      	ldr	r2, [pc, #292]	; (8001128 <HAL_GPIO_Init+0x2a8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0x196>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a48      	ldr	r2, [pc, #288]	; (800112c <HAL_GPIO_Init+0x2ac>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_GPIO_Init+0x192>
 800100e:	2303      	movs	r3, #3
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x1a0>
 8001012:	2304      	movs	r3, #4
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x1a0>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x1a0>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x1a0>
 800101e:	2300      	movs	r3, #0
 8001020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001030:	493a      	ldr	r1, [pc, #232]	; (800111c <HAL_GPIO_Init+0x29c>)
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4938      	ldr	r1, [pc, #224]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
 8001056:	e006      	b.n	8001066 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001058:	4b35      	ldr	r3, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	43db      	mvns	r3, r3
 8001060:	4933      	ldr	r1, [pc, #204]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 8001062:	4013      	ands	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	492e      	ldr	r1, [pc, #184]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	43db      	mvns	r3, r3
 8001088:	4929      	ldr	r1, [pc, #164]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 800108a:	4013      	ands	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	4924      	ldr	r1, [pc, #144]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
 80010a6:	e006      	b.n	80010b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	491f      	ldr	r1, [pc, #124]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	491a      	ldr	r1, [pc, #104]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60cb      	str	r3, [r1, #12]
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	4915      	ldr	r1, [pc, #84]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 80010da:	4013      	ands	r3, r2
 80010dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	3301      	adds	r3, #1
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	fa22 f303 	lsr.w	r3, r2, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f47f aed0 	bne.w	8000e94 <HAL_GPIO_Init+0x14>
  }
}
 80010f4:	bf00      	nop
 80010f6:	372c      	adds	r7, #44	; 0x2c
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	10210000 	.word	0x10210000
 8001104:	10110000 	.word	0x10110000
 8001108:	10120000 	.word	0x10120000
 800110c:	10310000 	.word	0x10310000
 8001110:	10320000 	.word	0x10320000
 8001114:	10220000 	.word	0x10220000
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	40010800 	.word	0x40010800
 8001124:	40010c00 	.word	0x40010c00
 8001128:	40011000 	.word	0x40011000
 800112c:	40011400 	.word	0x40011400
 8001130:	40010400 	.word	0x40010400

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001150:	e003      	b.n	800115a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	611a      	str	r2, [r3, #16]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4013      	ands	r3, r2
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43d9      	mvns	r1, r3
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	400b      	ands	r3, r1
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	611a      	str	r2, [r3, #16]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
	...

08001198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f806 	bl	80011c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e26c      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8087 	beq.w	800130a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011fc:	4b92      	ldr	r3, [pc, #584]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b04      	cmp	r3, #4
 8001206:	d00c      	beq.n	8001222 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001208:	4b8f      	ldr	r3, [pc, #572]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b08      	cmp	r3, #8
 8001212:	d112      	bne.n	800123a <HAL_RCC_OscConfig+0x5e>
 8001214:	4b8c      	ldr	r3, [pc, #560]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d10b      	bne.n	800123a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001222:	4b89      	ldr	r3, [pc, #548]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d06c      	beq.n	8001308 <HAL_RCC_OscConfig+0x12c>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d168      	bne.n	8001308 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e246      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001242:	d106      	bne.n	8001252 <HAL_RCC_OscConfig+0x76>
 8001244:	4b80      	ldr	r3, [pc, #512]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a7f      	ldr	r2, [pc, #508]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800124a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e02e      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x98>
 800125a:	4b7b      	ldr	r3, [pc, #492]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a7a      	ldr	r2, [pc, #488]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b78      	ldr	r3, [pc, #480]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a77      	ldr	r2, [pc, #476]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800126c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0xbc>
 800127e:	4b72      	ldr	r3, [pc, #456]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a71      	ldr	r2, [pc, #452]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b6f      	ldr	r3, [pc, #444]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6e      	ldr	r2, [pc, #440]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 8001298:	4b6b      	ldr	r3, [pc, #428]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a6a      	ldr	r2, [pc, #424]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b68      	ldr	r3, [pc, #416]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a67      	ldr	r2, [pc, #412]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fa66 	bl	8000788 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fa62 	bl	8000788 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1fa      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b5d      	ldr	r3, [pc, #372]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xe4>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fa52 	bl	8000788 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fa4e 	bl	8000788 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1e6      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b53      	ldr	r3, [pc, #332]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x10c>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001316:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001322:	4b49      	ldr	r3, [pc, #292]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x18c>
 800132e:	4b46      	ldr	r3, [pc, #280]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b43      	ldr	r3, [pc, #268]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x176>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1ba      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4939      	ldr	r1, [pc, #228]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fa07 	bl	8000788 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fa03 	bl	8000788 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e19b      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4927      	ldr	r1, [pc, #156]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_RCC_OscConfig+0x270>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff f9e6 	bl	8000788 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff f9e2 	bl	8000788 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e17a      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d03a      	beq.n	8001460 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d019      	beq.n	8001426 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f8:	f7ff f9c6 	bl	8000788 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff f9c2 	bl	8000788 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e15a      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800141e:	2001      	movs	r0, #1
 8001420:	f000 fada 	bl	80019d8 <RCC_Delay>
 8001424:	e01c      	b.n	8001460 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142c:	f7ff f9ac 	bl	8000788 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001432:	e00f      	b.n	8001454 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff f9a8 	bl	8000788 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d908      	bls.n	8001454 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e140      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	42420000 	.word	0x42420000
 8001450:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b9e      	ldr	r3, [pc, #632]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1e9      	bne.n	8001434 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a6 	beq.w	80015ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b97      	ldr	r3, [pc, #604]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10d      	bne.n	800149a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b94      	ldr	r3, [pc, #592]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a93      	ldr	r2, [pc, #588]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b91      	ldr	r3, [pc, #580]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b8e      	ldr	r3, [pc, #568]	; (80016d4 <HAL_RCC_OscConfig+0x4f8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d118      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4b8b      	ldr	r3, [pc, #556]	; (80016d4 <HAL_RCC_OscConfig+0x4f8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a8a      	ldr	r2, [pc, #552]	; (80016d4 <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff f969 	bl	8000788 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ba:	f7ff f965 	bl	8000788 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b64      	cmp	r3, #100	; 0x64
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e0fd      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <HAL_RCC_OscConfig+0x4f8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x312>
 80014e0:	4b7b      	ldr	r3, [pc, #492]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a7a      	ldr	r2, [pc, #488]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6213      	str	r3, [r2, #32]
 80014ec:	e02d      	b.n	800154a <HAL_RCC_OscConfig+0x36e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x334>
 80014f6:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a75      	ldr	r2, [pc, #468]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6213      	str	r3, [r2, #32]
 8001502:	4b73      	ldr	r3, [pc, #460]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4a72      	ldr	r2, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	6213      	str	r3, [r2, #32]
 800150e:	e01c      	b.n	800154a <HAL_RCC_OscConfig+0x36e>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b05      	cmp	r3, #5
 8001516:	d10c      	bne.n	8001532 <HAL_RCC_OscConfig+0x356>
 8001518:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a6c      	ldr	r2, [pc, #432]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a69      	ldr	r2, [pc, #420]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6213      	str	r3, [r2, #32]
 8001530:	e00b      	b.n	800154a <HAL_RCC_OscConfig+0x36e>
 8001532:	4b67      	ldr	r3, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a66      	ldr	r2, [pc, #408]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	4b64      	ldr	r3, [pc, #400]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a63      	ldr	r2, [pc, #396]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001544:	f023 0304 	bic.w	r3, r3, #4
 8001548:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d015      	beq.n	800157e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff f919 	bl	8000788 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff f915 	bl	8000788 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	; 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e0ab      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001570:	4b57      	ldr	r3, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ee      	beq.n	800155a <HAL_RCC_OscConfig+0x37e>
 800157c:	e014      	b.n	80015a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff f903 	bl	8000788 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff f8ff 	bl	8000788 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e095      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1ee      	bne.n	8001586 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d105      	bne.n	80015ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ae:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a47      	ldr	r2, [pc, #284]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8081 	beq.w	80016c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d061      	beq.n	8001694 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d146      	bne.n	8001666 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_RCC_OscConfig+0x4fc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff f8d3 	bl	8000788 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff f8cf 	bl	8000788 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e067      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f8:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d108      	bne.n	8001620 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	492d      	ldr	r1, [pc, #180]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a19      	ldr	r1, [r3, #32]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	430b      	orrs	r3, r1
 8001632:	4927      	ldr	r1, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x4fc>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff f8a3 	bl	8000788 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff f89f 	bl	8000788 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e037      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x46a>
 8001664:	e02f      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_RCC_OscConfig+0x4fc>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff f88c 	bl	8000788 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f888 	bl	8000788 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e020      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x498>
 8001692:	e018      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e013      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40007000 	.word	0x40007000
 80016d8:	42420060 	.word	0x42420060

080016dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0d0      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f0:	4b6a      	ldr	r3, [pc, #424]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d910      	bls.n	8001720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b67      	ldr	r3, [pc, #412]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 0207 	bic.w	r2, r3, #7
 8001706:	4965      	ldr	r1, [pc, #404]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0b8      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800175a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	494d      	ldr	r1, [pc, #308]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d040      	beq.n	80017fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d115      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e073      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06b      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f023 0203 	bic.w	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4936      	ldr	r1, [pc, #216]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017cc:	f7fe ffdc 	bl	8000788 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f7fe ffd8 	bl	8000788 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e053      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 020c 	and.w	r2, r3, #12
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d1eb      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d210      	bcs.n	800182c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0207 	bic.w	r2, r3, #7
 8001812:	4922      	ldr	r1, [pc, #136]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e032      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4916      	ldr	r1, [pc, #88]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	490e      	ldr	r1, [pc, #56]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800186a:	f000 f821 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 800186e:	4601      	mov	r1, r0
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x1c8>)
 800187c:	5cd3      	ldrb	r3, [r2, r3]
 800187e:	fa21 f303 	lsr.w	r3, r1, r3
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1d0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe ff3a 	bl	8000704 <HAL_InitTick>

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40022000 	.word	0x40022000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	08003448 	.word	0x08003448
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	b490      	push	{r4, r7}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018b8:	1d3c      	adds	r4, r7, #4
 80018ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x40>
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x46>
 80018ee:	e02d      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018f2:	623b      	str	r3, [r7, #32]
      break;
 80018f4:	e02d      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	0c9b      	lsrs	r3, r3, #18
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001902:	4413      	add	r3, r2
 8001904:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001908:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d013      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0c5b      	lsrs	r3, r3, #17
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001922:	4413      	add	r3, r2
 8001924:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001928:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_RCC_GetSysClockFreq+0xbc>)
 800192e:	fb02 f203 	mul.w	r2, r2, r3
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	fbb2 f3f3 	udiv	r3, r2, r3
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	e004      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	623b      	str	r3, [r7, #32]
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <HAL_RCC_GetSysClockFreq+0xbc>)
 800194e:	623b      	str	r3, [r7, #32]
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	6a3b      	ldr	r3, [r7, #32]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3728      	adds	r7, #40	; 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bc90      	pop	{r4, r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	080033cc 	.word	0x080033cc
 8001964:	080033dc 	.word	0x080033dc
 8001968:	40021000 	.word	0x40021000
 800196c:	007a1200 	.word	0x007a1200
 8001970:	003d0900 	.word	0x003d0900

08001974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <HAL_RCC_GetHCLKFreq+0x10>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800198c:	f7ff fff2 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 8001990:	4601      	mov	r1, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08003458 	.word	0x08003458

080019b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b4:	f7ff ffde 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 80019b8:	4601      	mov	r1, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	0adb      	lsrs	r3, r3, #11
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4a03      	ldr	r2, [pc, #12]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	08003458 	.word	0x08003458

080019d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <RCC_Delay+0x34>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <RCC_Delay+0x38>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0a5b      	lsrs	r3, r3, #9
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019f4:	bf00      	nop
  }
  while (Delay --);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	60fa      	str	r2, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f9      	bne.n	80019f4 <RCC_Delay+0x1c>
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	10624dd3 	.word	0x10624dd3

08001a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e03f      	b.n	8001aa6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fd8c 	bl	8000558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fc29 	bl	80022b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d153      	bne.n	8001b72 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_UART_Transmit_DMA+0x26>
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e04c      	b.n	8001b74 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_UART_Transmit_DMA+0x38>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e045      	b.n	8001b74 <HAL_UART_Transmit_DMA+0xc4>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2221      	movs	r2, #33	; 0x21
 8001b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_UART_Transmit_DMA+0xcc>)
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_UART_Transmit_DMA+0xd0>)
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_UART_Transmit_DMA+0xd4>)
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3304      	adds	r3, #4
 8001b44:	461a      	mov	r2, r3
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	f7fe ff90 	bl	8000a6c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b54:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b6c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
  }
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08001ed1 	.word	0x08001ed1
 8001b80:	08001f23 	.word	0x08001f23
 8001b84:	08001fc3 	.word	0x08001fc3

08001b88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d166      	bne.n	8001c70 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_UART_Receive_DMA+0x26>
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e05f      	b.n	8001c72 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_UART_Receive_DMA+0x38>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e058      	b.n	8001c72 <HAL_UART_Receive_DMA+0xea>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	88fa      	ldrh	r2, [r7, #6]
 8001bd2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2222      	movs	r2, #34	; 0x22
 8001bde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be6:	4a25      	ldr	r2, [pc, #148]	; (8001c7c <HAL_UART_Receive_DMA+0xf4>)
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <HAL_UART_Receive_DMA+0xf8>)
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf6:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <HAL_UART_Receive_DMA+0xfc>)
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfe:	2200      	movs	r2, #0
 8001c00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3304      	adds	r3, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	f7fe ff27 	bl	8000a6c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c4a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c6a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	08001f3f 	.word	0x08001f3f
 8001c80:	08001fa7 	.word	0x08001fa7
 8001c84:	08001fc3 	.word	0x08001fc3

08001c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10d      	bne.n	8001cda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_UART_IRQHandler+0x52>
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa6c 	bl	80021b0 <UART_Receive_IT>
      return;
 8001cd8:	e0d1      	b.n	8001e7e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80b0 	beq.w	8001e42 <HAL_UART_IRQHandler+0x1ba>
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_UART_IRQHandler+0x70>
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80a5 	beq.w	8001e42 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_UART_IRQHandler+0x90>
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_UART_IRQHandler+0xb0>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d30:	f043 0202 	orr.w	r2, r3, #2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_UART_IRQHandler+0xd0>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	f043 0204 	orr.w	r2, r3, #4
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00f      	beq.n	8001d82 <HAL_UART_IRQHandler+0xfa>
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <HAL_UART_IRQHandler+0xee>
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7a:	f043 0208 	orr.w	r2, r3, #8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d078      	beq.n	8001e7c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_UART_IRQHandler+0x11c>
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fa06 	bl	80021b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf14      	ite	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d102      	bne.n	8001dcc <HAL_UART_IRQHandler+0x144>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d031      	beq.n	8001e30 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f957 	bl	8002080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d023      	beq.n	8001e28 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <HAL_UART_IRQHandler+0x1fc>)
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fe91 	bl	8000b2c <HAL_DMA_Abort_IT>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d016      	beq.n	8001e3e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e1e:	e00e      	b.n	8001e3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f84c 	bl	8001ebe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e26:	e00a      	b.n	8001e3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f848 	bl	8001ebe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e2e:	e006      	b.n	8001e3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f844 	bl	8001ebe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001e3c:	e01e      	b.n	8001e7c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e3e:	bf00      	nop
    return;
 8001e40:	e01c      	b.n	8001e7c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_UART_IRQHandler+0x1d6>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f943 	bl	80020e2 <UART_Transmit_IT>
    return;
 8001e5c:	e00f      	b.n	8001e7e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00a      	beq.n	8001e7e <HAL_UART_IRQHandler+0x1f6>
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f984 	bl	8002180 <UART_EndTransmit_IT>
    return;
 8001e78:	bf00      	nop
 8001e7a:	e000      	b.n	8001e7e <HAL_UART_IRQHandler+0x1f6>
    return;
 8001e7c:	bf00      	nop
  }
}
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	080020bb 	.word	0x080020bb

08001e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d113      	bne.n	8001f14 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f00:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f10:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001f12:	e002      	b.n	8001f1a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff ffb7 	bl	8001e88 <HAL_UART_TxCpltCallback>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff ffb2 	bl	8001e9a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d11e      	bne.n	8001f98 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f6e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f7fe f9cb 	bl	8000334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff ff79 	bl	8001eac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b21      	cmp	r3, #33	; 0x21
 8001ff4:	d108      	bne.n	8002008 <UART_DMAError+0x46>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002002:	68b8      	ldr	r0, [r7, #8]
 8002004:	f000 f827 	bl	8002056 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf14      	ite	ne
 8002016:	2301      	movne	r3, #1
 8002018:	2300      	moveq	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b22      	cmp	r3, #34	; 0x22
 8002028:	d108      	bne.n	800203c <UART_DMAError+0x7a>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2200      	movs	r2, #0
 8002034:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002036:	68b8      	ldr	r0, [r7, #8]
 8002038:	f000 f822 	bl	8002080 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002048:	68b8      	ldr	r0, [r7, #8]
 800204a:	f7ff ff38 	bl	8001ebe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800206c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002096:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff fef2 	bl	8001ebe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b21      	cmp	r3, #33	; 0x21
 80020f4:	d13e      	bne.n	8002174 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fe:	d114      	bne.n	800212a <UART_Transmit_IT+0x48>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d110      	bne.n	800212a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800211c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	1c9a      	adds	r2, r3, #2
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	621a      	str	r2, [r3, #32]
 8002128:	e008      	b.n	800213c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	1c59      	adds	r1, r3, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6211      	str	r1, [r2, #32]
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29b      	uxth	r3, r3
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4619      	mov	r1, r3
 800214a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10f      	bne.n	8002170 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800215e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002196:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff fe71 	bl	8001e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b22      	cmp	r3, #34	; 0x22
 80021c2:	d170      	bne.n	80022a6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021cc:	d117      	bne.n	80021fe <UART_Receive_IT+0x4e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d113      	bne.n	80021fe <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	1c9a      	adds	r2, r3, #2
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
 80021fc:	e026      	b.n	800224c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002210:	d007      	beq.n	8002222 <UART_Receive_IT+0x72>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <UART_Receive_IT+0x80>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e008      	b.n	8002242 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800223c:	b2da      	uxtb	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29b      	uxth	r3, r3
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4619      	mov	r1, r3
 800225a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800225c:	2b00      	cmp	r3, #0
 800225e:	d120      	bne.n	80022a2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0220 	bic.w	r2, r2, #32
 800226e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800227e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7fe f84b 	bl	8000334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e002      	b.n	80022a8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022ea:	f023 030c 	bic.w	r3, r3, #12
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2c      	ldr	r2, [pc, #176]	; (80023c4 <UART_SetConfig+0x114>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002318:	f7ff fb4a 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	e002      	b.n	8002326 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002320:	f7ff fb32 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8002324:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <UART_SetConfig+0x118>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	0119      	lsls	r1, r3, #4
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	009a      	lsls	r2, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fbb2 f2f3 	udiv	r2, r2, r3
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <UART_SetConfig+0x118>)
 800235e:	fba3 0302 	umull	r0, r3, r3, r2
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2064      	movs	r0, #100	; 0x64
 8002366:	fb00 f303 	mul.w	r3, r0, r3
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	3332      	adds	r3, #50	; 0x32
 8002370:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <UART_SetConfig+0x118>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237c:	4419      	add	r1, r3
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	009a      	lsls	r2, r3, #2
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	fbb2 f2f3 	udiv	r2, r2, r3
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <UART_SetConfig+0x118>)
 8002396:	fba3 0302 	umull	r0, r3, r3, r2
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2064      	movs	r0, #100	; 0x64
 800239e:	fb00 f303 	mul.w	r3, r0, r3
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	3332      	adds	r3, #50	; 0x32
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <UART_SetConfig+0x118>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	f003 020f 	and.w	r2, r3, #15
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	440a      	add	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40013800 	.word	0x40013800
 80023c8:	51eb851f 	.word	0x51eb851f

080023cc <convertToStucture>:
#include <string.h>
#include<ctype.h>
#include<stdlib.h>
#include<main.h>
#include<stm32f1xx.h>
void convertToStucture(uint8_t *msg, struct List **prog) {
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b0a0      	sub	sp, #128	; 0x80
 80023d0:	af0a      	add	r7, sp, #40	; 0x28
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
	uint8_t buffor[10];
	uint8_t i = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Subroutine tempData;
	static uint8_t ID = 0;
	//wypelnienie tablicy name[] i heatingCycle zerami
	for (int i = 0; i < sizeof(tempData.name); i++) {
 80023dc:	2300      	movs	r3, #0
 80023de:	653b      	str	r3, [r7, #80]	; 0x50
 80023e0:	e008      	b.n	80023f4 <convertToStucture+0x28>
		tempData.name[i] = 0;
 80023e2:	f107 0209 	add.w	r2, r7, #9
 80023e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e8:	4413      	add	r3, r2
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tempData.name); i++) {
 80023ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f0:	3301      	adds	r3, #1
 80023f2:	653b      	str	r3, [r7, #80]	; 0x50
 80023f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f6:	2b13      	cmp	r3, #19
 80023f8:	d9f3      	bls.n	80023e2 <convertToStucture+0x16>
	}
	for (int i = 0; i < 5; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023fe:	e015      	b.n	800242c <convertToStucture+0x60>
		for (int j = 0; j < 2; j++)
 8002400:	2300      	movs	r3, #0
 8002402:	64bb      	str	r3, [r7, #72]	; 0x48
 8002404:	e00c      	b.n	8002420 <convertToStucture+0x54>
			tempData.heatingCycle[i][j] = 0;
 8002406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800240e:	441a      	add	r2, r3
 8002410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002412:	4413      	add	r3, r2
 8002414:	3b3b      	subs	r3, #59	; 0x3b
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 2; j++)
 800241a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241c:	3301      	adds	r3, #1
 800241e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002422:	2b01      	cmp	r3, #1
 8002424:	ddef      	ble.n	8002406 <convertToStucture+0x3a>
	for (int i = 0; i < 5; i++)
 8002426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002428:	3301      	adds	r3, #1
 800242a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800242c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242e:	2b04      	cmp	r3, #4
 8002430:	dde6      	ble.n	8002400 <convertToStucture+0x34>

	//przewin do ' ' i pobierz komendę do buffora, aby ją porównać
	while ((buffor[i++] = *msg++) != ' ')
 8002432:	bf00      	nop
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800243e:	1c51      	adds	r1, r2, #1
 8002440:	f887 1057 	strb.w	r1, [r7, #87]	; 0x57
 8002444:	7819      	ldrb	r1, [r3, #0]
 8002446:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800244a:	4413      	add	r3, r2
 800244c:	f803 1c20 	strb.w	r1, [r3, #-32]
 8002450:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002454:	4413      	add	r3, r2
 8002456:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800245a:	2b20      	cmp	r3, #32
 800245c:	d1ea      	bne.n	8002434 <convertToStucture+0x68>
		;
	//-----------odszyfrowanie komend--------------
	if (strncmp((char*) buffor, "NEW", 3) == 0) { //------------NEW---------
 800245e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002462:	2203      	movs	r2, #3
 8002464:	4971      	ldr	r1, [pc, #452]	; (800262c <convertToStucture+0x260>)
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fbb7 	bl	8002bda <strncmp>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d15a      	bne.n	8002528 <convertToStucture+0x15c>
		//stworzenie nowego programu na liscie

		msg = przewinDo(msg, '[');
 8002472:	215b      	movs	r1, #91	; 0x5b
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f8e5 	bl	8002644 <przewinDo>
 800247a:	6078      	str	r0, [r7, #4]
		uint8_t i = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		while (!(*(++msg) == ']'))
 8002482:	e00c      	b.n	800249e <convertToStucture+0xd2>
			tempData.name[i++] = *msg; // tymczasowa nazwa
 8002484:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800248e:	4619      	mov	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002498:	440b      	add	r3, r1
 800249a:	f803 2c4f 	strb.w	r2, [r3, #-79]
		while (!(*(++msg) == ']'))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3301      	adds	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b5d      	cmp	r3, #93	; 0x5d
 80024aa:	d1eb      	bne.n	8002484 <convertToStucture+0xb8>
//----------odszyfrowanie temperatur----------
		for (uint8_t i = 0; i < 5; i++) {
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80024b2:	e00d      	b.n	80024d0 <convertToStucture+0x104>
			msg = readTemperature(msg, &tempData, i);
 80024b4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8d4 	bl	800266c <readTemperature>
 80024c4:	6078      	str	r0, [r7, #4]
		for (uint8_t i = 0; i < 5; i++) {
 80024c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80024ca:	3301      	adds	r3, #1
 80024cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80024d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d9ed      	bls.n	80024b4 <convertToStucture+0xe8>
		}
//----------nadanie nowego ID------------
		tempData.ID = ID;
 80024d8:	4b55      	ldr	r3, [pc, #340]	; (8002630 <convertToStucture+0x264>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	723b      	strb	r3, [r7, #8]
		ID++;
 80024de:	4b54      	ldr	r3, [pc, #336]	; (8002630 <convertToStucture+0x264>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b52      	ldr	r3, [pc, #328]	; (8002630 <convertToStucture+0x264>)
 80024e8:	701a      	strb	r2, [r3, #0]
		push_front(prog, tempData);
 80024ea:	466d      	mov	r5, sp
 80024ec:	f107 0410 	add.w	r4, r7, #16
 80024f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002500:	f107 0308 	add.w	r3, r7, #8
 8002504:	cb0c      	ldmia	r3, {r2, r3}
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	f000 f955 	bl	80027b6 <push_front>
		(*prog)->data = tempData;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461d      	mov	r5, r3
 8002512:	f107 0408 	add.w	r4, r7, #8
 8002516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002522:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002526:	e077      	b.n	8002618 <convertToStucture+0x24c>
	} else if (strncmp((char*) buffor, "LIST", 4) == 0) { //------------LIST--------------
 8002528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800252c:	2204      	movs	r2, #4
 800252e:	4941      	ldr	r1, [pc, #260]	; (8002634 <convertToStucture+0x268>)
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fb52 	bl	8002bda <strncmp>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <convertToStucture+0x17c>
		show(*prog);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f961 	bl	8002808 <show>
 8002546:	e067      	b.n	8002618 <convertToStucture+0x24c>
	} else if (strncmp((char*) buffor, "READ", 4) == 0) {
 8002548:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800254c:	2204      	movs	r2, #4
 800254e:	493a      	ldr	r1, [pc, #232]	; (8002638 <convertToStucture+0x26c>)
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fb42 	bl	8002bda <strncmp>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05d      	beq.n	8002618 <convertToStucture+0x24c>

	} else if (strncmp((char*) buffor, "SET", 3) == 0) { //-------------SET-------------
 800255c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002560:	2203      	movs	r2, #3
 8002562:	4936      	ldr	r1, [pc, #216]	; (800263c <convertToStucture+0x270>)
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fb38 	bl	8002bda <strncmp>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d14c      	bne.n	800260a <convertToStucture+0x23e>
		msg = przewinDo(msg, '[');
 8002570:	215b      	movs	r1, #91	; 0x5b
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f866 	bl	8002644 <przewinDo>
 8002578:	6078      	str	r0, [r7, #4]
		msg = conv(msg, &tempData.ID);
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f8dc 	bl	800273e <conv>
 8002586:	6078      	str	r0, [r7, #4]
		msg = przewinDo(msg, '[');
 8002588:	215b      	movs	r1, #91	; 0x5b
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f85a 	bl	8002644 <przewinDo>
 8002590:	6078      	str	r0, [r7, #4]
		uint8_t i = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		while (!(*(++msg) == ']'))
 8002598:	e00c      	b.n	80025b4 <convertToStucture+0x1e8>
			tempData.name[i++] = *msg; // tymczasowa nazwa
 800259a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 80025a4:	4619      	mov	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025ae:	440b      	add	r3, r1
 80025b0:	f803 2c4f 	strb.w	r2, [r3, #-79]
		while (!(*(++msg) == ']'))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3301      	adds	r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b5d      	cmp	r3, #93	; 0x5d
 80025c0:	d1eb      	bne.n	800259a <convertToStucture+0x1ce>
		//----------odszyfrowanie temperatur----------
		for (uint8_t i = 0; i < 5; i++) {
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80025c8:	e00d      	b.n	80025e6 <convertToStucture+0x21a>
			msg = readTemperature(msg, &tempData, i);
 80025ca:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f849 	bl	800266c <readTemperature>
 80025da:	6078      	str	r0, [r7, #4]
		for (uint8_t i = 0; i < 5; i++) {
 80025dc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80025e0:	3301      	adds	r3, #1
 80025e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80025e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d9ed      	bls.n	80025ca <convertToStucture+0x1fe>
		}
		(*prog)->data = tempData;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461d      	mov	r5, r3
 80025f4:	f107 0408 	add.w	r4, r7, #8
 80025f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002600:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002604:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002608:	e006      	b.n	8002618 <convertToStucture+0x24c>
	} else if (strncmp((char*) buffor, "ACTIVE", 6) == 0) { //----------ACTIVE-------------
 800260a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800260e:	2206      	movs	r2, #6
 8002610:	490b      	ldr	r1, [pc, #44]	; (8002640 <convertToStucture+0x274>)
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fae1 	bl	8002bda <strncmp>

	}
	//--------przewin msg do konca------------
	msg = przewinDo(msg, '\0');
 8002618:	2100      	movs	r1, #0
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f812 	bl	8002644 <przewinDo>
 8002620:	6078      	str	r0, [r7, #4]
}
 8002622:	bf00      	nop
 8002624:	3758      	adds	r7, #88	; 0x58
 8002626:	46bd      	mov	sp, r7
 8002628:	bdb0      	pop	{r4, r5, r7, pc}
 800262a:	bf00      	nop
 800262c:	080033e0 	.word	0x080033e0
 8002630:	20000200 	.word	0x20000200
 8002634:	080033e4 	.word	0x080033e4
 8002638:	080033ec 	.word	0x080033ec
 800263c:	080033f4 	.word	0x080033f4
 8002640:	080033f8 	.word	0x080033f8

08002644 <przewinDo>:
uint8_t* przewinDo(uint8_t *msg, uint8_t znak) {
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
	while (!(*(++msg) == znak))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3301      	adds	r3, #1
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	429a      	cmp	r2, r3
 800265e:	d1f7      	bne.n	8002650 <przewinDo+0xc>
		;
	return msg;
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <readTemperature>:
uint8_t* readTemperature(uint8_t *msg, Subroutine *dataTemp,
		uint8_t currentCycle) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	4613      	mov	r3, r2
 8002678:	71fb      	strb	r3, [r7, #7]
	//--------jezeli faktycznieeee poprawnie uzyte----------
	if ((*msg) != '\0') {
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d04f      	beq.n	8002722 <readTemperature+0xb6>
		//-------przewiń do S------
		if (strstr((char*) msg, "S")) {
 8002682:	2153      	movs	r1, #83	; 0x53
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fa9b 	bl	8002bc0 <strchr>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d042      	beq.n	8002716 <readTemperature+0xaa>
			while ((*msg++) != 'S')
 8002690:	bf00      	nop
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	60fa      	str	r2, [r7, #12]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b53      	cmp	r3, #83	; 0x53
 800269c:	d1f9      	bne.n	8002692 <readTemperature+0x26>
				;
			//-------PID lub dwustawna--------
			dataTemp->regType = *msg++ == 0 ? false : true;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	60fa      	str	r2, [r7, #12]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f883 2020 	strb.w	r2, [r3, #32]
		}
		//-------Wypełnienie cykli--------

		/*tymczasowa convna temp służy do
		 zamienienia kilkucyfrowego ciągu znaków w liczbę*/
		while (*msg != ';') {
 80026b6:	e02e      	b.n	8002716 <readTemperature+0xaa>

			//-----Pobranie temperatury------
			if (*msg == 'T') {
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b54      	cmp	r3, #84	; 0x54
 80026be:	d10b      	bne.n	80026d8 <readTemperature+0x6c>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][0]);
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	3308      	adds	r3, #8
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4413      	add	r3, r2
 80026ca:	3305      	adds	r3, #5
 80026cc:	4619      	mov	r1, r3
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f835 	bl	800273e <conv>
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	e01e      	b.n	8002716 <readTemperature+0xaa>

				//---------Pobranie czasu-------
			} else if (*msg == 't') {
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b74      	cmp	r3, #116	; 0x74
 80026de:	d10b      	bne.n	80026f8 <readTemperature+0x8c>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][1]);
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	3311      	adds	r3, #17
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	4413      	add	r3, r2
 80026ea:	3305      	adds	r3, #5
 80026ec:	4619      	mov	r1, r3
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f825 	bl	800273e <conv>
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	e00e      	b.n	8002716 <readTemperature+0xaa>
			} else if (*msg == 'H') { //histereza
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b48      	cmp	r3, #72	; 0x48
 80026fe:	d00a      	beq.n	8002716 <readTemperature+0xaa>

			} else if (*msg == 'P') {
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b50      	cmp	r3, #80	; 0x50
 8002706:	d10b      	bne.n	8002720 <readTemperature+0xb4>
				msg = conv(msg, &dataTemp->pumpingTime);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	331f      	adds	r3, #31
 800270c:	4619      	mov	r1, r3
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f815 	bl	800273e <conv>
 8002714:	60f8      	str	r0, [r7, #12]
		while (*msg != ';') {
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b3b      	cmp	r3, #59	; 0x3b
 800271c:	d1cc      	bne.n	80026b8 <readTemperature+0x4c>
 800271e:	e000      	b.n	8002722 <readTemperature+0xb6>
			} else
				break;
 8002720:	bf00      	nop

		}
	}
	return (*msg) != '\0' ? ++msg : msg; //zwroc wskaznik w ostatnim polozeniu
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <readTemperature+0xc8>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3301      	adds	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	e000      	b.n	8002736 <readTemperature+0xca>
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <conv>:
uint8_t* conv(uint8_t *msg, uint8_t *digit) {
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
	uint8_t temp[3] = { 'a' };
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	2100      	movs	r1, #0
 800274e:	460a      	mov	r2, r1
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	460a      	mov	r2, r1
 8002754:	709a      	strb	r2, [r3, #2]
 8002756:	2361      	movs	r3, #97	; 0x61
 8002758:	733b      	strb	r3, [r7, #12]
	uint8_t i;
	++msg;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3301      	adds	r3, #1
 800275e:	607b      	str	r3, [r7, #4]
	for (i = 0; isdigit(*msg); i++) {
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e00d      	b.n	8002782 <conv+0x44>
		temp[i] = *msg++;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	7819      	ldrb	r1, [r3, #0]
 8002770:	f107 0310 	add.w	r3, r7, #16
 8002774:	4413      	add	r3, r2
 8002776:	460a      	mov	r2, r1
 8002778:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (i = 0; isdigit(*msg); i++) {
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	3301      	adds	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	f000 f90f 	bl	80029a4 <__locale_ctype_ptr>
 8002786:	4602      	mov	r2, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e5      	bne.n	8002766 <conv+0x28>
	}
	*digit = atoi((char*) temp);
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f8ce 	bl	8002940 <atoi>
 80027a4:	4603      	mov	r3, r0
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	701a      	strb	r2, [r3, #0]
	return msg;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <push_front>:
void push_front(List **head, Subroutine data) {
 80027b6:	b082      	sub	sp, #8
 80027b8:	b5b0      	push	{r4, r5, r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	f107 0120 	add.w	r1, r7, #32
 80027c4:	e881 000c 	stmia.w	r1, {r2, r3}
	List *current;
	current = (List*) malloc(sizeof(List));
 80027c8:	2038      	movs	r0, #56	; 0x38
 80027ca:	f000 f8f9 	bl	80029c0 <malloc>
 80027ce:	4603      	mov	r3, r0
 80027d0:	60fb      	str	r3, [r7, #12]

	current->data = data;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	461c      	mov	r4, r3
 80027d6:	f107 0520 	add.w	r5, r7, #32
 80027da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	current->next = (*head);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
	*head = current;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002802:	b002      	add	sp, #8
 8002804:	4770      	bx	lr
	...

08002808 <show>:

		current->next = (List*) malloc(sizeof(List));
		current->next->next = NULL;
	}
}
void show(List *head) {
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b08d      	sub	sp, #52	; 0x34
 800280c:	af02      	add	r7, sp, #8
 800280e:	6078      	str	r0, [r7, #4]
	char tekst1[] = "List is empty\n\r";
 8002810:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <show+0xec>)
 8002812:	f107 040c 	add.w	r4, r7, #12
 8002816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (head == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <show+0x2a>
		HAL_UART_Transmit_DMA(&huart2, tekst1, sizeof(tekst1));
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	2210      	movs	r2, #16
 8002828:	4619      	mov	r1, r3
 800282a:	4833      	ldr	r0, [pc, #204]	; (80028f8 <show+0xf0>)
 800282c:	f7ff f940 	bl	8001ab0 <HAL_UART_Transmit_DMA>
		} while (current != NULL);

		HAL_UART_Transmit_DMA(&huart2, wysylanaWiadomosc, strlen((char*)wysylanaWiadomosc));
		free(wysylanaWiadomosc);
	}
}
 8002830:	e05b      	b.n	80028ea <show+0xe2>
		List *current = head;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
						list_size(head) * sizeof(uint8_t)
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f866 	bl	8002908 <list_size>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
				(uint8_t*) malloc(
 8002840:	2326      	movs	r3, #38	; 0x26
 8002842:	fb03 f302 	mul.w	r3, r3, r2
		wysylanaWiadomosc =
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f8ba 	bl	80029c0 <malloc>
 800284c:	4603      	mov	r3, r0
 800284e:	61fb      	str	r3, [r7, #28]
		uint8_t i=0;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if(i==0){
 8002856:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800285a:	2b00      	cmp	r3, #0
 800285c:	d114      	bne.n	8002888 <show+0x80>
					current->data.ID, current->data.name,
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*) wysylanaWiadomosc,
 8002862:	4619      	mov	r1, r3
					current->data.ID, current->data.name,
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
					current->data.regType == 1 ? "PID" : "Dwustawna");
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f893 3020 	ldrb.w	r3, [r3, #32]
			sprintf((char*) wysylanaWiadomosc,
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <show+0x6e>
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <show+0xf4>)
 8002874:	e000      	b.n	8002878 <show+0x70>
 8002876:	4b22      	ldr	r3, [pc, #136]	; (8002900 <show+0xf8>)
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	460a      	mov	r2, r1
 800287e:	4921      	ldr	r1, [pc, #132]	; (8002904 <show+0xfc>)
 8002880:	69f8      	ldr	r0, [r7, #28]
 8002882:	f000 f97d 	bl	8002b80 <siprintf>
 8002886:	e018      	b.n	80028ba <show+0xb2>
				sprintf((char*) wysylanaWiadomosc+strlen((char*)wysylanaWiadomosc),
 8002888:	69f8      	ldr	r0, [r7, #28]
 800288a:	f7fd fc5f 	bl	800014c <strlen>
 800288e:	4602      	mov	r2, r0
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	1898      	adds	r0, r3, r2
									current->data.ID, current->data.name,
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	781b      	ldrb	r3, [r3, #0]
				sprintf((char*) wysylanaWiadomosc+strlen((char*)wysylanaWiadomosc),
 8002898:	4619      	mov	r1, r3
									current->data.ID, current->data.name,
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	1c5a      	adds	r2, r3, #1
									current->data.regType == 1 ? "PID" : "Dwustawna");
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	f893 3020 	ldrb.w	r3, [r3, #32]
				sprintf((char*) wysylanaWiadomosc+strlen((char*)wysylanaWiadomosc),
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <show+0xa4>
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <show+0xf4>)
 80028aa:	e000      	b.n	80028ae <show+0xa6>
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <show+0xf8>)
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	460a      	mov	r2, r1
 80028b4:	4913      	ldr	r1, [pc, #76]	; (8002904 <show+0xfc>)
 80028b6:	f000 f963 	bl	8002b80 <siprintf>
			current = current->next;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
			i++;
 80028c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028c4:	3301      	adds	r3, #1
 80028c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		} while (current != NULL);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1c2      	bne.n	8002856 <show+0x4e>
		HAL_UART_Transmit_DMA(&huart2, wysylanaWiadomosc, strlen((char*)wysylanaWiadomosc));
 80028d0:	69f8      	ldr	r0, [r7, #28]
 80028d2:	f7fd fc3b 	bl	800014c <strlen>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	69f9      	ldr	r1, [r7, #28]
 80028de:	4806      	ldr	r0, [pc, #24]	; (80028f8 <show+0xf0>)
 80028e0:	f7ff f8e6 	bl	8001ab0 <HAL_UART_Transmit_DMA>
		free(wysylanaWiadomosc);
 80028e4:	69f8      	ldr	r0, [r7, #28]
 80028e6:	f000 f873 	bl	80029d0 <free>
}
 80028ea:	bf00      	nop
 80028ec:	372c      	adds	r7, #44	; 0x2c
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}
 80028f2:	bf00      	nop
 80028f4:	08003438 	.word	0x08003438
 80028f8:	20000324 	.word	0x20000324
 80028fc:	08003400 	.word	0x08003400
 8002900:	08003404 	.word	0x08003404
 8002904:	08003410 	.word	0x08003410

08002908 <list_size>:
uint16_t list_size(List *head) {
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	uint16_t counter = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	81fb      	strh	r3, [r7, #14]
	if (head == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <list_size+0x16>
		return counter;
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	e00b      	b.n	8002936 <list_size+0x2e>
	else {
		List *current = head;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60bb      	str	r3, [r7, #8]
		do {
			counter++;
 8002922:	89fb      	ldrh	r3, [r7, #14]
 8002924:	3301      	adds	r3, #1
 8002926:	81fb      	strh	r3, [r7, #14]
			current = current->next;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	60bb      	str	r3, [r7, #8]
		} while (current != NULL);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f6      	bne.n	8002922 <list_size+0x1a>
	}
	return counter;
 8002934:	89fb      	ldrh	r3, [r7, #14]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <atoi>:
 8002940:	220a      	movs	r2, #10
 8002942:	2100      	movs	r1, #0
 8002944:	f000 b9d6 	b.w	8002cf4 <strtol>

08002948 <__errno>:
 8002948:	4b01      	ldr	r3, [pc, #4]	; (8002950 <__errno+0x8>)
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2000000c 	.word	0x2000000c

08002954 <__libc_init_array>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	2500      	movs	r5, #0
 8002958:	4e0c      	ldr	r6, [pc, #48]	; (800298c <__libc_init_array+0x38>)
 800295a:	4c0d      	ldr	r4, [pc, #52]	; (8002990 <__libc_init_array+0x3c>)
 800295c:	1ba4      	subs	r4, r4, r6
 800295e:	10a4      	asrs	r4, r4, #2
 8002960:	42a5      	cmp	r5, r4
 8002962:	d109      	bne.n	8002978 <__libc_init_array+0x24>
 8002964:	f000 fd26 	bl	80033b4 <_init>
 8002968:	2500      	movs	r5, #0
 800296a:	4e0a      	ldr	r6, [pc, #40]	; (8002994 <__libc_init_array+0x40>)
 800296c:	4c0a      	ldr	r4, [pc, #40]	; (8002998 <__libc_init_array+0x44>)
 800296e:	1ba4      	subs	r4, r4, r6
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	42a5      	cmp	r5, r4
 8002974:	d105      	bne.n	8002982 <__libc_init_array+0x2e>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800297c:	4798      	blx	r3
 800297e:	3501      	adds	r5, #1
 8002980:	e7ee      	b.n	8002960 <__libc_init_array+0xc>
 8002982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002986:	4798      	blx	r3
 8002988:	3501      	adds	r5, #1
 800298a:	e7f2      	b.n	8002972 <__libc_init_array+0x1e>
 800298c:	080035a0 	.word	0x080035a0
 8002990:	080035a0 	.word	0x080035a0
 8002994:	080035a0 	.word	0x080035a0
 8002998:	080035a4 	.word	0x080035a4

0800299c <__locale_ctype_ptr_l>:
 800299c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80029a0:	4770      	bx	lr
	...

080029a4 <__locale_ctype_ptr>:
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <__locale_ctype_ptr+0x14>)
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <__locale_ctype_ptr+0x18>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf08      	it	eq
 80029b0:	4613      	moveq	r3, r2
 80029b2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80029b6:	4770      	bx	lr
 80029b8:	2000000c 	.word	0x2000000c
 80029bc:	20000070 	.word	0x20000070

080029c0 <malloc>:
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <malloc+0xc>)
 80029c2:	4601      	mov	r1, r0
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f000 b871 	b.w	8002aac <_malloc_r>
 80029ca:	bf00      	nop
 80029cc:	2000000c 	.word	0x2000000c

080029d0 <free>:
 80029d0:	4b02      	ldr	r3, [pc, #8]	; (80029dc <free+0xc>)
 80029d2:	4601      	mov	r1, r0
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	f000 b81d 	b.w	8002a14 <_free_r>
 80029da:	bf00      	nop
 80029dc:	2000000c 	.word	0x2000000c

080029e0 <__ascii_mbtowc>:
 80029e0:	b082      	sub	sp, #8
 80029e2:	b901      	cbnz	r1, 80029e6 <__ascii_mbtowc+0x6>
 80029e4:	a901      	add	r1, sp, #4
 80029e6:	b142      	cbz	r2, 80029fa <__ascii_mbtowc+0x1a>
 80029e8:	b14b      	cbz	r3, 80029fe <__ascii_mbtowc+0x1e>
 80029ea:	7813      	ldrb	r3, [r2, #0]
 80029ec:	600b      	str	r3, [r1, #0]
 80029ee:	7812      	ldrb	r2, [r2, #0]
 80029f0:	1c10      	adds	r0, r2, #0
 80029f2:	bf18      	it	ne
 80029f4:	2001      	movne	r0, #1
 80029f6:	b002      	add	sp, #8
 80029f8:	4770      	bx	lr
 80029fa:	4610      	mov	r0, r2
 80029fc:	e7fb      	b.n	80029f6 <__ascii_mbtowc+0x16>
 80029fe:	f06f 0001 	mvn.w	r0, #1
 8002a02:	e7f8      	b.n	80029f6 <__ascii_mbtowc+0x16>

08002a04 <memset>:
 8002a04:	4603      	mov	r3, r0
 8002a06:	4402      	add	r2, r0
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <memset+0xa>
 8002a0c:	4770      	bx	lr
 8002a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a12:	e7f9      	b.n	8002a08 <memset+0x4>

08002a14 <_free_r>:
 8002a14:	b538      	push	{r3, r4, r5, lr}
 8002a16:	4605      	mov	r5, r0
 8002a18:	2900      	cmp	r1, #0
 8002a1a:	d043      	beq.n	8002aa4 <_free_r+0x90>
 8002a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a20:	1f0c      	subs	r4, r1, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bfb8      	it	lt
 8002a26:	18e4      	addlt	r4, r4, r3
 8002a28:	f000 f987 	bl	8002d3a <__malloc_lock>
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <_free_r+0x94>)
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	4610      	mov	r0, r2
 8002a32:	b933      	cbnz	r3, 8002a42 <_free_r+0x2e>
 8002a34:	6063      	str	r3, [r4, #4]
 8002a36:	6014      	str	r4, [r2, #0]
 8002a38:	4628      	mov	r0, r5
 8002a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a3e:	f000 b97d 	b.w	8002d3c <__malloc_unlock>
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	d90b      	bls.n	8002a5e <_free_r+0x4a>
 8002a46:	6821      	ldr	r1, [r4, #0]
 8002a48:	1862      	adds	r2, r4, r1
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	bf01      	itttt	eq
 8002a4e:	681a      	ldreq	r2, [r3, #0]
 8002a50:	685b      	ldreq	r3, [r3, #4]
 8002a52:	1852      	addeq	r2, r2, r1
 8002a54:	6022      	streq	r2, [r4, #0]
 8002a56:	6063      	str	r3, [r4, #4]
 8002a58:	6004      	str	r4, [r0, #0]
 8002a5a:	e7ed      	b.n	8002a38 <_free_r+0x24>
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	b10a      	cbz	r2, 8002a66 <_free_r+0x52>
 8002a62:	42a2      	cmp	r2, r4
 8002a64:	d9fa      	bls.n	8002a5c <_free_r+0x48>
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	1858      	adds	r0, r3, r1
 8002a6a:	42a0      	cmp	r0, r4
 8002a6c:	d10b      	bne.n	8002a86 <_free_r+0x72>
 8002a6e:	6820      	ldr	r0, [r4, #0]
 8002a70:	4401      	add	r1, r0
 8002a72:	1858      	adds	r0, r3, r1
 8002a74:	4282      	cmp	r2, r0
 8002a76:	6019      	str	r1, [r3, #0]
 8002a78:	d1de      	bne.n	8002a38 <_free_r+0x24>
 8002a7a:	6810      	ldr	r0, [r2, #0]
 8002a7c:	6852      	ldr	r2, [r2, #4]
 8002a7e:	4401      	add	r1, r0
 8002a80:	6019      	str	r1, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	e7d8      	b.n	8002a38 <_free_r+0x24>
 8002a86:	d902      	bls.n	8002a8e <_free_r+0x7a>
 8002a88:	230c      	movs	r3, #12
 8002a8a:	602b      	str	r3, [r5, #0]
 8002a8c:	e7d4      	b.n	8002a38 <_free_r+0x24>
 8002a8e:	6820      	ldr	r0, [r4, #0]
 8002a90:	1821      	adds	r1, r4, r0
 8002a92:	428a      	cmp	r2, r1
 8002a94:	bf01      	itttt	eq
 8002a96:	6811      	ldreq	r1, [r2, #0]
 8002a98:	6852      	ldreq	r2, [r2, #4]
 8002a9a:	1809      	addeq	r1, r1, r0
 8002a9c:	6021      	streq	r1, [r4, #0]
 8002a9e:	6062      	str	r2, [r4, #4]
 8002aa0:	605c      	str	r4, [r3, #4]
 8002aa2:	e7c9      	b.n	8002a38 <_free_r+0x24>
 8002aa4:	bd38      	pop	{r3, r4, r5, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000204 	.word	0x20000204

08002aac <_malloc_r>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	1ccd      	adds	r5, r1, #3
 8002ab0:	f025 0503 	bic.w	r5, r5, #3
 8002ab4:	3508      	adds	r5, #8
 8002ab6:	2d0c      	cmp	r5, #12
 8002ab8:	bf38      	it	cc
 8002aba:	250c      	movcc	r5, #12
 8002abc:	2d00      	cmp	r5, #0
 8002abe:	4606      	mov	r6, r0
 8002ac0:	db01      	blt.n	8002ac6 <_malloc_r+0x1a>
 8002ac2:	42a9      	cmp	r1, r5
 8002ac4:	d903      	bls.n	8002ace <_malloc_r+0x22>
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	6033      	str	r3, [r6, #0]
 8002aca:	2000      	movs	r0, #0
 8002acc:	bd70      	pop	{r4, r5, r6, pc}
 8002ace:	f000 f934 	bl	8002d3a <__malloc_lock>
 8002ad2:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <_malloc_r+0xac>)
 8002ad4:	6814      	ldr	r4, [r2, #0]
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	b991      	cbnz	r1, 8002b00 <_malloc_r+0x54>
 8002ada:	4c20      	ldr	r4, [pc, #128]	; (8002b5c <_malloc_r+0xb0>)
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	b91b      	cbnz	r3, 8002ae8 <_malloc_r+0x3c>
 8002ae0:	4630      	mov	r0, r6
 8002ae2:	f000 f83d 	bl	8002b60 <_sbrk_r>
 8002ae6:	6020      	str	r0, [r4, #0]
 8002ae8:	4629      	mov	r1, r5
 8002aea:	4630      	mov	r0, r6
 8002aec:	f000 f838 	bl	8002b60 <_sbrk_r>
 8002af0:	1c43      	adds	r3, r0, #1
 8002af2:	d124      	bne.n	8002b3e <_malloc_r+0x92>
 8002af4:	230c      	movs	r3, #12
 8002af6:	4630      	mov	r0, r6
 8002af8:	6033      	str	r3, [r6, #0]
 8002afa:	f000 f91f 	bl	8002d3c <__malloc_unlock>
 8002afe:	e7e4      	b.n	8002aca <_malloc_r+0x1e>
 8002b00:	680b      	ldr	r3, [r1, #0]
 8002b02:	1b5b      	subs	r3, r3, r5
 8002b04:	d418      	bmi.n	8002b38 <_malloc_r+0x8c>
 8002b06:	2b0b      	cmp	r3, #11
 8002b08:	d90f      	bls.n	8002b2a <_malloc_r+0x7e>
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	18cc      	adds	r4, r1, r3
 8002b0e:	50cd      	str	r5, [r1, r3]
 8002b10:	4630      	mov	r0, r6
 8002b12:	f000 f913 	bl	8002d3c <__malloc_unlock>
 8002b16:	f104 000b 	add.w	r0, r4, #11
 8002b1a:	1d23      	adds	r3, r4, #4
 8002b1c:	f020 0007 	bic.w	r0, r0, #7
 8002b20:	1ac3      	subs	r3, r0, r3
 8002b22:	d0d3      	beq.n	8002acc <_malloc_r+0x20>
 8002b24:	425a      	negs	r2, r3
 8002b26:	50e2      	str	r2, [r4, r3]
 8002b28:	e7d0      	b.n	8002acc <_malloc_r+0x20>
 8002b2a:	684b      	ldr	r3, [r1, #4]
 8002b2c:	428c      	cmp	r4, r1
 8002b2e:	bf16      	itet	ne
 8002b30:	6063      	strne	r3, [r4, #4]
 8002b32:	6013      	streq	r3, [r2, #0]
 8002b34:	460c      	movne	r4, r1
 8002b36:	e7eb      	b.n	8002b10 <_malloc_r+0x64>
 8002b38:	460c      	mov	r4, r1
 8002b3a:	6849      	ldr	r1, [r1, #4]
 8002b3c:	e7cc      	b.n	8002ad8 <_malloc_r+0x2c>
 8002b3e:	1cc4      	adds	r4, r0, #3
 8002b40:	f024 0403 	bic.w	r4, r4, #3
 8002b44:	42a0      	cmp	r0, r4
 8002b46:	d005      	beq.n	8002b54 <_malloc_r+0xa8>
 8002b48:	1a21      	subs	r1, r4, r0
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	f000 f808 	bl	8002b60 <_sbrk_r>
 8002b50:	3001      	adds	r0, #1
 8002b52:	d0cf      	beq.n	8002af4 <_malloc_r+0x48>
 8002b54:	6025      	str	r5, [r4, #0]
 8002b56:	e7db      	b.n	8002b10 <_malloc_r+0x64>
 8002b58:	20000204 	.word	0x20000204
 8002b5c:	20000208 	.word	0x20000208

08002b60 <_sbrk_r>:
 8002b60:	b538      	push	{r3, r4, r5, lr}
 8002b62:	2300      	movs	r3, #0
 8002b64:	4c05      	ldr	r4, [pc, #20]	; (8002b7c <_sbrk_r+0x1c>)
 8002b66:	4605      	mov	r5, r0
 8002b68:	4608      	mov	r0, r1
 8002b6a:	6023      	str	r3, [r4, #0]
 8002b6c:	f7fd fc8e 	bl	800048c <_sbrk>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d102      	bne.n	8002b7a <_sbrk_r+0x1a>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	b103      	cbz	r3, 8002b7a <_sbrk_r+0x1a>
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	20000368 	.word	0x20000368

08002b80 <siprintf>:
 8002b80:	b40e      	push	{r1, r2, r3}
 8002b82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b86:	b500      	push	{lr}
 8002b88:	b09c      	sub	sp, #112	; 0x70
 8002b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8002b8c:	9002      	str	r0, [sp, #8]
 8002b8e:	9006      	str	r0, [sp, #24]
 8002b90:	9107      	str	r1, [sp, #28]
 8002b92:	9104      	str	r1, [sp, #16]
 8002b94:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <siprintf+0x38>)
 8002b96:	4909      	ldr	r1, [pc, #36]	; (8002bbc <siprintf+0x3c>)
 8002b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b9c:	9105      	str	r1, [sp, #20]
 8002b9e:	6800      	ldr	r0, [r0, #0]
 8002ba0:	a902      	add	r1, sp, #8
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	f000 f926 	bl	8002df4 <_svfiprintf_r>
 8002ba8:	2200      	movs	r2, #0
 8002baa:	9b02      	ldr	r3, [sp, #8]
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	b01c      	add	sp, #112	; 0x70
 8002bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bb4:	b003      	add	sp, #12
 8002bb6:	4770      	bx	lr
 8002bb8:	2000000c 	.word	0x2000000c
 8002bbc:	ffff0208 	.word	0xffff0208

08002bc0 <strchr>:
 8002bc0:	b2c9      	uxtb	r1, r1
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bc8:	b11a      	cbz	r2, 8002bd2 <strchr+0x12>
 8002bca:	428a      	cmp	r2, r1
 8002bcc:	d1f9      	bne.n	8002bc2 <strchr+0x2>
 8002bce:	4618      	mov	r0, r3
 8002bd0:	4770      	bx	lr
 8002bd2:	2900      	cmp	r1, #0
 8002bd4:	bf18      	it	ne
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	e7f9      	b.n	8002bce <strchr+0xe>

08002bda <strncmp>:
 8002bda:	b510      	push	{r4, lr}
 8002bdc:	b16a      	cbz	r2, 8002bfa <strncmp+0x20>
 8002bde:	3901      	subs	r1, #1
 8002be0:	1884      	adds	r4, r0, r2
 8002be2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002be6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d103      	bne.n	8002bf6 <strncmp+0x1c>
 8002bee:	42a0      	cmp	r0, r4
 8002bf0:	d001      	beq.n	8002bf6 <strncmp+0x1c>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f5      	bne.n	8002be2 <strncmp+0x8>
 8002bf6:	1a98      	subs	r0, r3, r2
 8002bf8:	bd10      	pop	{r4, pc}
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	e7fc      	b.n	8002bf8 <strncmp+0x1e>

08002bfe <_strtol_l.isra.0>:
 8002bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c02:	4680      	mov	r8, r0
 8002c04:	4689      	mov	r9, r1
 8002c06:	4692      	mov	sl, r2
 8002c08:	461e      	mov	r6, r3
 8002c0a:	460f      	mov	r7, r1
 8002c0c:	463d      	mov	r5, r7
 8002c0e:	9808      	ldr	r0, [sp, #32]
 8002c10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c14:	f7ff fec2 	bl	800299c <__locale_ctype_ptr_l>
 8002c18:	4420      	add	r0, r4
 8002c1a:	7843      	ldrb	r3, [r0, #1]
 8002c1c:	f013 0308 	ands.w	r3, r3, #8
 8002c20:	d132      	bne.n	8002c88 <_strtol_l.isra.0+0x8a>
 8002c22:	2c2d      	cmp	r4, #45	; 0x2d
 8002c24:	d132      	bne.n	8002c8c <_strtol_l.isra.0+0x8e>
 8002c26:	2201      	movs	r2, #1
 8002c28:	787c      	ldrb	r4, [r7, #1]
 8002c2a:	1cbd      	adds	r5, r7, #2
 8002c2c:	2e00      	cmp	r6, #0
 8002c2e:	d05d      	beq.n	8002cec <_strtol_l.isra.0+0xee>
 8002c30:	2e10      	cmp	r6, #16
 8002c32:	d109      	bne.n	8002c48 <_strtol_l.isra.0+0x4a>
 8002c34:	2c30      	cmp	r4, #48	; 0x30
 8002c36:	d107      	bne.n	8002c48 <_strtol_l.isra.0+0x4a>
 8002c38:	782b      	ldrb	r3, [r5, #0]
 8002c3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002c3e:	2b58      	cmp	r3, #88	; 0x58
 8002c40:	d14f      	bne.n	8002ce2 <_strtol_l.isra.0+0xe4>
 8002c42:	2610      	movs	r6, #16
 8002c44:	786c      	ldrb	r4, [r5, #1]
 8002c46:	3502      	adds	r5, #2
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	bf14      	ite	ne
 8002c4c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002c50:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002c54:	2700      	movs	r7, #0
 8002c56:	fbb1 fcf6 	udiv	ip, r1, r6
 8002c5a:	4638      	mov	r0, r7
 8002c5c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8002c60:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d817      	bhi.n	8002c98 <_strtol_l.isra.0+0x9a>
 8002c68:	461c      	mov	r4, r3
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	dd23      	ble.n	8002cb6 <_strtol_l.isra.0+0xb8>
 8002c6e:	1c7b      	adds	r3, r7, #1
 8002c70:	d007      	beq.n	8002c82 <_strtol_l.isra.0+0x84>
 8002c72:	4584      	cmp	ip, r0
 8002c74:	d31c      	bcc.n	8002cb0 <_strtol_l.isra.0+0xb2>
 8002c76:	d101      	bne.n	8002c7c <_strtol_l.isra.0+0x7e>
 8002c78:	45a6      	cmp	lr, r4
 8002c7a:	db19      	blt.n	8002cb0 <_strtol_l.isra.0+0xb2>
 8002c7c:	2701      	movs	r7, #1
 8002c7e:	fb00 4006 	mla	r0, r0, r6, r4
 8002c82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c86:	e7eb      	b.n	8002c60 <_strtol_l.isra.0+0x62>
 8002c88:	462f      	mov	r7, r5
 8002c8a:	e7bf      	b.n	8002c0c <_strtol_l.isra.0+0xe>
 8002c8c:	2c2b      	cmp	r4, #43	; 0x2b
 8002c8e:	bf04      	itt	eq
 8002c90:	1cbd      	addeq	r5, r7, #2
 8002c92:	787c      	ldrbeq	r4, [r7, #1]
 8002c94:	461a      	mov	r2, r3
 8002c96:	e7c9      	b.n	8002c2c <_strtol_l.isra.0+0x2e>
 8002c98:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002c9c:	2b19      	cmp	r3, #25
 8002c9e:	d801      	bhi.n	8002ca4 <_strtol_l.isra.0+0xa6>
 8002ca0:	3c37      	subs	r4, #55	; 0x37
 8002ca2:	e7e2      	b.n	8002c6a <_strtol_l.isra.0+0x6c>
 8002ca4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002ca8:	2b19      	cmp	r3, #25
 8002caa:	d804      	bhi.n	8002cb6 <_strtol_l.isra.0+0xb8>
 8002cac:	3c57      	subs	r4, #87	; 0x57
 8002cae:	e7dc      	b.n	8002c6a <_strtol_l.isra.0+0x6c>
 8002cb0:	f04f 37ff 	mov.w	r7, #4294967295
 8002cb4:	e7e5      	b.n	8002c82 <_strtol_l.isra.0+0x84>
 8002cb6:	1c7b      	adds	r3, r7, #1
 8002cb8:	d108      	bne.n	8002ccc <_strtol_l.isra.0+0xce>
 8002cba:	2322      	movs	r3, #34	; 0x22
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	f8c8 3000 	str.w	r3, [r8]
 8002cc2:	f1ba 0f00 	cmp.w	sl, #0
 8002cc6:	d107      	bne.n	8002cd8 <_strtol_l.isra.0+0xda>
 8002cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ccc:	b102      	cbz	r2, 8002cd0 <_strtol_l.isra.0+0xd2>
 8002cce:	4240      	negs	r0, r0
 8002cd0:	f1ba 0f00 	cmp.w	sl, #0
 8002cd4:	d0f8      	beq.n	8002cc8 <_strtol_l.isra.0+0xca>
 8002cd6:	b10f      	cbz	r7, 8002cdc <_strtol_l.isra.0+0xde>
 8002cd8:	f105 39ff 	add.w	r9, r5, #4294967295
 8002cdc:	f8ca 9000 	str.w	r9, [sl]
 8002ce0:	e7f2      	b.n	8002cc8 <_strtol_l.isra.0+0xca>
 8002ce2:	2430      	movs	r4, #48	; 0x30
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	d1af      	bne.n	8002c48 <_strtol_l.isra.0+0x4a>
 8002ce8:	2608      	movs	r6, #8
 8002cea:	e7ad      	b.n	8002c48 <_strtol_l.isra.0+0x4a>
 8002cec:	2c30      	cmp	r4, #48	; 0x30
 8002cee:	d0a3      	beq.n	8002c38 <_strtol_l.isra.0+0x3a>
 8002cf0:	260a      	movs	r6, #10
 8002cf2:	e7a9      	b.n	8002c48 <_strtol_l.isra.0+0x4a>

08002cf4 <strtol>:
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <strtol+0x24>)
 8002cf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cf8:	681c      	ldr	r4, [r3, #0]
 8002cfa:	4d08      	ldr	r5, [pc, #32]	; (8002d1c <strtol+0x28>)
 8002cfc:	6a23      	ldr	r3, [r4, #32]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf08      	it	eq
 8002d02:	462b      	moveq	r3, r5
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	460a      	mov	r2, r1
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7ff ff76 	bl	8002bfe <_strtol_l.isra.0>
 8002d12:	b003      	add	sp, #12
 8002d14:	bd30      	pop	{r4, r5, pc}
 8002d16:	bf00      	nop
 8002d18:	2000000c 	.word	0x2000000c
 8002d1c:	20000070 	.word	0x20000070

08002d20 <__ascii_wctomb>:
 8002d20:	b149      	cbz	r1, 8002d36 <__ascii_wctomb+0x16>
 8002d22:	2aff      	cmp	r2, #255	; 0xff
 8002d24:	bf8b      	itete	hi
 8002d26:	238a      	movhi	r3, #138	; 0x8a
 8002d28:	700a      	strbls	r2, [r1, #0]
 8002d2a:	6003      	strhi	r3, [r0, #0]
 8002d2c:	2001      	movls	r0, #1
 8002d2e:	bf88      	it	hi
 8002d30:	f04f 30ff 	movhi.w	r0, #4294967295
 8002d34:	4770      	bx	lr
 8002d36:	4608      	mov	r0, r1
 8002d38:	4770      	bx	lr

08002d3a <__malloc_lock>:
 8002d3a:	4770      	bx	lr

08002d3c <__malloc_unlock>:
 8002d3c:	4770      	bx	lr

08002d3e <__ssputs_r>:
 8002d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d42:	688e      	ldr	r6, [r1, #8]
 8002d44:	4682      	mov	sl, r0
 8002d46:	429e      	cmp	r6, r3
 8002d48:	460c      	mov	r4, r1
 8002d4a:	4690      	mov	r8, r2
 8002d4c:	4699      	mov	r9, r3
 8002d4e:	d837      	bhi.n	8002dc0 <__ssputs_r+0x82>
 8002d50:	898a      	ldrh	r2, [r1, #12]
 8002d52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d56:	d031      	beq.n	8002dbc <__ssputs_r+0x7e>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	6825      	ldr	r5, [r4, #0]
 8002d5c:	6909      	ldr	r1, [r1, #16]
 8002d5e:	1a6f      	subs	r7, r5, r1
 8002d60:	6965      	ldr	r5, [r4, #20]
 8002d62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d66:	fb95 f5f3 	sdiv	r5, r5, r3
 8002d6a:	f109 0301 	add.w	r3, r9, #1
 8002d6e:	443b      	add	r3, r7
 8002d70:	429d      	cmp	r5, r3
 8002d72:	bf38      	it	cc
 8002d74:	461d      	movcc	r5, r3
 8002d76:	0553      	lsls	r3, r2, #21
 8002d78:	d530      	bpl.n	8002ddc <__ssputs_r+0x9e>
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	f7ff fe96 	bl	8002aac <_malloc_r>
 8002d80:	4606      	mov	r6, r0
 8002d82:	b950      	cbnz	r0, 8002d9a <__ssputs_r+0x5c>
 8002d84:	230c      	movs	r3, #12
 8002d86:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8a:	f8ca 3000 	str.w	r3, [sl]
 8002d8e:	89a3      	ldrh	r3, [r4, #12]
 8002d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d94:	81a3      	strh	r3, [r4, #12]
 8002d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d9a:	463a      	mov	r2, r7
 8002d9c:	6921      	ldr	r1, [r4, #16]
 8002d9e:	f000 fab7 	bl	8003310 <memcpy>
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	6126      	str	r6, [r4, #16]
 8002db0:	443e      	add	r6, r7
 8002db2:	6026      	str	r6, [r4, #0]
 8002db4:	464e      	mov	r6, r9
 8002db6:	6165      	str	r5, [r4, #20]
 8002db8:	1bed      	subs	r5, r5, r7
 8002dba:	60a5      	str	r5, [r4, #8]
 8002dbc:	454e      	cmp	r6, r9
 8002dbe:	d900      	bls.n	8002dc2 <__ssputs_r+0x84>
 8002dc0:	464e      	mov	r6, r9
 8002dc2:	4632      	mov	r2, r6
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	f000 faad 	bl	8003326 <memmove>
 8002dcc:	68a3      	ldr	r3, [r4, #8]
 8002dce:	2000      	movs	r0, #0
 8002dd0:	1b9b      	subs	r3, r3, r6
 8002dd2:	60a3      	str	r3, [r4, #8]
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	441e      	add	r6, r3
 8002dd8:	6026      	str	r6, [r4, #0]
 8002dda:	e7dc      	b.n	8002d96 <__ssputs_r+0x58>
 8002ddc:	462a      	mov	r2, r5
 8002dde:	f000 fabb 	bl	8003358 <_realloc_r>
 8002de2:	4606      	mov	r6, r0
 8002de4:	2800      	cmp	r0, #0
 8002de6:	d1e2      	bne.n	8002dae <__ssputs_r+0x70>
 8002de8:	6921      	ldr	r1, [r4, #16]
 8002dea:	4650      	mov	r0, sl
 8002dec:	f7ff fe12 	bl	8002a14 <_free_r>
 8002df0:	e7c8      	b.n	8002d84 <__ssputs_r+0x46>
	...

08002df4 <_svfiprintf_r>:
 8002df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df8:	461d      	mov	r5, r3
 8002dfa:	898b      	ldrh	r3, [r1, #12]
 8002dfc:	b09d      	sub	sp, #116	; 0x74
 8002dfe:	061f      	lsls	r7, r3, #24
 8002e00:	4680      	mov	r8, r0
 8002e02:	460c      	mov	r4, r1
 8002e04:	4616      	mov	r6, r2
 8002e06:	d50f      	bpl.n	8002e28 <_svfiprintf_r+0x34>
 8002e08:	690b      	ldr	r3, [r1, #16]
 8002e0a:	b96b      	cbnz	r3, 8002e28 <_svfiprintf_r+0x34>
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	f7ff fe4d 	bl	8002aac <_malloc_r>
 8002e12:	6020      	str	r0, [r4, #0]
 8002e14:	6120      	str	r0, [r4, #16]
 8002e16:	b928      	cbnz	r0, 8002e24 <_svfiprintf_r+0x30>
 8002e18:	230c      	movs	r3, #12
 8002e1a:	f8c8 3000 	str.w	r3, [r8]
 8002e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e22:	e0c8      	b.n	8002fb6 <_svfiprintf_r+0x1c2>
 8002e24:	2340      	movs	r3, #64	; 0x40
 8002e26:	6163      	str	r3, [r4, #20]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e32:	2330      	movs	r3, #48	; 0x30
 8002e34:	f04f 0b01 	mov.w	fp, #1
 8002e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e3c:	9503      	str	r5, [sp, #12]
 8002e3e:	4637      	mov	r7, r6
 8002e40:	463d      	mov	r5, r7
 8002e42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002e46:	b10b      	cbz	r3, 8002e4c <_svfiprintf_r+0x58>
 8002e48:	2b25      	cmp	r3, #37	; 0x25
 8002e4a:	d13e      	bne.n	8002eca <_svfiprintf_r+0xd6>
 8002e4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002e50:	d00b      	beq.n	8002e6a <_svfiprintf_r+0x76>
 8002e52:	4653      	mov	r3, sl
 8002e54:	4632      	mov	r2, r6
 8002e56:	4621      	mov	r1, r4
 8002e58:	4640      	mov	r0, r8
 8002e5a:	f7ff ff70 	bl	8002d3e <__ssputs_r>
 8002e5e:	3001      	adds	r0, #1
 8002e60:	f000 80a4 	beq.w	8002fac <_svfiprintf_r+0x1b8>
 8002e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e66:	4453      	add	r3, sl
 8002e68:	9309      	str	r3, [sp, #36]	; 0x24
 8002e6a:	783b      	ldrb	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 809d 	beq.w	8002fac <_svfiprintf_r+0x1b8>
 8002e72:	2300      	movs	r3, #0
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e7c:	9304      	str	r3, [sp, #16]
 8002e7e:	9307      	str	r3, [sp, #28]
 8002e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e84:	931a      	str	r3, [sp, #104]	; 0x68
 8002e86:	462f      	mov	r7, r5
 8002e88:	2205      	movs	r2, #5
 8002e8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002e8e:	4850      	ldr	r0, [pc, #320]	; (8002fd0 <_svfiprintf_r+0x1dc>)
 8002e90:	f000 fa30 	bl	80032f4 <memchr>
 8002e94:	9b04      	ldr	r3, [sp, #16]
 8002e96:	b9d0      	cbnz	r0, 8002ece <_svfiprintf_r+0xda>
 8002e98:	06d9      	lsls	r1, r3, #27
 8002e9a:	bf44      	itt	mi
 8002e9c:	2220      	movmi	r2, #32
 8002e9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ea2:	071a      	lsls	r2, r3, #28
 8002ea4:	bf44      	itt	mi
 8002ea6:	222b      	movmi	r2, #43	; 0x2b
 8002ea8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002eac:	782a      	ldrb	r2, [r5, #0]
 8002eae:	2a2a      	cmp	r2, #42	; 0x2a
 8002eb0:	d015      	beq.n	8002ede <_svfiprintf_r+0xea>
 8002eb2:	462f      	mov	r7, r5
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	250a      	movs	r5, #10
 8002eb8:	9a07      	ldr	r2, [sp, #28]
 8002eba:	4639      	mov	r1, r7
 8002ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ec0:	3b30      	subs	r3, #48	; 0x30
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d94d      	bls.n	8002f62 <_svfiprintf_r+0x16e>
 8002ec6:	b1b8      	cbz	r0, 8002ef8 <_svfiprintf_r+0x104>
 8002ec8:	e00f      	b.n	8002eea <_svfiprintf_r+0xf6>
 8002eca:	462f      	mov	r7, r5
 8002ecc:	e7b8      	b.n	8002e40 <_svfiprintf_r+0x4c>
 8002ece:	4a40      	ldr	r2, [pc, #256]	; (8002fd0 <_svfiprintf_r+0x1dc>)
 8002ed0:	463d      	mov	r5, r7
 8002ed2:	1a80      	subs	r0, r0, r2
 8002ed4:	fa0b f000 	lsl.w	r0, fp, r0
 8002ed8:	4318      	orrs	r0, r3
 8002eda:	9004      	str	r0, [sp, #16]
 8002edc:	e7d3      	b.n	8002e86 <_svfiprintf_r+0x92>
 8002ede:	9a03      	ldr	r2, [sp, #12]
 8002ee0:	1d11      	adds	r1, r2, #4
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	9103      	str	r1, [sp, #12]
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	db01      	blt.n	8002eee <_svfiprintf_r+0xfa>
 8002eea:	9207      	str	r2, [sp, #28]
 8002eec:	e004      	b.n	8002ef8 <_svfiprintf_r+0x104>
 8002eee:	4252      	negs	r2, r2
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	9207      	str	r2, [sp, #28]
 8002ef6:	9304      	str	r3, [sp, #16]
 8002ef8:	783b      	ldrb	r3, [r7, #0]
 8002efa:	2b2e      	cmp	r3, #46	; 0x2e
 8002efc:	d10c      	bne.n	8002f18 <_svfiprintf_r+0x124>
 8002efe:	787b      	ldrb	r3, [r7, #1]
 8002f00:	2b2a      	cmp	r3, #42	; 0x2a
 8002f02:	d133      	bne.n	8002f6c <_svfiprintf_r+0x178>
 8002f04:	9b03      	ldr	r3, [sp, #12]
 8002f06:	3702      	adds	r7, #2
 8002f08:	1d1a      	adds	r2, r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	9203      	str	r2, [sp, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bfb8      	it	lt
 8002f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f16:	9305      	str	r3, [sp, #20]
 8002f18:	4d2e      	ldr	r5, [pc, #184]	; (8002fd4 <_svfiprintf_r+0x1e0>)
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	7839      	ldrb	r1, [r7, #0]
 8002f1e:	4628      	mov	r0, r5
 8002f20:	f000 f9e8 	bl	80032f4 <memchr>
 8002f24:	b138      	cbz	r0, 8002f36 <_svfiprintf_r+0x142>
 8002f26:	2340      	movs	r3, #64	; 0x40
 8002f28:	1b40      	subs	r0, r0, r5
 8002f2a:	fa03 f000 	lsl.w	r0, r3, r0
 8002f2e:	9b04      	ldr	r3, [sp, #16]
 8002f30:	3701      	adds	r7, #1
 8002f32:	4303      	orrs	r3, r0
 8002f34:	9304      	str	r3, [sp, #16]
 8002f36:	7839      	ldrb	r1, [r7, #0]
 8002f38:	2206      	movs	r2, #6
 8002f3a:	4827      	ldr	r0, [pc, #156]	; (8002fd8 <_svfiprintf_r+0x1e4>)
 8002f3c:	1c7e      	adds	r6, r7, #1
 8002f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f42:	f000 f9d7 	bl	80032f4 <memchr>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d038      	beq.n	8002fbc <_svfiprintf_r+0x1c8>
 8002f4a:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <_svfiprintf_r+0x1e8>)
 8002f4c:	bb13      	cbnz	r3, 8002f94 <_svfiprintf_r+0x1a0>
 8002f4e:	9b03      	ldr	r3, [sp, #12]
 8002f50:	3307      	adds	r3, #7
 8002f52:	f023 0307 	bic.w	r3, r3, #7
 8002f56:	3308      	adds	r3, #8
 8002f58:	9303      	str	r3, [sp, #12]
 8002f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f5c:	444b      	add	r3, r9
 8002f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f60:	e76d      	b.n	8002e3e <_svfiprintf_r+0x4a>
 8002f62:	fb05 3202 	mla	r2, r5, r2, r3
 8002f66:	2001      	movs	r0, #1
 8002f68:	460f      	mov	r7, r1
 8002f6a:	e7a6      	b.n	8002eba <_svfiprintf_r+0xc6>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	250a      	movs	r5, #10
 8002f70:	4619      	mov	r1, r3
 8002f72:	3701      	adds	r7, #1
 8002f74:	9305      	str	r3, [sp, #20]
 8002f76:	4638      	mov	r0, r7
 8002f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f7c:	3a30      	subs	r2, #48	; 0x30
 8002f7e:	2a09      	cmp	r2, #9
 8002f80:	d903      	bls.n	8002f8a <_svfiprintf_r+0x196>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0c8      	beq.n	8002f18 <_svfiprintf_r+0x124>
 8002f86:	9105      	str	r1, [sp, #20]
 8002f88:	e7c6      	b.n	8002f18 <_svfiprintf_r+0x124>
 8002f8a:	fb05 2101 	mla	r1, r5, r1, r2
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4607      	mov	r7, r0
 8002f92:	e7f0      	b.n	8002f76 <_svfiprintf_r+0x182>
 8002f94:	ab03      	add	r3, sp, #12
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	4622      	mov	r2, r4
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <_svfiprintf_r+0x1ec>)
 8002f9c:	a904      	add	r1, sp, #16
 8002f9e:	4640      	mov	r0, r8
 8002fa0:	f3af 8000 	nop.w
 8002fa4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002fa8:	4681      	mov	r9, r0
 8002faa:	d1d6      	bne.n	8002f5a <_svfiprintf_r+0x166>
 8002fac:	89a3      	ldrh	r3, [r4, #12]
 8002fae:	065b      	lsls	r3, r3, #25
 8002fb0:	f53f af35 	bmi.w	8002e1e <_svfiprintf_r+0x2a>
 8002fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fb6:	b01d      	add	sp, #116	; 0x74
 8002fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fbc:	ab03      	add	r3, sp, #12
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	4622      	mov	r2, r4
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <_svfiprintf_r+0x1ec>)
 8002fc4:	a904      	add	r1, sp, #16
 8002fc6:	4640      	mov	r0, r8
 8002fc8:	f000 f882 	bl	80030d0 <_printf_i>
 8002fcc:	e7ea      	b.n	8002fa4 <_svfiprintf_r+0x1b0>
 8002fce:	bf00      	nop
 8002fd0:	0800356b 	.word	0x0800356b
 8002fd4:	08003571 	.word	0x08003571
 8002fd8:	08003575 	.word	0x08003575
 8002fdc:	00000000 	.word	0x00000000
 8002fe0:	08002d3f 	.word	0x08002d3f

08002fe4 <_printf_common>:
 8002fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe8:	4691      	mov	r9, r2
 8002fea:	461f      	mov	r7, r3
 8002fec:	688a      	ldr	r2, [r1, #8]
 8002fee:	690b      	ldr	r3, [r1, #16]
 8002ff0:	4606      	mov	r6, r0
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	bfb8      	it	lt
 8002ff6:	4613      	movlt	r3, r2
 8002ff8:	f8c9 3000 	str.w	r3, [r9]
 8002ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003000:	460c      	mov	r4, r1
 8003002:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003006:	b112      	cbz	r2, 800300e <_printf_common+0x2a>
 8003008:	3301      	adds	r3, #1
 800300a:	f8c9 3000 	str.w	r3, [r9]
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	0699      	lsls	r1, r3, #26
 8003012:	bf42      	ittt	mi
 8003014:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003018:	3302      	addmi	r3, #2
 800301a:	f8c9 3000 	strmi.w	r3, [r9]
 800301e:	6825      	ldr	r5, [r4, #0]
 8003020:	f015 0506 	ands.w	r5, r5, #6
 8003024:	d107      	bne.n	8003036 <_printf_common+0x52>
 8003026:	f104 0a19 	add.w	sl, r4, #25
 800302a:	68e3      	ldr	r3, [r4, #12]
 800302c:	f8d9 2000 	ldr.w	r2, [r9]
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	42ab      	cmp	r3, r5
 8003034:	dc29      	bgt.n	800308a <_printf_common+0xa6>
 8003036:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800303a:	6822      	ldr	r2, [r4, #0]
 800303c:	3300      	adds	r3, #0
 800303e:	bf18      	it	ne
 8003040:	2301      	movne	r3, #1
 8003042:	0692      	lsls	r2, r2, #26
 8003044:	d42e      	bmi.n	80030a4 <_printf_common+0xc0>
 8003046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800304a:	4639      	mov	r1, r7
 800304c:	4630      	mov	r0, r6
 800304e:	47c0      	blx	r8
 8003050:	3001      	adds	r0, #1
 8003052:	d021      	beq.n	8003098 <_printf_common+0xb4>
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	68e5      	ldr	r5, [r4, #12]
 8003058:	f003 0306 	and.w	r3, r3, #6
 800305c:	2b04      	cmp	r3, #4
 800305e:	bf18      	it	ne
 8003060:	2500      	movne	r5, #0
 8003062:	f8d9 2000 	ldr.w	r2, [r9]
 8003066:	f04f 0900 	mov.w	r9, #0
 800306a:	bf08      	it	eq
 800306c:	1aad      	subeq	r5, r5, r2
 800306e:	68a3      	ldr	r3, [r4, #8]
 8003070:	6922      	ldr	r2, [r4, #16]
 8003072:	bf08      	it	eq
 8003074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003078:	4293      	cmp	r3, r2
 800307a:	bfc4      	itt	gt
 800307c:	1a9b      	subgt	r3, r3, r2
 800307e:	18ed      	addgt	r5, r5, r3
 8003080:	341a      	adds	r4, #26
 8003082:	454d      	cmp	r5, r9
 8003084:	d11a      	bne.n	80030bc <_printf_common+0xd8>
 8003086:	2000      	movs	r0, #0
 8003088:	e008      	b.n	800309c <_printf_common+0xb8>
 800308a:	2301      	movs	r3, #1
 800308c:	4652      	mov	r2, sl
 800308e:	4639      	mov	r1, r7
 8003090:	4630      	mov	r0, r6
 8003092:	47c0      	blx	r8
 8003094:	3001      	adds	r0, #1
 8003096:	d103      	bne.n	80030a0 <_printf_common+0xbc>
 8003098:	f04f 30ff 	mov.w	r0, #4294967295
 800309c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a0:	3501      	adds	r5, #1
 80030a2:	e7c2      	b.n	800302a <_printf_common+0x46>
 80030a4:	2030      	movs	r0, #48	; 0x30
 80030a6:	18e1      	adds	r1, r4, r3
 80030a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030b2:	4422      	add	r2, r4
 80030b4:	3302      	adds	r3, #2
 80030b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030ba:	e7c4      	b.n	8003046 <_printf_common+0x62>
 80030bc:	2301      	movs	r3, #1
 80030be:	4622      	mov	r2, r4
 80030c0:	4639      	mov	r1, r7
 80030c2:	4630      	mov	r0, r6
 80030c4:	47c0      	blx	r8
 80030c6:	3001      	adds	r0, #1
 80030c8:	d0e6      	beq.n	8003098 <_printf_common+0xb4>
 80030ca:	f109 0901 	add.w	r9, r9, #1
 80030ce:	e7d8      	b.n	8003082 <_printf_common+0x9e>

080030d0 <_printf_i>:
 80030d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80030d8:	460c      	mov	r4, r1
 80030da:	7e09      	ldrb	r1, [r1, #24]
 80030dc:	b085      	sub	sp, #20
 80030de:	296e      	cmp	r1, #110	; 0x6e
 80030e0:	4617      	mov	r7, r2
 80030e2:	4606      	mov	r6, r0
 80030e4:	4698      	mov	r8, r3
 80030e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030e8:	f000 80b3 	beq.w	8003252 <_printf_i+0x182>
 80030ec:	d822      	bhi.n	8003134 <_printf_i+0x64>
 80030ee:	2963      	cmp	r1, #99	; 0x63
 80030f0:	d036      	beq.n	8003160 <_printf_i+0x90>
 80030f2:	d80a      	bhi.n	800310a <_printf_i+0x3a>
 80030f4:	2900      	cmp	r1, #0
 80030f6:	f000 80b9 	beq.w	800326c <_printf_i+0x19c>
 80030fa:	2958      	cmp	r1, #88	; 0x58
 80030fc:	f000 8083 	beq.w	8003206 <_printf_i+0x136>
 8003100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003104:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003108:	e032      	b.n	8003170 <_printf_i+0xa0>
 800310a:	2964      	cmp	r1, #100	; 0x64
 800310c:	d001      	beq.n	8003112 <_printf_i+0x42>
 800310e:	2969      	cmp	r1, #105	; 0x69
 8003110:	d1f6      	bne.n	8003100 <_printf_i+0x30>
 8003112:	6820      	ldr	r0, [r4, #0]
 8003114:	6813      	ldr	r3, [r2, #0]
 8003116:	0605      	lsls	r5, r0, #24
 8003118:	f103 0104 	add.w	r1, r3, #4
 800311c:	d52a      	bpl.n	8003174 <_printf_i+0xa4>
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6011      	str	r1, [r2, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da03      	bge.n	800312e <_printf_i+0x5e>
 8003126:	222d      	movs	r2, #45	; 0x2d
 8003128:	425b      	negs	r3, r3
 800312a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800312e:	486f      	ldr	r0, [pc, #444]	; (80032ec <_printf_i+0x21c>)
 8003130:	220a      	movs	r2, #10
 8003132:	e039      	b.n	80031a8 <_printf_i+0xd8>
 8003134:	2973      	cmp	r1, #115	; 0x73
 8003136:	f000 809d 	beq.w	8003274 <_printf_i+0x1a4>
 800313a:	d808      	bhi.n	800314e <_printf_i+0x7e>
 800313c:	296f      	cmp	r1, #111	; 0x6f
 800313e:	d020      	beq.n	8003182 <_printf_i+0xb2>
 8003140:	2970      	cmp	r1, #112	; 0x70
 8003142:	d1dd      	bne.n	8003100 <_printf_i+0x30>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	f043 0320 	orr.w	r3, r3, #32
 800314a:	6023      	str	r3, [r4, #0]
 800314c:	e003      	b.n	8003156 <_printf_i+0x86>
 800314e:	2975      	cmp	r1, #117	; 0x75
 8003150:	d017      	beq.n	8003182 <_printf_i+0xb2>
 8003152:	2978      	cmp	r1, #120	; 0x78
 8003154:	d1d4      	bne.n	8003100 <_printf_i+0x30>
 8003156:	2378      	movs	r3, #120	; 0x78
 8003158:	4865      	ldr	r0, [pc, #404]	; (80032f0 <_printf_i+0x220>)
 800315a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800315e:	e055      	b.n	800320c <_printf_i+0x13c>
 8003160:	6813      	ldr	r3, [r2, #0]
 8003162:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003166:	1d19      	adds	r1, r3, #4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6011      	str	r1, [r2, #0]
 800316c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003170:	2301      	movs	r3, #1
 8003172:	e08c      	b.n	800328e <_printf_i+0x1be>
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f010 0f40 	tst.w	r0, #64	; 0x40
 800317a:	6011      	str	r1, [r2, #0]
 800317c:	bf18      	it	ne
 800317e:	b21b      	sxthne	r3, r3
 8003180:	e7cf      	b.n	8003122 <_printf_i+0x52>
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	6825      	ldr	r5, [r4, #0]
 8003186:	1d18      	adds	r0, r3, #4
 8003188:	6010      	str	r0, [r2, #0]
 800318a:	0628      	lsls	r0, r5, #24
 800318c:	d501      	bpl.n	8003192 <_printf_i+0xc2>
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	e002      	b.n	8003198 <_printf_i+0xc8>
 8003192:	0668      	lsls	r0, r5, #25
 8003194:	d5fb      	bpl.n	800318e <_printf_i+0xbe>
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	296f      	cmp	r1, #111	; 0x6f
 800319a:	bf14      	ite	ne
 800319c:	220a      	movne	r2, #10
 800319e:	2208      	moveq	r2, #8
 80031a0:	4852      	ldr	r0, [pc, #328]	; (80032ec <_printf_i+0x21c>)
 80031a2:	2100      	movs	r1, #0
 80031a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031a8:	6865      	ldr	r5, [r4, #4]
 80031aa:	2d00      	cmp	r5, #0
 80031ac:	60a5      	str	r5, [r4, #8]
 80031ae:	f2c0 8095 	blt.w	80032dc <_printf_i+0x20c>
 80031b2:	6821      	ldr	r1, [r4, #0]
 80031b4:	f021 0104 	bic.w	r1, r1, #4
 80031b8:	6021      	str	r1, [r4, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d13d      	bne.n	800323a <_printf_i+0x16a>
 80031be:	2d00      	cmp	r5, #0
 80031c0:	f040 808e 	bne.w	80032e0 <_printf_i+0x210>
 80031c4:	4665      	mov	r5, ip
 80031c6:	2a08      	cmp	r2, #8
 80031c8:	d10b      	bne.n	80031e2 <_printf_i+0x112>
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	07db      	lsls	r3, r3, #31
 80031ce:	d508      	bpl.n	80031e2 <_printf_i+0x112>
 80031d0:	6923      	ldr	r3, [r4, #16]
 80031d2:	6862      	ldr	r2, [r4, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	bfde      	ittt	le
 80031d8:	2330      	movle	r3, #48	; 0x30
 80031da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031e2:	ebac 0305 	sub.w	r3, ip, r5
 80031e6:	6123      	str	r3, [r4, #16]
 80031e8:	f8cd 8000 	str.w	r8, [sp]
 80031ec:	463b      	mov	r3, r7
 80031ee:	aa03      	add	r2, sp, #12
 80031f0:	4621      	mov	r1, r4
 80031f2:	4630      	mov	r0, r6
 80031f4:	f7ff fef6 	bl	8002fe4 <_printf_common>
 80031f8:	3001      	adds	r0, #1
 80031fa:	d14d      	bne.n	8003298 <_printf_i+0x1c8>
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	b005      	add	sp, #20
 8003202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003206:	4839      	ldr	r0, [pc, #228]	; (80032ec <_printf_i+0x21c>)
 8003208:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800320c:	6813      	ldr	r3, [r2, #0]
 800320e:	6821      	ldr	r1, [r4, #0]
 8003210:	1d1d      	adds	r5, r3, #4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6015      	str	r5, [r2, #0]
 8003216:	060a      	lsls	r2, r1, #24
 8003218:	d50b      	bpl.n	8003232 <_printf_i+0x162>
 800321a:	07ca      	lsls	r2, r1, #31
 800321c:	bf44      	itt	mi
 800321e:	f041 0120 	orrmi.w	r1, r1, #32
 8003222:	6021      	strmi	r1, [r4, #0]
 8003224:	b91b      	cbnz	r3, 800322e <_printf_i+0x15e>
 8003226:	6822      	ldr	r2, [r4, #0]
 8003228:	f022 0220 	bic.w	r2, r2, #32
 800322c:	6022      	str	r2, [r4, #0]
 800322e:	2210      	movs	r2, #16
 8003230:	e7b7      	b.n	80031a2 <_printf_i+0xd2>
 8003232:	064d      	lsls	r5, r1, #25
 8003234:	bf48      	it	mi
 8003236:	b29b      	uxthmi	r3, r3
 8003238:	e7ef      	b.n	800321a <_printf_i+0x14a>
 800323a:	4665      	mov	r5, ip
 800323c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003240:	fb02 3311 	mls	r3, r2, r1, r3
 8003244:	5cc3      	ldrb	r3, [r0, r3]
 8003246:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800324a:	460b      	mov	r3, r1
 800324c:	2900      	cmp	r1, #0
 800324e:	d1f5      	bne.n	800323c <_printf_i+0x16c>
 8003250:	e7b9      	b.n	80031c6 <_printf_i+0xf6>
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	6825      	ldr	r5, [r4, #0]
 8003256:	1d18      	adds	r0, r3, #4
 8003258:	6961      	ldr	r1, [r4, #20]
 800325a:	6010      	str	r0, [r2, #0]
 800325c:	0628      	lsls	r0, r5, #24
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	d501      	bpl.n	8003266 <_printf_i+0x196>
 8003262:	6019      	str	r1, [r3, #0]
 8003264:	e002      	b.n	800326c <_printf_i+0x19c>
 8003266:	066a      	lsls	r2, r5, #25
 8003268:	d5fb      	bpl.n	8003262 <_printf_i+0x192>
 800326a:	8019      	strh	r1, [r3, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	4665      	mov	r5, ip
 8003270:	6123      	str	r3, [r4, #16]
 8003272:	e7b9      	b.n	80031e8 <_printf_i+0x118>
 8003274:	6813      	ldr	r3, [r2, #0]
 8003276:	1d19      	adds	r1, r3, #4
 8003278:	6011      	str	r1, [r2, #0]
 800327a:	681d      	ldr	r5, [r3, #0]
 800327c:	6862      	ldr	r2, [r4, #4]
 800327e:	2100      	movs	r1, #0
 8003280:	4628      	mov	r0, r5
 8003282:	f000 f837 	bl	80032f4 <memchr>
 8003286:	b108      	cbz	r0, 800328c <_printf_i+0x1bc>
 8003288:	1b40      	subs	r0, r0, r5
 800328a:	6060      	str	r0, [r4, #4]
 800328c:	6863      	ldr	r3, [r4, #4]
 800328e:	6123      	str	r3, [r4, #16]
 8003290:	2300      	movs	r3, #0
 8003292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003296:	e7a7      	b.n	80031e8 <_printf_i+0x118>
 8003298:	6923      	ldr	r3, [r4, #16]
 800329a:	462a      	mov	r2, r5
 800329c:	4639      	mov	r1, r7
 800329e:	4630      	mov	r0, r6
 80032a0:	47c0      	blx	r8
 80032a2:	3001      	adds	r0, #1
 80032a4:	d0aa      	beq.n	80031fc <_printf_i+0x12c>
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	079b      	lsls	r3, r3, #30
 80032aa:	d413      	bmi.n	80032d4 <_printf_i+0x204>
 80032ac:	68e0      	ldr	r0, [r4, #12]
 80032ae:	9b03      	ldr	r3, [sp, #12]
 80032b0:	4298      	cmp	r0, r3
 80032b2:	bfb8      	it	lt
 80032b4:	4618      	movlt	r0, r3
 80032b6:	e7a3      	b.n	8003200 <_printf_i+0x130>
 80032b8:	2301      	movs	r3, #1
 80032ba:	464a      	mov	r2, r9
 80032bc:	4639      	mov	r1, r7
 80032be:	4630      	mov	r0, r6
 80032c0:	47c0      	blx	r8
 80032c2:	3001      	adds	r0, #1
 80032c4:	d09a      	beq.n	80031fc <_printf_i+0x12c>
 80032c6:	3501      	adds	r5, #1
 80032c8:	68e3      	ldr	r3, [r4, #12]
 80032ca:	9a03      	ldr	r2, [sp, #12]
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	42ab      	cmp	r3, r5
 80032d0:	dcf2      	bgt.n	80032b8 <_printf_i+0x1e8>
 80032d2:	e7eb      	b.n	80032ac <_printf_i+0x1dc>
 80032d4:	2500      	movs	r5, #0
 80032d6:	f104 0919 	add.w	r9, r4, #25
 80032da:	e7f5      	b.n	80032c8 <_printf_i+0x1f8>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ac      	bne.n	800323a <_printf_i+0x16a>
 80032e0:	7803      	ldrb	r3, [r0, #0]
 80032e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032ea:	e76c      	b.n	80031c6 <_printf_i+0xf6>
 80032ec:	0800357c 	.word	0x0800357c
 80032f0:	0800358d 	.word	0x0800358d

080032f4 <memchr>:
 80032f4:	b510      	push	{r4, lr}
 80032f6:	b2c9      	uxtb	r1, r1
 80032f8:	4402      	add	r2, r0
 80032fa:	4290      	cmp	r0, r2
 80032fc:	4603      	mov	r3, r0
 80032fe:	d101      	bne.n	8003304 <memchr+0x10>
 8003300:	2300      	movs	r3, #0
 8003302:	e003      	b.n	800330c <memchr+0x18>
 8003304:	781c      	ldrb	r4, [r3, #0]
 8003306:	3001      	adds	r0, #1
 8003308:	428c      	cmp	r4, r1
 800330a:	d1f6      	bne.n	80032fa <memchr+0x6>
 800330c:	4618      	mov	r0, r3
 800330e:	bd10      	pop	{r4, pc}

08003310 <memcpy>:
 8003310:	b510      	push	{r4, lr}
 8003312:	1e43      	subs	r3, r0, #1
 8003314:	440a      	add	r2, r1
 8003316:	4291      	cmp	r1, r2
 8003318:	d100      	bne.n	800331c <memcpy+0xc>
 800331a:	bd10      	pop	{r4, pc}
 800331c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003324:	e7f7      	b.n	8003316 <memcpy+0x6>

08003326 <memmove>:
 8003326:	4288      	cmp	r0, r1
 8003328:	b510      	push	{r4, lr}
 800332a:	eb01 0302 	add.w	r3, r1, r2
 800332e:	d807      	bhi.n	8003340 <memmove+0x1a>
 8003330:	1e42      	subs	r2, r0, #1
 8003332:	4299      	cmp	r1, r3
 8003334:	d00a      	beq.n	800334c <memmove+0x26>
 8003336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800333a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800333e:	e7f8      	b.n	8003332 <memmove+0xc>
 8003340:	4283      	cmp	r3, r0
 8003342:	d9f5      	bls.n	8003330 <memmove+0xa>
 8003344:	1881      	adds	r1, r0, r2
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	42d3      	cmn	r3, r2
 800334a:	d100      	bne.n	800334e <memmove+0x28>
 800334c:	bd10      	pop	{r4, pc}
 800334e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003352:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003356:	e7f7      	b.n	8003348 <memmove+0x22>

08003358 <_realloc_r>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	4607      	mov	r7, r0
 800335c:	4614      	mov	r4, r2
 800335e:	460e      	mov	r6, r1
 8003360:	b921      	cbnz	r1, 800336c <_realloc_r+0x14>
 8003362:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003366:	4611      	mov	r1, r2
 8003368:	f7ff bba0 	b.w	8002aac <_malloc_r>
 800336c:	b922      	cbnz	r2, 8003378 <_realloc_r+0x20>
 800336e:	f7ff fb51 	bl	8002a14 <_free_r>
 8003372:	4625      	mov	r5, r4
 8003374:	4628      	mov	r0, r5
 8003376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003378:	f000 f814 	bl	80033a4 <_malloc_usable_size_r>
 800337c:	42a0      	cmp	r0, r4
 800337e:	d20f      	bcs.n	80033a0 <_realloc_r+0x48>
 8003380:	4621      	mov	r1, r4
 8003382:	4638      	mov	r0, r7
 8003384:	f7ff fb92 	bl	8002aac <_malloc_r>
 8003388:	4605      	mov	r5, r0
 800338a:	2800      	cmp	r0, #0
 800338c:	d0f2      	beq.n	8003374 <_realloc_r+0x1c>
 800338e:	4631      	mov	r1, r6
 8003390:	4622      	mov	r2, r4
 8003392:	f7ff ffbd 	bl	8003310 <memcpy>
 8003396:	4631      	mov	r1, r6
 8003398:	4638      	mov	r0, r7
 800339a:	f7ff fb3b 	bl	8002a14 <_free_r>
 800339e:	e7e9      	b.n	8003374 <_realloc_r+0x1c>
 80033a0:	4635      	mov	r5, r6
 80033a2:	e7e7      	b.n	8003374 <_realloc_r+0x1c>

080033a4 <_malloc_usable_size_r>:
 80033a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033a8:	1f18      	subs	r0, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bfbc      	itt	lt
 80033ae:	580b      	ldrlt	r3, [r1, r0]
 80033b0:	18c0      	addlt	r0, r0, r3
 80033b2:	4770      	bx	lr

080033b4 <_init>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	bf00      	nop
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr

080033c0 <_fini>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	bf00      	nop
 80033c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c6:	bc08      	pop	{r3}
 80033c8:	469e      	mov	lr, r3
 80033ca:	4770      	bx	lr
