
praca_przejsciowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08007d68  08007d68  00017d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d8  080080d8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080080d8  080080d8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080d8  080080d8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080080e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  200001e0  080082bc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  080082bc  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e24a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002324  00000000  00000000  0002e44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  00030778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  000314d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c93  00000000  00000000  00032100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0e1  00000000  00000000  0004ad93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b43f  00000000  00000000  00056e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e22b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004424  00000000  00000000  000e2330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d50 	.word	0x08007d50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007d50 	.word	0x08007d50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_DMA_Init+0x68>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <MX_DMA_Init+0x68>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_DMA_Init+0x68>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	200c      	movs	r0, #12
 8000aec:	f001 f89f 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000af0:	200c      	movs	r0, #12
 8000af2:	f001 f8b8 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	200d      	movs	r0, #13
 8000afc:	f001 f897 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b00:	200d      	movs	r0, #13
 8000b02:	f001 f8b0 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2010      	movs	r0, #16
 8000b0c:	f001 f88f 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b10:	2010      	movs	r0, #16
 8000b12:	f001 f8a8 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2011      	movs	r0, #17
 8000b1c:	f001 f887 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b20:	2011      	movs	r0, #17
 8000b22:	f001 f8a0 	bl	8001c66 <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a36      	ldr	r2, [pc, #216]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2120      	movs	r1, #32
 8000bac:	481f      	ldr	r0, [pc, #124]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bae:	f001 fc4a 	bl	8002446 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pompka_Pin|Grzalka_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2138      	movs	r1, #56	; 0x38
 8000bb6:	481e      	ldr	r0, [pc, #120]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000bb8:	f001 fc45 	bl	8002446 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_GPIO_Init+0x100>)
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4819      	ldr	r0, [pc, #100]	; (8000c38 <MX_GPIO_Init+0x104>)
 8000bd2:	f001 fac7 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd6:	2320      	movs	r3, #32
 8000bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	4619      	mov	r1, r3
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bee:	f001 fab9 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Pompka_Pin|Grzalka_Pin|DS18B20_Pin;
 8000bf2:	2338      	movs	r3, #56	; 0x38
 8000bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4619      	mov	r1, r3
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000c0a:	f001 faab 	bl	8002164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2028      	movs	r0, #40	; 0x28
 8000c14:	f001 f80b 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c18:	2028      	movs	r0, #40	; 0x28
 8000c1a:	f001 f824 	bl	8001c66 <HAL_NVIC_EnableIRQ>

}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	10110000 	.word	0x10110000
 8000c38:	40011000 	.word	0x40011000

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b0b5      	sub	sp, #212	; 0xd4
 8000c40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c42:	f000 fe99 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c46:	f000 f8a9 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4a:	f7ff ff73 	bl	8000b34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4e:	f7ff ff3b 	bl	8000ac8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c52:	f000 fb6b 	bl	800132c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c56:	f000 fa73 	bl	8001140 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c5a:	f000 fac3 	bl	80011e4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000c5e:	f000 fb8f 	bl	8001380 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 8000c62:	223c      	movs	r2, #60	; 0x3c
 8000c64:	493c      	ldr	r1, [pc, #240]	; (8000d58 <main+0x11c>)
 8000c66:	483d      	ldr	r0, [pc, #244]	; (8000d5c <main+0x120>)
 8000c68:	f002 fd04 	bl	8003674 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart3, odebranaWiadomosc2, SIZE_OF_MSG);
 8000c6c:	223c      	movs	r2, #60	; 0x3c
 8000c6e:	493c      	ldr	r1, [pc, #240]	; (8000d60 <main+0x124>)
 8000c70:	483c      	ldr	r0, [pc, #240]	; (8000d64 <main+0x128>)
 8000c72:	f002 fcff 	bl	8003674 <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c76:	483c      	ldr	r0, [pc, #240]	; (8000d68 <main+0x12c>)
 8000c78:	f002 f8a4 	bl	8002dc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000c7c:	483b      	ldr	r0, [pc, #236]	; (8000d6c <main+0x130>)
 8000c7e:	f002 f8a1 	bl	8002dc4 <HAL_TIM_Base_Start_IT>
	subroutine_Init(&kociol);
 8000c82:	483b      	ldr	r0, [pc, #236]	; (8000d70 <main+0x134>)
 8000c84:	f003 f9c8 	bl	8004018 <subroutine_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (startMeasure) {
 8000c88:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <main+0x138>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d031      	beq.n	8000cf6 <main+0xba>
			DS18B20_Full(&measuredTemperature);
 8000c92:	4839      	ldr	r0, [pc, #228]	; (8000d78 <main+0x13c>)
 8000c94:	f000 fe10 	bl	80018b8 <DS18B20_Full>
			startMeasure = 0;
 8000c98:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <main+0x138>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
			if (measuredTemperature > 1.0) {
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <main+0x13c>)
 8000ca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <main+0x140>)
 8000caa:	f7ff fea5 	bl	80009f8 <__aeabi_dcmpgt>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d020      	beq.n	8000cf6 <main+0xba>
				uint8_t msg[100];
				uint8_t msg2[100];
				sprintf(msg,
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <main+0x13c>)
 8000cb6:	cb18      	ldmia	r3, {r3, r4}
 8000cb8:	4638      	mov	r0, r7
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4623      	mov	r3, r4
 8000cbe:	4930      	ldr	r1, [pc, #192]	; (8000d80 <main+0x144>)
 8000cc0:	f004 f986 	bl	8004fd0 <siprintf>
						(const char*) "Wartosc temperatury wynosi %.1lf\n\r",
						measuredTemperature);
				HAL_UART_Transmit_DMA(&huart2, msg, strlen(msg));
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fa42 	bl	8000150 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <main+0x120>)
 8000cd6:	f002 fc61 	bl	800359c <HAL_UART_Transmit_DMA>
				sprintf(msg2,
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <main+0x13c>)
 8000cdc:	cb18      	ldmia	r3, {r3, r4}
						(const char*) textConversion(measuredTemperature,
 8000cde:	4a29      	ldr	r2, [pc, #164]	; (8000d84 <main+0x148>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	4621      	mov	r1, r4
 8000ce4:	f003 fba2 	bl	800442c <textConversion>
 8000ce8:	4602      	mov	r2, r0
				sprintf(msg2,
 8000cea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 f96d 	bl	8004fd0 <siprintf>
								"t_aktualna"));
				//HAL_UART_Transmit_DMA(&huart3, msg2, strlen(msg2));
			}
		}
		if (startBangBang) {
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <main+0x14c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d017      	beq.n	8000d30 <main+0xf4>
			static uint8_t numberOfCycle = 0;
			grzanieRegDwustawna(kociol.heatingCycle[numberOfCycle][0],
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <main+0x150>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <main+0x134>)
 8000d08:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <main+0x150>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <main+0x134>)
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	7859      	ldrb	r1, [r3, #1]
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <main+0x134>)
 8000d1a:	f103 0410 	add.w	r4, r3, #16
 8000d1e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000d22:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <main+0x150>)
 8000d24:	9200      	str	r2, [sp, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4623      	mov	r3, r4
 8000d2a:	f003 f9dd 	bl	80040e8 <grzanieRegDwustawna>
 8000d2e:	e7ab      	b.n	8000c88 <main+0x4c>
					kociol.heatingCycle[numberOfCycle][1], kociol.hist,
					&numberOfCycle);
		} else if (startPIDReg) {
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <main+0x154>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1a6      	bne.n	8000c88 <main+0x4c>

		} else if (startPumping) {
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <main+0x158>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <main+0x114>
			pumping(kociol.pumpingTime);
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <main+0x134>)
 8000d46:	7a9b      	ldrb	r3, [r3, #10]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 f9a5 	bl	8004098 <pumping>
 8000d4e:	e79b      	b.n	8000c88 <main+0x4c>
		} else if (startPumpingWithoutTime) {
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <main+0x15c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
		if (startMeasure) {
 8000d54:	e798      	b.n	8000c88 <main+0x4c>
 8000d56:	bf00      	nop
 8000d58:	200002c8 	.word	0x200002c8
 8000d5c:	20000524 	.word	0x20000524
 8000d60:	2000022c 	.word	0x2000022c
 8000d64:	2000045c 	.word	0x2000045c
 8000d68:	2000038c 	.word	0x2000038c
 8000d6c:	20000344 	.word	0x20000344
 8000d70:	200002b0 	.word	0x200002b0
 8000d74:	20000229 	.word	0x20000229
 8000d78:	200002a0 	.word	0x200002a0
 8000d7c:	3ff00000 	.word	0x3ff00000
 8000d80:	08007d68 	.word	0x08007d68
 8000d84:	08007d8c 	.word	0x08007d8c
 8000d88:	2000029b 	.word	0x2000029b
 8000d8c:	2000020d 	.word	0x2000020d
 8000d90:	2000029d 	.word	0x2000029d
 8000d94:	20000341 	.word	0x20000341
 8000d98:	20000228 	.word	0x20000228

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b090      	sub	sp, #64	; 0x40
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	2228      	movs	r2, #40	; 0x28
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fc02 	bl	80045b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dd2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fb85 	bl	80024ec <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000de8:	f000 f896 	bl	8000f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df0:	2302      	movs	r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2102      	movs	r1, #2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fdf0 	bl	80029ec <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e12:	f000 f881 	bl	8000f18 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3740      	adds	r7, #64	; 0x40
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d11e      	bne.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0x50>

		//przerwanie co 1 sekundę
		startCounterTime++;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e3a:	6013      	str	r3, [r2, #0]
		CounterPump++;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]
		CounterHeating++;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e4e:	6013      	str	r3, [r2, #0]
		CounterMeasure++;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e5a:	701a      	strb	r2, [r3, #0]
		//pomiar co 3s
		if (CounterMeasure >= 3) {
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d905      	bls.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0x50>
			CounterMeasure = 0;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
			startMeasure = 1;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40012c00 	.word	0x40012c00
 8000e80:	20000200 	.word	0x20000200
 8000e84:	20000204 	.word	0x20000204
 8000e88:	20000208 	.word	0x20000208
 8000e8c:	2000020c 	.word	0x2000020c
 8000e90:	20000229 	.word	0x20000229

08000e94 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <HAL_UART_RxCpltCallback+0x64>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 8000ea6:	223c      	movs	r2, #60	; 0x3c
 8000ea8:	4914      	ldr	r1, [pc, #80]	; (8000efc <HAL_UART_RxCpltCallback+0x68>)
 8000eaa:	4815      	ldr	r0, [pc, #84]	; (8000f00 <HAL_UART_RxCpltCallback+0x6c>)
 8000eac:	f002 fbe2 	bl	8003674 <HAL_UART_Receive_DMA>

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	4814      	ldr	r0, [pc, #80]	; (8000f04 <HAL_UART_RxCpltCallback+0x70>)
 8000eb4:	f001 fadf 	bl	8002476 <HAL_GPIO_TogglePin>
		setProgram(odebranaWiadomosc, &kociol);
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <HAL_UART_RxCpltCallback+0x74>)
 8000eba:	4810      	ldr	r0, [pc, #64]	; (8000efc <HAL_UART_RxCpltCallback+0x68>)
 8000ebc:	f002 fffc 	bl	8003eb8 <setProgram>
		//convertToStucture(odebranaWiadomosc, &head);

	}
	if (huart->Instance == USART3) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <HAL_UART_RxCpltCallback+0x78>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d111      	bne.n	8000eee <HAL_UART_RxCpltCallback+0x5a>
		HAL_UART_Receive_DMA(&huart3, odebranaWiadomosc2, SIZE_OF_MSG);
 8000eca:	223c      	movs	r2, #60	; 0x3c
 8000ecc:	4910      	ldr	r1, [pc, #64]	; (8000f10 <HAL_UART_RxCpltCallback+0x7c>)
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <HAL_UART_RxCpltCallback+0x80>)
 8000ed0:	f002 fbd0 	bl	8003674 <HAL_UART_Receive_DMA>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	480b      	ldr	r0, [pc, #44]	; (8000f04 <HAL_UART_RxCpltCallback+0x70>)
 8000ed8:	f001 facd 	bl	8002476 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit_DMA(&huart2, odebranaWiadomosc2, sizeof(odebranaWiadomosc2));
 8000edc:	226e      	movs	r2, #110	; 0x6e
 8000ede:	490c      	ldr	r1, [pc, #48]	; (8000f10 <HAL_UART_RxCpltCallback+0x7c>)
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <HAL_UART_RxCpltCallback+0x6c>)
 8000ee2:	f002 fb5b 	bl	800359c <HAL_UART_Transmit_DMA>
		setProgram(odebranaWiadomosc2, &kociol);
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <HAL_UART_RxCpltCallback+0x74>)
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <HAL_UART_RxCpltCallback+0x7c>)
 8000eea:	f002 ffe5 	bl	8003eb8 <setProgram>


	}
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40004400 	.word	0x40004400
 8000efc:	200002c8 	.word	0x200002c8
 8000f00:	20000524 	.word	0x20000524
 8000f04:	40010800 	.word	0x40010800
 8000f08:	200002b0 	.word	0x200002b0
 8000f0c:	40004800 	.word	0x40004800
 8000f10:	2000022c 	.word	0x2000022c
 8000f14:	2000045c 	.word	0x2000045c

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_MspInit+0x60>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_MspInit+0x60>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010000 	.word	0x40010000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <MemManage_Handler+0x4>

08000fa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <BusFault_Handler+0x4>

08000fa6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <UsageFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 fd16 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <DMA1_Channel2_IRQHandler+0x10>)
 8000fe2:	f000 ff8b 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000049c 	.word	0x2000049c

08000ff0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <DMA1_Channel3_IRQHandler+0x10>)
 8000ff6:	f000 ff81 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000418 	.word	0x20000418

08001004 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <DMA1_Channel6_IRQHandler+0x10>)
 800100a:	f000 ff77 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200003d4 	.word	0x200003d4

08001018 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <DMA1_Channel7_IRQHandler+0x10>)
 800101e:	f000 ff6d 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200004e0 	.word	0x200004e0

0800102c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM1_BRK_IRQHandler+0x10>)
 8001032:	f001 ff19 	bl	8002e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000344 	.word	0x20000344

08001040 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM1_UP_IRQHandler+0x10>)
 8001046:	f001 ff0f 	bl	8002e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000344 	.word	0x20000344

08001054 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <TIM1_TRG_COM_IRQHandler+0x10>)
 800105a:	f001 ff05 	bl	8002e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000344 	.word	0x20000344

08001068 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM1_CC_IRQHandler+0x10>)
 800106e:	f001 fefb 	bl	8002e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000344 	.word	0x20000344

0800107c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM2_IRQHandler+0x10>)
 8001082:	f001 fef1 	bl	8002e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000038c 	.word	0x2000038c

08001090 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <USART2_IRQHandler+0x10>)
 8001096:	f002 fb6d 	bl	8003774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000524 	.word	0x20000524

080010a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <USART3_IRQHandler+0x10>)
 80010aa:	f002 fb63 	bl	8003774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000045c 	.word	0x2000045c

080010b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010c0:	f001 f9f2 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f003 f9ec 	bl	80044d4 <__errno>
 80010fc:	4602      	mov	r2, r0
 80010fe:	230c      	movs	r3, #12
 8001100:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20005000 	.word	0x20005000
 8001128:	00000400 	.word	0x00000400
 800112c:	20000210 	.word	0x20000210
 8001130:	20000570 	.word	0x20000570

08001134 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_TIM1_Init+0x9c>)
 800115e:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001160:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_TIM1_Init+0x9c>)
 8001164:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001168:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_TIM1_Init+0x9c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_TIM1_Init+0x9c>)
 8001172:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001176:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_TIM1_Init+0x9c>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_TIM1_Init+0x9c>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_TIM1_Init+0x9c>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_TIM1_Init+0x9c>)
 800118c:	f001 fdca 	bl	8002d24 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001196:	f7ff febf 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_TIM1_Init+0x9c>)
 80011a8:	f001 ff66 	bl	8003078 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011b2:	f7ff feb1 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_TIM1_Init+0x9c>)
 80011c4:	f002 f92c 	bl	8003420 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011ce:	f7ff fea3 	bl	8000f18 <Error_Handler>
  }

}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000344 	.word	0x20000344
 80011e0:	40012c00 	.word	0x40012c00

080011e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_TIM2_Init+0x94>)
 8001202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001206:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_TIM2_Init+0x94>)
 800120a:	223f      	movs	r2, #63	; 0x3f
 800120c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_TIM2_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_TIM2_Init+0x94>)
 8001216:	f240 32e7 	movw	r2, #999	; 0x3e7
 800121a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_TIM2_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_TIM2_Init+0x94>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001228:	4813      	ldr	r0, [pc, #76]	; (8001278 <MX_TIM2_Init+0x94>)
 800122a:	f001 fd7b 	bl	8002d24 <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001234:	f7ff fe70 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4619      	mov	r1, r3
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <MX_TIM2_Init+0x94>)
 8001246:	f001 ff17 	bl	8003078 <HAL_TIM_ConfigClockSource>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001250:	f7ff fe62 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_TIM2_Init+0x94>)
 8001262:	f002 f8dd 	bl	8003420 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800126c:	f7ff fe54 	bl	8000f18 <Error_Handler>
  }

}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000038c 	.word	0x2000038c

0800127c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <HAL_TIM_Base_MspInit+0xa8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_TIM_Base_MspInit+0xac>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <HAL_TIM_Base_MspInit+0xac>)
 8001294:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_TIM_Base_MspInit+0xac>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2018      	movs	r0, #24
 80012ac:	f000 fcbf 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80012b0:	2018      	movs	r0, #24
 80012b2:	f000 fcd8 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2019      	movs	r0, #25
 80012bc:	f000 fcb7 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012c0:	2019      	movs	r0, #25
 80012c2:	f000 fcd0 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	201a      	movs	r0, #26
 80012cc:	f000 fcaf 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80012d0:	201a      	movs	r0, #26
 80012d2:	f000 fcc8 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	201b      	movs	r0, #27
 80012dc:	f000 fca7 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012e0:	201b      	movs	r0, #27
 80012e2:	f000 fcc0 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012e6:	e018      	b.n	800131a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f0:	d113      	bne.n	800131a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_TIM_Base_MspInit+0xac>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_TIM_Base_MspInit+0xac>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_TIM_Base_MspInit+0xac>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	201c      	movs	r0, #28
 8001310:	f000 fc8d 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001314:	201c      	movs	r0, #28
 8001316:	f000 fca6 	bl	8001c66 <HAL_NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012c00 	.word	0x40012c00
 8001328:	40021000 	.word	0x40021000

0800132c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_USART2_UART_Init+0x50>)
 8001334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001340:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001344:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001354:	220c      	movs	r2, #12
 8001356:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001366:	f002 f8cb 	bl	8003500 <HAL_UART_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001370:	f7ff fdd2 	bl	8000f18 <Error_Handler>
  }

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000524 	.word	0x20000524
 800137c:	40004400 	.word	0x40004400

08001380 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_USART3_UART_Init+0x50>)
 8001388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 800138c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 8001394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001398:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013a8:	220c      	movs	r2, #12
 80013aa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013ba:	f002 f8a1 	bl	8003500 <HAL_UART_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 80013c4:	f7ff fda8 	bl	8000f18 <Error_Handler>
  }

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000045c 	.word	0x2000045c
 80013d0:	40004800 	.word	0x40004800

080013d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a8f      	ldr	r2, [pc, #572]	; (800162c <HAL_UART_MspInit+0x258>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d178      	bne.n	80014e6 <HAL_UART_MspInit+0x112>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f4:	4b8e      	ldr	r3, [pc, #568]	; (8001630 <HAL_UART_MspInit+0x25c>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a8d      	ldr	r2, [pc, #564]	; (8001630 <HAL_UART_MspInit+0x25c>)
 80013fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <HAL_UART_MspInit+0x25c>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_UART_MspInit+0x25c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a87      	ldr	r2, [pc, #540]	; (8001630 <HAL_UART_MspInit+0x25c>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b85      	ldr	r3, [pc, #532]	; (8001630 <HAL_UART_MspInit+0x25c>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001424:	230c      	movs	r3, #12
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2302      	movs	r3, #2
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	487f      	ldr	r0, [pc, #508]	; (8001634 <HAL_UART_MspInit+0x260>)
 8001438:	f000 fe94 	bl	8002164 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800143c:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <HAL_UART_MspInit+0x264>)
 800143e:	4a7f      	ldr	r2, [pc, #508]	; (800163c <HAL_UART_MspInit+0x268>)
 8001440:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001442:	4b7d      	ldr	r3, [pc, #500]	; (8001638 <HAL_UART_MspInit+0x264>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001448:	4b7b      	ldr	r3, [pc, #492]	; (8001638 <HAL_UART_MspInit+0x264>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800144e:	4b7a      	ldr	r3, [pc, #488]	; (8001638 <HAL_UART_MspInit+0x264>)
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001454:	4b78      	ldr	r3, [pc, #480]	; (8001638 <HAL_UART_MspInit+0x264>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145a:	4b77      	ldr	r3, [pc, #476]	; (8001638 <HAL_UART_MspInit+0x264>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001460:	4b75      	ldr	r3, [pc, #468]	; (8001638 <HAL_UART_MspInit+0x264>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001466:	4b74      	ldr	r3, [pc, #464]	; (8001638 <HAL_UART_MspInit+0x264>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800146c:	4872      	ldr	r0, [pc, #456]	; (8001638 <HAL_UART_MspInit+0x264>)
 800146e:	f000 fc15 	bl	8001c9c <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8001478:	f7ff fd4e 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a6e      	ldr	r2, [pc, #440]	; (8001638 <HAL_UART_MspInit+0x264>)
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	4a6d      	ldr	r2, [pc, #436]	; (8001638 <HAL_UART_MspInit+0x264>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001488:	4b6d      	ldr	r3, [pc, #436]	; (8001640 <HAL_UART_MspInit+0x26c>)
 800148a:	4a6e      	ldr	r2, [pc, #440]	; (8001644 <HAL_UART_MspInit+0x270>)
 800148c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800148e:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <HAL_UART_MspInit+0x26c>)
 8001490:	2210      	movs	r2, #16
 8001492:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001494:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <HAL_UART_MspInit+0x26c>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800149a:	4b69      	ldr	r3, [pc, #420]	; (8001640 <HAL_UART_MspInit+0x26c>)
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a0:	4b67      	ldr	r3, [pc, #412]	; (8001640 <HAL_UART_MspInit+0x26c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a6:	4b66      	ldr	r3, [pc, #408]	; (8001640 <HAL_UART_MspInit+0x26c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014ac:	4b64      	ldr	r3, [pc, #400]	; (8001640 <HAL_UART_MspInit+0x26c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b2:	4b63      	ldr	r3, [pc, #396]	; (8001640 <HAL_UART_MspInit+0x26c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014b8:	4861      	ldr	r0, [pc, #388]	; (8001640 <HAL_UART_MspInit+0x26c>)
 80014ba:	f000 fbef 	bl	8001c9c <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80014c4:	f7ff fd28 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a5d      	ldr	r2, [pc, #372]	; (8001640 <HAL_UART_MspInit+0x26c>)
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
 80014ce:	4a5c      	ldr	r2, [pc, #368]	; (8001640 <HAL_UART_MspInit+0x26c>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2026      	movs	r0, #38	; 0x26
 80014da:	f000 fba8 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014de:	2026      	movs	r0, #38	; 0x26
 80014e0:	f000 fbc1 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014e4:	e09d      	b.n	8001622 <HAL_UART_MspInit+0x24e>
  else if(uartHandle->Instance==USART3)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a57      	ldr	r2, [pc, #348]	; (8001648 <HAL_UART_MspInit+0x274>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	f040 8098 	bne.w	8001622 <HAL_UART_MspInit+0x24e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014f2:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <HAL_UART_MspInit+0x25c>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_UART_MspInit+0x25c>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <HAL_UART_MspInit+0x25c>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b49      	ldr	r3, [pc, #292]	; (8001630 <HAL_UART_MspInit+0x25c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a48      	ldr	r2, [pc, #288]	; (8001630 <HAL_UART_MspInit+0x25c>)
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <HAL_UART_MspInit+0x25c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4845      	ldr	r0, [pc, #276]	; (800164c <HAL_UART_MspInit+0x278>)
 8001538:	f000 fe14 	bl	8002164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800153c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	483e      	ldr	r0, [pc, #248]	; (800164c <HAL_UART_MspInit+0x278>)
 8001552:	f000 fe07 	bl	8002164 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <HAL_UART_MspInit+0x27c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	f043 0310 	orr.w	r3, r3, #16
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001574:	4a36      	ldr	r2, [pc, #216]	; (8001650 <HAL_UART_MspInit+0x27c>)
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800157a:	4b36      	ldr	r3, [pc, #216]	; (8001654 <HAL_UART_MspInit+0x280>)
 800157c:	4a36      	ldr	r2, [pc, #216]	; (8001658 <HAL_UART_MspInit+0x284>)
 800157e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001580:	4b34      	ldr	r3, [pc, #208]	; (8001654 <HAL_UART_MspInit+0x280>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_UART_MspInit+0x280>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_UART_MspInit+0x280>)
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <HAL_UART_MspInit+0x280>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <HAL_UART_MspInit+0x280>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_UART_MspInit+0x280>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_UART_MspInit+0x280>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80015aa:	482a      	ldr	r0, [pc, #168]	; (8001654 <HAL_UART_MspInit+0x280>)
 80015ac:	f000 fb76 	bl	8001c9c <HAL_DMA_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_UART_MspInit+0x1e6>
      Error_Handler();
 80015b6:	f7ff fcaf 	bl	8000f18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a25      	ldr	r2, [pc, #148]	; (8001654 <HAL_UART_MspInit+0x280>)
 80015be:	635a      	str	r2, [r3, #52]	; 0x34
 80015c0:	4a24      	ldr	r2, [pc, #144]	; (8001654 <HAL_UART_MspInit+0x280>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <HAL_UART_MspInit+0x288>)
 80015c8:	4a25      	ldr	r2, [pc, #148]	; (8001660 <HAL_UART_MspInit+0x28c>)
 80015ca:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_UART_MspInit+0x288>)
 80015ce:	2210      	movs	r2, #16
 80015d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_UART_MspInit+0x288>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_UART_MspInit+0x288>)
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_UART_MspInit+0x288>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_UART_MspInit+0x288>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0x288>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_UART_MspInit+0x288>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80015f6:	4819      	ldr	r0, [pc, #100]	; (800165c <HAL_UART_MspInit+0x288>)
 80015f8:	f000 fb50 	bl	8001c9c <HAL_DMA_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_UART_MspInit+0x232>
      Error_Handler();
 8001602:	f7ff fc89 	bl	8000f18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_UART_MspInit+0x288>)
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
 800160c:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_UART_MspInit+0x288>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2027      	movs	r0, #39	; 0x27
 8001618:	f000 fb09 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800161c:	2027      	movs	r0, #39	; 0x27
 800161e:	f000 fb22 	bl	8001c66 <HAL_NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3730      	adds	r7, #48	; 0x30
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40004400 	.word	0x40004400
 8001630:	40021000 	.word	0x40021000
 8001634:	40010800 	.word	0x40010800
 8001638:	200003d4 	.word	0x200003d4
 800163c:	4002006c 	.word	0x4002006c
 8001640:	200004e0 	.word	0x200004e0
 8001644:	40020080 	.word	0x40020080
 8001648:	40004800 	.word	0x40004800
 800164c:	40011000 	.word	0x40011000
 8001650:	40010000 	.word	0x40010000
 8001654:	20000418 	.word	0x20000418
 8001658:	40020030 	.word	0x40020030
 800165c:	2000049c 	.word	0x2000049c
 8001660:	4002001c 	.word	0x4002001c

08001664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001664:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001666:	e003      	b.n	8001670 <LoopCopyDataInit>

08001668 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800166a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800166c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800166e:	3104      	adds	r1, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001670:	480a      	ldr	r0, [pc, #40]	; (800169c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001674:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001676:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001678:	d3f6      	bcc.n	8001668 <CopyDataInit>
  ldr r2, =_sbss
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800167c:	e002      	b.n	8001684 <LoopFillZerobss>

0800167e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001680:	f842 3b04 	str.w	r3, [r2], #4

08001684 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001686:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001688:	d3f9      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800168a:	f7ff fd53 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168e:	f002 ff27 	bl	80044e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001692:	f7ff fad3 	bl	8000c3c <main>
  bx lr
 8001696:	4770      	bx	lr
  ldr r3, =_sidata
 8001698:	080080e0 	.word	0x080080e0
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80016a4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80016a8:	2000056c 	.word	0x2000056c

080016ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_2_IRQHandler>
	...

080016b0 <delay>:
 *      Author: Łukasz
 */
#include"DS18B20.h"
#include"tim.h"
void delay (uint16_t time)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <delay+0x2c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 80016c2:	bf00      	nop
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <delay+0x2c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3f9      	bcc.n	80016c4 <delay+0x14>
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	2000038c 	.word	0x2000038c

080016e0 <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2302      	movs	r3, #2
 8001704:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4619      	mov	r1, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fd29 	bl	8002164 <HAL_GPIO_Init>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173c:	2301      	movs	r3, #1
 800173e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fd0c 	bl	8002164 <HAL_GPIO_Init>
}
 800174c:	bf00      	nop
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800175e:	2120      	movs	r1, #32
 8001760:	4813      	ldr	r0, [pc, #76]	; (80017b0 <DS18B20_Start+0x5c>)
 8001762:	f7ff ffbd 	bl	80016e0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8001766:	2200      	movs	r2, #0
 8001768:	2120      	movs	r1, #32
 800176a:	4811      	ldr	r0, [pc, #68]	; (80017b0 <DS18B20_Start+0x5c>)
 800176c:	f000 fe6b 	bl	8002446 <HAL_GPIO_WritePin>
	delay (500);   // delay according to datasheet
 8001770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001774:	f7ff ff9c 	bl	80016b0 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001778:	2120      	movs	r1, #32
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <DS18B20_Start+0x5c>)
 800177c:	f7ff ffcd 	bl	800171a <Set_Pin_Input>
	delay (100);    // delay according to datasheet
 8001780:	2064      	movs	r0, #100	; 0x64
 8001782:	f7ff ff95 	bl	80016b0 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8001786:	2120      	movs	r1, #32
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <DS18B20_Start+0x5c>)
 800178a:	f000 fe45 	bl	8002418 <HAL_GPIO_ReadPin>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <DS18B20_Start+0x46>
 8001794:	2301      	movs	r3, #1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	e001      	b.n	800179e <DS18B20_Start+0x4a>
	else Response = -1;
 800179a:	23ff      	movs	r3, #255	; 0xff
 800179c:	71fb      	strb	r3, [r7, #7]

	delay (500); // 480 us delay totally.
 800179e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a2:	f7ff ff85 	bl	80016b0 <delay>

	return Response;
 80017a6:	79fb      	ldrb	r3, [r7, #7]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40010c00 	.word	0x40010c00

080017b4 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80017be:	2120      	movs	r1, #32
 80017c0:	481d      	ldr	r0, [pc, #116]	; (8001838 <DS18B20_Write+0x84>)
 80017c2:	f7ff ff8d 	bl	80016e0 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e02e      	b.n	800182a <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	fa42 f303 	asr.w	r3, r2, r3
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80017dc:	2120      	movs	r1, #32
 80017de:	4816      	ldr	r0, [pc, #88]	; (8001838 <DS18B20_Write+0x84>)
 80017e0:	f7ff ff7e 	bl	80016e0 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80017e4:	2200      	movs	r2, #0
 80017e6:	2120      	movs	r1, #32
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <DS18B20_Write+0x84>)
 80017ea:	f000 fe2c 	bl	8002446 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80017ee:	2001      	movs	r0, #1
 80017f0:	f7ff ff5e 	bl	80016b0 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80017f4:	2120      	movs	r1, #32
 80017f6:	4810      	ldr	r0, [pc, #64]	; (8001838 <DS18B20_Write+0x84>)
 80017f8:	f7ff ff8f 	bl	800171a <Set_Pin_Input>
			delay (60);  // wait for 60 us
 80017fc:	203c      	movs	r0, #60	; 0x3c
 80017fe:	f7ff ff57 	bl	80016b0 <delay>
 8001802:	e00f      	b.n	8001824 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001804:	2120      	movs	r1, #32
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <DS18B20_Write+0x84>)
 8001808:	f7ff ff6a 	bl	80016e0 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 800180c:	2200      	movs	r2, #0
 800180e:	2120      	movs	r1, #32
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <DS18B20_Write+0x84>)
 8001812:	f000 fe18 	bl	8002446 <HAL_GPIO_WritePin>
			delay (60);  // wait for 60 us
 8001816:	203c      	movs	r0, #60	; 0x3c
 8001818:	f7ff ff4a 	bl	80016b0 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800181c:	2120      	movs	r1, #32
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <DS18B20_Write+0x84>)
 8001820:	f7ff ff7b 	bl	800171a <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3301      	adds	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b07      	cmp	r3, #7
 800182e:	ddcd      	ble.n	80017cc <DS18B20_Write+0x18>
		}
	}
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40010c00 	.word	0x40010c00

0800183c <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001842:	2300      	movs	r3, #0
 8001844:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001846:	2120      	movs	r1, #32
 8001848:	481a      	ldr	r0, [pc, #104]	; (80018b4 <DS18B20_Read+0x78>)
 800184a:	f7ff ff66 	bl	800171a <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	e026      	b.n	80018a2 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001854:	2120      	movs	r1, #32
 8001856:	4817      	ldr	r0, [pc, #92]	; (80018b4 <DS18B20_Read+0x78>)
 8001858:	f7ff ff42 	bl	80016e0 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 800185c:	2200      	movs	r2, #0
 800185e:	2120      	movs	r1, #32
 8001860:	4814      	ldr	r0, [pc, #80]	; (80018b4 <DS18B20_Read+0x78>)
 8001862:	f000 fdf0 	bl	8002446 <HAL_GPIO_WritePin>
		delay (5);  // wait for > 1us
 8001866:	2005      	movs	r0, #5
 8001868:	f7ff ff22 	bl	80016b0 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800186c:	2120      	movs	r1, #32
 800186e:	4811      	ldr	r0, [pc, #68]	; (80018b4 <DS18B20_Read+0x78>)
 8001870:	f7ff ff53 	bl	800171a <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001874:	2120      	movs	r1, #32
 8001876:	480f      	ldr	r0, [pc, #60]	; (80018b4 <DS18B20_Read+0x78>)
 8001878:	f000 fdce 	bl	8002418 <HAL_GPIO_ReadPin>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8001882:	2201      	movs	r2, #1
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	b25a      	sxtb	r2, r3
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4313      	orrs	r3, r2
 8001892:	b25b      	sxtb	r3, r3
 8001894:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);  // wait for 60 us
 8001896:	203c      	movs	r0, #60	; 0x3c
 8001898:	f7ff ff0a 	bl	80016b0 <delay>
	for (int i=0;i<8;i++)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b07      	cmp	r3, #7
 80018a6:	ddd5      	ble.n	8001854 <DS18B20_Read+0x18>
	}
	return value;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40010c00 	.word	0x40010c00

080018b8 <DS18B20_Full>:
void DS18B20_Full(double *Temperature){
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	static uint8_t Presence = 0;
	static uint8_t  Temp_byte1, Temp_byte2;
	static uint16_t TEMP;
		  Presence = DS18B20_Start ();
 80018c0:	f7ff ff48 	bl	8001754 <DS18B20_Start>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <DS18B20_Full+0xac>)
 80018ca:	701a      	strb	r2, [r3, #0]
		  	  HAL_Delay (1);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f000 f8b5 	bl	8001a3c <HAL_Delay>
		  	  DS18B20_Write (0xCC);  // skip ROM
 80018d2:	20cc      	movs	r0, #204	; 0xcc
 80018d4:	f7ff ff6e 	bl	80017b4 <DS18B20_Write>
		  	  DS18B20_Write (0x44);  // convert t
 80018d8:	2044      	movs	r0, #68	; 0x44
 80018da:	f7ff ff6b 	bl	80017b4 <DS18B20_Write>
		  	  HAL_Delay (800);
 80018de:	f44f 7048 	mov.w	r0, #800	; 0x320
 80018e2:	f000 f8ab 	bl	8001a3c <HAL_Delay>

		  	  Presence = DS18B20_Start ();
 80018e6:	f7ff ff35 	bl	8001754 <DS18B20_Start>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <DS18B20_Full+0xac>)
 80018f0:	701a      	strb	r2, [r3, #0]
		        HAL_Delay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 f8a2 	bl	8001a3c <HAL_Delay>
		        DS18B20_Write (0xCC);  // skip ROM
 80018f8:	20cc      	movs	r0, #204	; 0xcc
 80018fa:	f7ff ff5b 	bl	80017b4 <DS18B20_Write>
		        DS18B20_Write (0xBE);  // Read Scratch-pad
 80018fe:	20be      	movs	r0, #190	; 0xbe
 8001900:	f7ff ff58 	bl	80017b4 <DS18B20_Write>

		        Temp_byte1 = DS18B20_Read();
 8001904:	f7ff ff9a 	bl	800183c <DS18B20_Read>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <DS18B20_Full+0xb0>)
 800190e:	701a      	strb	r2, [r3, #0]
		  	  Temp_byte2 = DS18B20_Read();
 8001910:	f7ff ff94 	bl	800183c <DS18B20_Read>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <DS18B20_Full+0xb4>)
 800191a:	701a      	strb	r2, [r3, #0]
		  	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <DS18B20_Full+0xb4>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21a      	sxth	r2, r3
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <DS18B20_Full+0xb0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21b      	sxth	r3, r3
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <DS18B20_Full+0xb8>)
 8001932:	801a      	strh	r2, [r3, #0]
		  	  *Temperature = (double)TEMP/16;
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <DS18B20_Full+0xb8>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fd53 	bl	80003e4 <__aeabi_ui2d>
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <DS18B20_Full+0xbc>)
 8001944:	f7fe fef2 	bl	800072c <__aeabi_ddiv>
 8001948:	4603      	mov	r3, r0
 800194a:	460c      	mov	r4, r1
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	e9c2 3400 	strd	r3, r4, [r2]


		  	  HAL_Delay(1000);
 8001952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001956:	f000 f871 	bl	8001a3c <HAL_Delay>
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	bf00      	nop
 8001964:	20000214 	.word	0x20000214
 8001968:	20000215 	.word	0x20000215
 800196c:	20000216 	.word	0x20000216
 8001970:	20000218 	.word	0x20000218
 8001974:	40300000 	.word	0x40300000

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_Init+0x28>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_Init+0x28>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f945 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fac6 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40022000 	.word	0x40022000

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f95d 	bl	8001c82 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f925 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_IncTick+0x1c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_IncTick+0x20>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <HAL_IncTick+0x20>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000564 	.word	0x20000564

08001a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <HAL_GetTick+0x10>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	20000564 	.word	0x20000564

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff fff0 	bl	8001a28 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d005      	beq.n	8001a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_Delay+0x40>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a62:	bf00      	nop
 8001a64:	f7ff ffe0 	bl	8001a28 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f7      	bhi.n	8001a64 <HAL_Delay+0x28>
  {
  }
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000008 	.word	0x20000008

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4906      	ldr	r1, [pc, #24]	; (8001b18 <__NVIC_EnableIRQ+0x34>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f7ff ff90 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff2d 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff42 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff90 	bl	8001b70 <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5f 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff35 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffa2 	bl	8001bd4 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e043      	b.n	8001d3a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <HAL_DMA_Init+0xa8>)
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <HAL_DMA_Init+0xac>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	009a      	lsls	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_DMA_Init+0xb0>)
 8001cce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ce6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001cea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	bffdfff8 	.word	0xbffdfff8
 8001d48:	cccccccd 	.word	0xcccccccd
 8001d4c:	40020000 	.word	0x40020000

08001d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_DMA_Start_IT+0x20>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e04a      	b.n	8001e06 <HAL_DMA_Start_IT+0xb6>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d13a      	bne.n	8001df8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f9ae 	bl	8002108 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 020e 	orr.w	r2, r2, #14
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e00f      	b.n	8001de6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0204 	bic.w	r2, r2, #4
 8001dd4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 020a 	orr.w	r2, r2, #10
 8001de4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0201 	orr.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e005      	b.n	8001e04 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e00:	2302      	movs	r3, #2
 8001e02:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d005      	beq.n	8001e32 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e051      	b.n	8001ed6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 020e 	bic.w	r2, r2, #14
 8001e40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0201 	bic.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <HAL_DMA_Abort_IT+0xd0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d029      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0xa0>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <HAL_DMA_Abort_IT+0xd4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d022      	beq.n	8001eac <HAL_DMA_Abort_IT+0x9c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_DMA_Abort_IT+0xd8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d01a      	beq.n	8001ea6 <HAL_DMA_Abort_IT+0x96>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_DMA_Abort_IT+0xdc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d012      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0x90>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_DMA_Abort_IT+0xe0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00a      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x8a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_DMA_Abort_IT+0xe4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d102      	bne.n	8001e94 <HAL_DMA_Abort_IT+0x84>
 8001e8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e92:	e00e      	b.n	8001eb2 <HAL_DMA_Abort_IT+0xa2>
 8001e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e98:	e00b      	b.n	8001eb2 <HAL_DMA_Abort_IT+0xa2>
 8001e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9e:	e008      	b.n	8001eb2 <HAL_DMA_Abort_IT+0xa2>
 8001ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea4:	e005      	b.n	8001eb2 <HAL_DMA_Abort_IT+0xa2>
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	e002      	b.n	8001eb2 <HAL_DMA_Abort_IT+0xa2>
 8001eac:	2310      	movs	r3, #16
 8001eae:	e000      	b.n	8001eb2 <HAL_DMA_Abort_IT+0xa2>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_DMA_Abort_IT+0xe8>)
 8001eb4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4798      	blx	r3
    } 
  }
  return status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40020008 	.word	0x40020008
 8001ee4:	4002001c 	.word	0x4002001c
 8001ee8:	40020030 	.word	0x40020030
 8001eec:	40020044 	.word	0x40020044
 8001ef0:	40020058 	.word	0x40020058
 8001ef4:	4002006c 	.word	0x4002006c
 8001ef8:	40020000 	.word	0x40020000

08001efc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2204      	movs	r2, #4
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d04f      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0xc8>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d04a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a66      	ldr	r2, [pc, #408]	; (80020ec <HAL_DMA_IRQHandler+0x1f0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d029      	beq.n	8001faa <HAL_DMA_IRQHandler+0xae>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a65      	ldr	r2, [pc, #404]	; (80020f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d022      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0xaa>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a63      	ldr	r2, [pc, #396]	; (80020f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01a      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xa4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a62      	ldr	r2, [pc, #392]	; (80020f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d012      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x9e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a60      	ldr	r2, [pc, #384]	; (80020fc <HAL_DMA_IRQHandler+0x200>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00a      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x98>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <HAL_DMA_IRQHandler+0x204>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d102      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x92>
 8001f88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f8c:	e00e      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001f8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f92:	e00b      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001f94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f98:	e008      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f9e:	e005      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa4:	e002      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001fa6:	2340      	movs	r3, #64	; 0x40
 8001fa8:	e000      	b.n	8001fac <HAL_DMA_IRQHandler+0xb0>
 8001faa:	2304      	movs	r3, #4
 8001fac:	4a55      	ldr	r2, [pc, #340]	; (8002104 <HAL_DMA_IRQHandler+0x208>)
 8001fae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8094 	beq.w	80020e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc2:	e08e      	b.n	80020e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	2202      	movs	r2, #2
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d056      	beq.n	8002082 <HAL_DMA_IRQHandler+0x186>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d051      	beq.n	8002082 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 020a 	bic.w	r2, r2, #10
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a38      	ldr	r2, [pc, #224]	; (80020ec <HAL_DMA_IRQHandler+0x1f0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d029      	beq.n	8002062 <HAL_DMA_IRQHandler+0x166>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a37      	ldr	r2, [pc, #220]	; (80020f0 <HAL_DMA_IRQHandler+0x1f4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d022      	beq.n	800205e <HAL_DMA_IRQHandler+0x162>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a35      	ldr	r2, [pc, #212]	; (80020f4 <HAL_DMA_IRQHandler+0x1f8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01a      	beq.n	8002058 <HAL_DMA_IRQHandler+0x15c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <HAL_DMA_IRQHandler+0x1fc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d012      	beq.n	8002052 <HAL_DMA_IRQHandler+0x156>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a32      	ldr	r2, [pc, #200]	; (80020fc <HAL_DMA_IRQHandler+0x200>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00a      	beq.n	800204c <HAL_DMA_IRQHandler+0x150>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a31      	ldr	r2, [pc, #196]	; (8002100 <HAL_DMA_IRQHandler+0x204>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d102      	bne.n	8002046 <HAL_DMA_IRQHandler+0x14a>
 8002040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002044:	e00e      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 8002046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204a:	e00b      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 800204c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002050:	e008      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 8002052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002056:	e005      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 8002058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205c:	e002      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 800205e:	2320      	movs	r3, #32
 8002060:	e000      	b.n	8002064 <HAL_DMA_IRQHandler+0x168>
 8002062:	2302      	movs	r3, #2
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <HAL_DMA_IRQHandler+0x208>)
 8002066:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	2b00      	cmp	r3, #0
 8002076:	d034      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002080:	e02f      	b.n	80020e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2208      	movs	r2, #8
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d028      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x1e8>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d023      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 020e 	bic.w	r2, r2, #14
 80020aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
    }
  }
  return;
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
}
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40020008 	.word	0x40020008
 80020f0:	4002001c 	.word	0x4002001c
 80020f4:	40020030 	.word	0x40020030
 80020f8:	40020044 	.word	0x40020044
 80020fc:	40020058 	.word	0x40020058
 8002100:	4002006c 	.word	0x4002006c
 8002104:	40020000 	.word	0x40020000

08002108 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b10      	cmp	r3, #16
 8002134:	d108      	bne.n	8002148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002146:	e007      	b.n	8002158 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	60da      	str	r2, [r3, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b08b      	sub	sp, #44	; 0x2c
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002176:	e127      	b.n	80023c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002178:	2201      	movs	r2, #1
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8116 	bne.w	80023c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b12      	cmp	r3, #18
 800219c:	d034      	beq.n	8002208 <HAL_GPIO_Init+0xa4>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d80d      	bhi.n	80021be <HAL_GPIO_Init+0x5a>
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d02b      	beq.n	80021fe <HAL_GPIO_Init+0x9a>
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d804      	bhi.n	80021b4 <HAL_GPIO_Init+0x50>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d031      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d01c      	beq.n	80021ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021b2:	e048      	b.n	8002246 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d043      	beq.n	8002240 <HAL_GPIO_Init+0xdc>
 80021b8:	2b11      	cmp	r3, #17
 80021ba:	d01b      	beq.n	80021f4 <HAL_GPIO_Init+0x90>
          break;
 80021bc:	e043      	b.n	8002246 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021be:	4a89      	ldr	r2, [pc, #548]	; (80023e4 <HAL_GPIO_Init+0x280>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d026      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021c4:	4a87      	ldr	r2, [pc, #540]	; (80023e4 <HAL_GPIO_Init+0x280>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d806      	bhi.n	80021d8 <HAL_GPIO_Init+0x74>
 80021ca:	4a87      	ldr	r2, [pc, #540]	; (80023e8 <HAL_GPIO_Init+0x284>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d020      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021d0:	4a86      	ldr	r2, [pc, #536]	; (80023ec <HAL_GPIO_Init+0x288>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_GPIO_Init+0xae>
          break;
 80021d6:	e036      	b.n	8002246 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021d8:	4a85      	ldr	r2, [pc, #532]	; (80023f0 <HAL_GPIO_Init+0x28c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021de:	4a85      	ldr	r2, [pc, #532]	; (80023f4 <HAL_GPIO_Init+0x290>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d016      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021e4:	4a84      	ldr	r2, [pc, #528]	; (80023f8 <HAL_GPIO_Init+0x294>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0xae>
          break;
 80021ea:	e02c      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	623b      	str	r3, [r7, #32]
          break;
 80021f2:	e028      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	3304      	adds	r3, #4
 80021fa:	623b      	str	r3, [r7, #32]
          break;
 80021fc:	e023      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	3308      	adds	r3, #8
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e01e      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	330c      	adds	r3, #12
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e019      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800221a:	2304      	movs	r3, #4
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e012      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002228:	2308      	movs	r3, #8
 800222a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	611a      	str	r2, [r3, #16]
          break;
 8002232:	e008      	b.n	8002246 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002234:	2308      	movs	r3, #8
 8002236:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	615a      	str	r2, [r3, #20]
          break;
 800223e:	e002      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
          break;
 8002244:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2bff      	cmp	r3, #255	; 0xff
 800224a:	d801      	bhi.n	8002250 <HAL_GPIO_Init+0xec>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	e001      	b.n	8002254 <HAL_GPIO_Init+0xf0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2bff      	cmp	r3, #255	; 0xff
 800225a:	d802      	bhi.n	8002262 <HAL_GPIO_Init+0xfe>
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x104>
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	3b08      	subs	r3, #8
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	210f      	movs	r1, #15
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	401a      	ands	r2, r3
 800227a:	6a39      	ldr	r1, [r7, #32]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	431a      	orrs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8096 	beq.w	80023c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002296:	4b59      	ldr	r3, [pc, #356]	; (80023fc <HAL_GPIO_Init+0x298>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a58      	ldr	r2, [pc, #352]	; (80023fc <HAL_GPIO_Init+0x298>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6193      	str	r3, [r2, #24]
 80022a2:	4b56      	ldr	r3, [pc, #344]	; (80023fc <HAL_GPIO_Init+0x298>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022ae:	4a54      	ldr	r2, [pc, #336]	; (8002400 <HAL_GPIO_Init+0x29c>)
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4013      	ands	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x2a0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_GPIO_Init+0x19e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_GPIO_Init+0x2a4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00d      	beq.n	80022fe <HAL_GPIO_Init+0x19a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a49      	ldr	r2, [pc, #292]	; (800240c <HAL_GPIO_Init+0x2a8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <HAL_GPIO_Init+0x196>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a48      	ldr	r2, [pc, #288]	; (8002410 <HAL_GPIO_Init+0x2ac>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d101      	bne.n	80022f6 <HAL_GPIO_Init+0x192>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x1a0>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e004      	b.n	8002304 <HAL_GPIO_Init+0x1a0>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_Init+0x1a0>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_GPIO_Init+0x1a0>
 8002302:	2300      	movs	r3, #0
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	0092      	lsls	r2, r2, #2
 800230c:	4093      	lsls	r3, r2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002314:	493a      	ldr	r1, [pc, #232]	; (8002400 <HAL_GPIO_Init+0x29c>)
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4938      	ldr	r1, [pc, #224]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
 800233a:	e006      	b.n	800234a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800233c:	4b35      	ldr	r3, [pc, #212]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	43db      	mvns	r3, r3
 8002344:	4933      	ldr	r1, [pc, #204]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002346:	4013      	ands	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002356:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	492e      	ldr	r1, [pc, #184]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	43db      	mvns	r3, r3
 800236c:	4929      	ldr	r1, [pc, #164]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 800236e:	4013      	ands	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	4924      	ldr	r1, [pc, #144]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
 800238a:	e006      	b.n	800239a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	43db      	mvns	r3, r3
 8002394:	491f      	ldr	r1, [pc, #124]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002396:	4013      	ands	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	491a      	ldr	r1, [pc, #104]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60cb      	str	r3, [r1, #12]
 80023b2:	e006      	b.n	80023c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	4915      	ldr	r1, [pc, #84]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80023be:	4013      	ands	r3, r2
 80023c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	3301      	adds	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	fa22 f303 	lsr.w	r3, r2, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f47f aed0 	bne.w	8002178 <HAL_GPIO_Init+0x14>
  }
}
 80023d8:	bf00      	nop
 80023da:	372c      	adds	r7, #44	; 0x2c
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	10210000 	.word	0x10210000
 80023e8:	10110000 	.word	0x10110000
 80023ec:	10120000 	.word	0x10120000
 80023f0:	10310000 	.word	0x10310000
 80023f4:	10320000 	.word	0x10320000
 80023f8:	10220000 	.word	0x10220000
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000
 8002404:	40010800 	.word	0x40010800
 8002408:	40010c00 	.word	0x40010c00
 800240c:	40011000 	.word	0x40011000
 8002410:	40011400 	.word	0x40011400
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e001      	b.n	800243a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	807b      	strh	r3, [r7, #2]
 8002452:	4613      	mov	r3, r2
 8002454:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002456:	787b      	ldrb	r3, [r7, #1]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245c:	887a      	ldrh	r2, [r7, #2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002462:	e003      	b.n	800246c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	041a      	lsls	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	611a      	str	r2, [r3, #16]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43d9      	mvns	r1, r3
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	611a      	str	r2, [r3, #16]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f806 	bl	80024d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40010400 	.word	0x40010400

080024d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e26c      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8087 	beq.w	800261a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d00c      	beq.n	8002532 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002518:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d112      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
 8002524:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002532:	4b89      	ldr	r3, [pc, #548]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06c      	beq.n	8002618 <HAL_RCC_OscConfig+0x12c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d168      	bne.n	8002618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e246      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x76>
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7f      	ldr	r2, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e02e      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x98>
 800256a:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b78      	ldr	r3, [pc, #480]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a77      	ldr	r2, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0xbc>
 800258e:	4b72      	ldr	r3, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a71      	ldr	r2, [pc, #452]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6e      	ldr	r2, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 80025a8:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6a      	ldr	r2, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a67      	ldr	r2, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fa2e 	bl	8001a28 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff fa2a 	bl	8001a28 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1fa      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe4>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff fa1a 	bl	8001a28 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7ff fa16 	bl	8001a28 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1e6      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x10c>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d063      	beq.n	80026ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
 800263e:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1ba      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4939      	ldr	r1, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e03a      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff f9cf 	bl	8001a28 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268e:	f7ff f9cb 	bl	8001a28 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e19b      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4927      	ldr	r1, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff f9ae 	bl	8001a28 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7ff f9aa 	bl	8001a28 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e17a      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d03a      	beq.n	8002770 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d019      	beq.n	8002736 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7ff f98e 	bl	8001a28 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7ff f98a 	bl	8001a28 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e15a      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272e:	2001      	movs	r0, #1
 8002730:	f000 fada 	bl	8002ce8 <RCC_Delay>
 8002734:	e01c      	b.n	8002770 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7ff f974 	bl	8001a28 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002742:	e00f      	b.n	8002764 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff f970 	bl	8001a28 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d908      	bls.n	8002764 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e140      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	42420000 	.word	0x42420000
 8002760:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	4b9e      	ldr	r3, [pc, #632]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e9      	bne.n	8002744 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a6 	beq.w	80028ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b97      	ldr	r3, [pc, #604]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b94      	ldr	r3, [pc, #592]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a93      	ldr	r2, [pc, #588]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b91      	ldr	r3, [pc, #580]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b8e      	ldr	r3, [pc, #568]	; (80029e4 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b6:	4b8b      	ldr	r3, [pc, #556]	; (80029e4 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a8a      	ldr	r2, [pc, #552]	; (80029e4 <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7ff f931 	bl	8001a28 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7ff f92d 	bl	8001a28 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0fd      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	4b81      	ldr	r3, [pc, #516]	; (80029e4 <HAL_RCC_OscConfig+0x4f8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x312>
 80027f0:	4b7b      	ldr	r3, [pc, #492]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a7a      	ldr	r2, [pc, #488]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	e02d      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x334>
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a75      	ldr	r2, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6213      	str	r3, [r2, #32]
 8002812:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a72      	ldr	r2, [pc, #456]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	e01c      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d10c      	bne.n	8002842 <HAL_RCC_OscConfig+0x356>
 8002828:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a6c      	ldr	r2, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a69      	ldr	r2, [pc, #420]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6213      	str	r3, [r2, #32]
 8002840:	e00b      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a66      	ldr	r2, [pc, #408]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6213      	str	r3, [r2, #32]
 800284e:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4a63      	ldr	r2, [pc, #396]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d015      	beq.n	800288e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff f8e1 	bl	8001a28 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7ff f8dd 	bl	8001a28 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0ab      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ee      	beq.n	800286a <HAL_RCC_OscConfig+0x37e>
 800288c:	e014      	b.n	80028b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7ff f8cb 	bl	8001a28 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7ff f8c7 	bl	8001a28 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e095      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	4b4c      	ldr	r3, [pc, #304]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ee      	bne.n	8002896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d105      	bne.n	80028ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028be:	4b48      	ldr	r3, [pc, #288]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a47      	ldr	r2, [pc, #284]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8081 	beq.w	80029d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d061      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d146      	bne.n	8002976 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b3f      	ldr	r3, [pc, #252]	; (80029e8 <HAL_RCC_OscConfig+0x4fc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7ff f89b 	bl	8001a28 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7ff f897 	bl	8001a28 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e067      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d108      	bne.n	8002930 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291e:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	492d      	ldr	r1, [pc, #180]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a19      	ldr	r1, [r3, #32]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	430b      	orrs	r3, r1
 8002942:	4927      	ldr	r1, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_RCC_OscConfig+0x4fc>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7ff f86b 	bl	8001a28 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7ff f867 	bl	8001a28 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e037      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x46a>
 8002974:	e02f      	b.n	80029d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_RCC_OscConfig+0x4fc>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff f854 	bl	8001a28 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7ff f850 	bl	8001a28 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e020      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x498>
 80029a2:	e018      	b.n	80029d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e013      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42420060 	.word	0x42420060

080029ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d0      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b6a      	ldr	r3, [pc, #424]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d910      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4965      	ldr	r1, [pc, #404]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b63      	ldr	r3, [pc, #396]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b8      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	4b59      	ldr	r3, [pc, #356]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a58      	ldr	r2, [pc, #352]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a60:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a52      	ldr	r2, [pc, #328]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6c:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	494d      	ldr	r1, [pc, #308]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d040      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d115      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aaa:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e073      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06b      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aca:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4936      	ldr	r1, [pc, #216]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002adc:	f7fe ffa4 	bl	8001a28 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae4:	f7fe ffa0 	bl	8001a28 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e053      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 020c 	and.w	r2, r3, #12
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1eb      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d210      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	4922      	ldr	r1, [pc, #136]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e032      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4916      	ldr	r1, [pc, #88]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b66:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	490e      	ldr	r1, [pc, #56]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7a:	f000 f821 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1d0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe ff02 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08007de4 	.word	0x08007de4
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	b490      	push	{r4, r7}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bc8:	1d3c      	adds	r4, r7, #4
 8002bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bea:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d002      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x46>
 8002bfe:	e02d      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c02:	623b      	str	r3, [r7, #32]
      break;
 8002c04:	e02d      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	0c9b      	lsrs	r3, r3, #18
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c12:	4413      	add	r3, r2
 8002c14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c5b      	lsrs	r3, r3, #17
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c32:	4413      	add	r3, r2
 8002c34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c3e:	fb02 f203 	mul.w	r2, r2, r3
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e004      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	623b      	str	r3, [r7, #32]
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c5e:	623b      	str	r3, [r7, #32]
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc90      	pop	{r4, r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	08007d98 	.word	0x08007d98
 8002c74:	08007da8 	.word	0x08007da8
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	007a1200 	.word	0x007a1200
 8002c80:	003d0900 	.word	0x003d0900

08002c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	20000000 	.word	0x20000000

08002c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c9c:	f7ff fff2 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	08007df4 	.word	0x08007df4

08002cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc4:	f7ff ffde 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4601      	mov	r1, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0adb      	lsrs	r3, r3, #11
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08007df4 	.word	0x08007df4

08002ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <RCC_Delay+0x34>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <RCC_Delay+0x38>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0a5b      	lsrs	r3, r3, #9
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d04:	bf00      	nop
  }
  while (Delay --);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1e5a      	subs	r2, r3, #1
 8002d0a:	60fa      	str	r2, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f9      	bne.n	8002d04 <RCC_Delay+0x1c>
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	10624dd3 	.word	0x10624dd3

08002d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e041      	b.n	8002dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fa96 	bl	800127c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f000 fa64 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d001      	beq.n	8002ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e03a      	b.n	8002e52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <HAL_TIM_Base_Start_IT+0x98>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x58>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e06:	d009      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x58>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x58>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d111      	bne.n	8002e40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d010      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3e:	e007      	b.n	8002e50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800

08002e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0202 	mvn.w	r2, #2
 8002e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f9a4 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f997 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f9a6 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0204 	mvn.w	r2, #4
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f97a 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f96d 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f97c 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0208 	mvn.w	r2, #8
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2204      	movs	r2, #4
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f950 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f943 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f952 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0210 	mvn.w	r2, #16
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2208      	movs	r2, #8
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f926 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f919 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f928 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10e      	bne.n	8002fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0201 	mvn.w	r2, #1
 8002fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd ff1a 	bl	8000e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b80      	cmp	r3, #128	; 0x80
 8002ff8:	d10e      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d107      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa6b 	bl	80034ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f8ec 	bl	800321c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b20      	cmp	r3, #32
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0220 	mvn.w	r2, #32
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fa36 	bl	80034dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_TIM_ConfigClockSource+0x18>
 800308c:	2302      	movs	r3, #2
 800308e:	e0a6      	b.n	80031de <HAL_TIM_ConfigClockSource+0x166>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d067      	beq.n	8003198 <HAL_TIM_ConfigClockSource+0x120>
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d80b      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x6c>
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d073      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0x140>
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d802      	bhi.n	80030da <HAL_TIM_ConfigClockSource+0x62>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d06f      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030d8:	e078      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d06c      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0x140>
 80030de:	2b30      	cmp	r3, #48	; 0x30
 80030e0:	d06a      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030e2:	e073      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030e4:	2b70      	cmp	r3, #112	; 0x70
 80030e6:	d00d      	beq.n	8003104 <HAL_TIM_ConfigClockSource+0x8c>
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d804      	bhi.n	80030f6 <HAL_TIM_ConfigClockSource+0x7e>
 80030ec:	2b50      	cmp	r3, #80	; 0x50
 80030ee:	d033      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0xe0>
 80030f0:	2b60      	cmp	r3, #96	; 0x60
 80030f2:	d041      	beq.n	8003178 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030f4:	e06a      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	d066      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x152>
 80030fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003100:	d017      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003102:	e063      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f000 f965 	bl	80033e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003126:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]
      break;
 8003130:	e04c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6899      	ldr	r1, [r3, #8]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f000 f94e 	bl	80033e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003154:	609a      	str	r2, [r3, #8]
      break;
 8003156:	e039      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	461a      	mov	r2, r3
 8003166:	f000 f8c5 	bl	80032f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2150      	movs	r1, #80	; 0x50
 8003170:	4618      	mov	r0, r3
 8003172:	f000 f91c 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8003176:	e029      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	461a      	mov	r2, r3
 8003186:	f000 f8e3 	bl	8003350 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2160      	movs	r1, #96	; 0x60
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f90c 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8003196:	e019      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	461a      	mov	r2, r3
 80031a6:	f000 f8a5 	bl	80032f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2140      	movs	r1, #64	; 0x40
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f8fc 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 80031b6:	e009      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 f8f3 	bl	80033ae <TIM_ITRx_SetConfig>
        break;
 80031c8:	e000      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <TIM_Base_SetConfig+0xb8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_Base_SetConfig+0x30>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324e:	d007      	beq.n	8003260 <TIM_Base_SetConfig+0x30>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a26      	ldr	r2, [pc, #152]	; (80032ec <TIM_Base_SetConfig+0xbc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_Base_SetConfig+0x30>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <TIM_Base_SetConfig+0xc0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d108      	bne.n	8003272 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <TIM_Base_SetConfig+0xb8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00b      	beq.n	8003292 <TIM_Base_SetConfig+0x62>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003280:	d007      	beq.n	8003292 <TIM_Base_SetConfig+0x62>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a19      	ldr	r2, [pc, #100]	; (80032ec <TIM_Base_SetConfig+0xbc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d003      	beq.n	8003292 <TIM_Base_SetConfig+0x62>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <TIM_Base_SetConfig+0xc0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d108      	bne.n	80032a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <TIM_Base_SetConfig+0xb8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d103      	bne.n	80032d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	615a      	str	r2, [r3, #20]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000800 	.word	0x40000800

080032f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	f023 0201 	bic.w	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800331e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 030a 	bic.w	r3, r3, #10
 8003330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 0210 	bic.w	r2, r3, #16
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800337a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	031b      	lsls	r3, r3, #12
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800338c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f043 0307 	orr.w	r3, r3, #7
 80033d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	609a      	str	r2, [r3, #8]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b087      	sub	sp, #28
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	021a      	lsls	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	431a      	orrs	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4313      	orrs	r3, r2
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	609a      	str	r2, [r3, #8]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003434:	2302      	movs	r3, #2
 8003436:	e046      	b.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d009      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10c      	bne.n	80034b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800

080034dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e03f      	b.n	8003592 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd ff54 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	; 0x24
 8003530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fc29 	bl	8003d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d153      	bne.n	800365e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_UART_Transmit_DMA+0x26>
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e04c      	b.n	8003660 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_UART_Transmit_DMA+0x38>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e045      	b.n	8003660 <HAL_UART_Transmit_DMA+0xc4>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	; 0x21
 80035f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_UART_Transmit_DMA+0xcc>)
 8003602:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	4a18      	ldr	r2, [pc, #96]	; (800366c <HAL_UART_Transmit_DMA+0xd0>)
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4a17      	ldr	r2, [pc, #92]	; (8003670 <HAL_UART_Transmit_DMA+0xd4>)
 8003612:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	2200      	movs	r2, #0
 800361a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3304      	adds	r3, #4
 8003630:	461a      	mov	r2, r3
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	f7fe fb8c 	bl	8001d50 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003640:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003658:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
  }
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	080039bd 	.word	0x080039bd
 800366c:	08003a0f 	.word	0x08003a0f
 8003670:	08003aaf 	.word	0x08003aaf

08003674 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	4613      	mov	r3, r2
 8003680:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b20      	cmp	r3, #32
 800368c:	d166      	bne.n	800375c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_UART_Receive_DMA+0x26>
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e05f      	b.n	800375e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Receive_DMA+0x38>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e058      	b.n	800375e <HAL_UART_Receive_DMA+0xea>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	88fa      	ldrh	r2, [r7, #6]
 80036be:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2222      	movs	r2, #34	; 0x22
 80036ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	4a25      	ldr	r2, [pc, #148]	; (8003768 <HAL_UART_Receive_DMA+0xf4>)
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036da:	4a24      	ldr	r2, [pc, #144]	; (800376c <HAL_UART_Receive_DMA+0xf8>)
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	4a23      	ldr	r2, [pc, #140]	; (8003770 <HAL_UART_Receive_DMA+0xfc>)
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	2200      	movs	r2, #0
 80036ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	f7fe fb23 	bl	8001d50 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003736:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003756:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	08003a2b 	.word	0x08003a2b
 800376c:	08003a93 	.word	0x08003a93
 8003770:	08003aaf 	.word	0x08003aaf

08003774 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10d      	bne.n	80037c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_UART_IRQHandler+0x52>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa6c 	bl	8003c9c <UART_Receive_IT>
      return;
 80037c4:	e0d1      	b.n	800396a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80b0 	beq.w	800392e <HAL_UART_IRQHandler+0x1ba>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <HAL_UART_IRQHandler+0x70>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80a5 	beq.w	800392e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_UART_IRQHandler+0x90>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_UART_IRQHandler+0xb0>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	f043 0202 	orr.w	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_UART_IRQHandler+0xd0>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	f043 0204 	orr.w	r2, r3, #4
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00f      	beq.n	800386e <HAL_UART_IRQHandler+0xfa>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_UART_IRQHandler+0xee>
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	f043 0208 	orr.w	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d078      	beq.n	8003968 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_UART_IRQHandler+0x11c>
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa06 	bl	8003c9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <HAL_UART_IRQHandler+0x144>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d031      	beq.n	800391c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f957 	bl	8003b6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d023      	beq.n	8003914 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	4a21      	ldr	r2, [pc, #132]	; (8003970 <HAL_UART_IRQHandler+0x1fc>)
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fa8d 	bl	8001e10 <HAL_DMA_Abort_IT>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d016      	beq.n	800392a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003906:	4610      	mov	r0, r2
 8003908:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390a:	e00e      	b.n	800392a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f84c 	bl	80039aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003912:	e00a      	b.n	800392a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f848 	bl	80039aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391a:	e006      	b.n	800392a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f844 	bl	80039aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003928:	e01e      	b.n	8003968 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392a:	bf00      	nop
    return;
 800392c:	e01c      	b.n	8003968 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_UART_IRQHandler+0x1d6>
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f943 	bl	8003bce <UART_Transmit_IT>
    return;
 8003948:	e00f      	b.n	800396a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_UART_IRQHandler+0x1f6>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f984 	bl	8003c6c <UART_EndTransmit_IT>
    return;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003968:	bf00      	nop
  }
}
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	08003ba7 	.word	0x08003ba7

08003974 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d113      	bne.n	8003a00 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ec:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039fc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039fe:	e002      	b.n	8003a06 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff ffb7 	bl	8003974 <HAL_UART_TxCpltCallback>
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f7ff ffb2 	bl	8003986 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11e      	bne.n	8003a84 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a5a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7fd fa05 	bl	8000e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7ff ff79 	bl	8003998 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf14      	ite	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	2300      	moveq	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b21      	cmp	r3, #33	; 0x21
 8003ae0:	d108      	bne.n	8003af4 <UART_DMAError+0x46>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2200      	movs	r2, #0
 8003aec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003aee:	68b8      	ldr	r0, [r7, #8]
 8003af0:	f000 f827 	bl	8003b42 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b22      	cmp	r3, #34	; 0x22
 8003b14:	d108      	bne.n	8003b28 <UART_DMAError+0x7a>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b22:	68b8      	ldr	r0, [r7, #8]
 8003b24:	f000 f822 	bl	8003b6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	f043 0210 	orr.w	r2, r3, #16
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b34:	68b8      	ldr	r0, [r7, #8]
 8003b36:	f7ff ff38 	bl	80039aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b58:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff fef2 	bl	80039aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b21      	cmp	r3, #33	; 0x21
 8003be0:	d13e      	bne.n	8003c60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	d114      	bne.n	8003c16 <UART_Transmit_IT+0x48>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d110      	bne.n	8003c16 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	621a      	str	r2, [r3, #32]
 8003c14:	e008      	b.n	8003c28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6211      	str	r1, [r2, #32]
 8003c20:	781a      	ldrb	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4619      	mov	r1, r3
 8003c36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10f      	bne.n	8003c5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff fe71 	bl	8003974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b22      	cmp	r3, #34	; 0x22
 8003cae:	d170      	bne.n	8003d92 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d117      	bne.n	8003cea <UART_Receive_IT+0x4e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d113      	bne.n	8003cea <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ce8:	e026      	b.n	8003d38 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfc:	d007      	beq.n	8003d0e <UART_Receive_IT+0x72>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <UART_Receive_IT+0x80>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e008      	b.n	8003d2e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4619      	mov	r1, r3
 8003d46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d120      	bne.n	8003d8e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0220 	bic.w	r2, r2, #32
 8003d5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fd f885 	bl	8000e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e002      	b.n	8003d94 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e000      	b.n	8003d94 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
  }
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dd6:	f023 030c 	bic.w	r3, r3, #12
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	430b      	orrs	r3, r1
 8003de2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <UART_SetConfig+0x114>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d103      	bne.n	8003e0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e04:	f7fe ff5c 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	e002      	b.n	8003e12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7fe ff44 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8003e10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009a      	lsls	r2, r3, #2
 8003e1c:	441a      	add	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	4a22      	ldr	r2, [pc, #136]	; (8003eb4 <UART_SetConfig+0x118>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	0119      	lsls	r1, r3, #4
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009a      	lsls	r2, r3, #2
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <UART_SetConfig+0x118>)
 8003e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2064      	movs	r0, #100	; 0x64
 8003e52:	fb00 f303 	mul.w	r3, r0, r3
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	3332      	adds	r3, #50	; 0x32
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <UART_SetConfig+0x118>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e68:	4419      	add	r1, r3
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009a      	lsls	r2, r3, #2
 8003e74:	441a      	add	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <UART_SetConfig+0x118>)
 8003e82:	fba3 0302 	umull	r0, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2064      	movs	r0, #100	; 0x64
 8003e8a:	fb00 f303 	mul.w	r3, r0, r3
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	3332      	adds	r3, #50	; 0x32
 8003e94:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <UART_SetConfig+0x118>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	f003 020f 	and.w	r2, r3, #15
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	440a      	add	r2, r1
 8003ea6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	51eb851f 	.word	0x51eb851f

08003eb8 <setProgram>:
#include <string.h>
#include<ctype.h>
#include<stdlib.h>
#include<main.h>
#include<stm32f1xx.h>
void setProgram(uint8_t *msg, struct Subroutine *data) {
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
	char buffor[10] = "";
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	f107 0310 	add.w	r3, r7, #16
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	809a      	strh	r2, [r3, #4]
	uint8_t i = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	75bb      	strb	r3, [r7, #22]
	memset(buffor, '\0', sizeof(buffor));
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	220a      	movs	r2, #10
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fb69 	bl	80045b4 <memset>
	strncpy(buffor, (char*) msg, 4);
 8003ee2:	f107 030c 	add.w	r3, r7, #12
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 f8b7 	bl	800505e <strncpy>
	if (strncmp((char*) msg, "SET", 3) == 0) { //-------------SET-------------
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	492f      	ldr	r1, [pc, #188]	; (8003fb0 <setProgram+0xf8>)
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f001 f8a0 	bl	800503a <strncmp>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d120      	bne.n	8003f42 <setProgram+0x8a>
		msg = przewinDo(msg, ':');
 8003f00:	213a      	movs	r1, #58	; 0x3a
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f974 	bl	80041f0 <przewinDo>
 8003f08:	6078      	str	r0, [r7, #4]

		//----------odszyfrowanie temperatur----------

		for (uint8_t i = 0; i < 6; i++) {
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	75fb      	strb	r3, [r7, #23]
 8003f0e:	e009      	b.n	8003f24 <setProgram+0x6c>
			msg = readTemperature(msg, data, i);
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	461a      	mov	r2, r3
 8003f14:	6839      	ldr	r1, [r7, #0]
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f97e 	bl	8004218 <readTemperature>
 8003f1c:	6078      	str	r0, [r7, #4]
		for (uint8_t i = 0; i < 6; i++) {
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	3301      	adds	r3, #1
 8003f22:	75fb      	strb	r3, [r7, #23]
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d9f2      	bls.n	8003f10 <setProgram+0x58>
		}
		activeBrewing(*data);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	466c      	mov	r4, sp
 8003f2e:	f103 0210 	add.w	r2, r3, #16
 8003f32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f36:	e884 0003 	stmia.w	r4, {r0, r1}
 8003f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f3c:	f000 f846 	bl	8003fcc <activeBrewing>
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
	} else {

	}

}
 8003f40:	e031      	b.n	8003fa6 <setProgram+0xee>
	} else if (strncmp((char*) msg, "STOP", 4) == 0) { //--------STOP--------------
 8003f42:	2204      	movs	r2, #4
 8003f44:	491b      	ldr	r1, [pc, #108]	; (8003fb4 <setProgram+0xfc>)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f001 f877 	bl	800503a <strncmp>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <setProgram+0xa2>
		subroutine_Init(data);
 8003f52:	6838      	ldr	r0, [r7, #0]
 8003f54:	f000 f860 	bl	8004018 <subroutine_Init>
}
 8003f58:	e025      	b.n	8003fa6 <setProgram+0xee>
	} else if (strstr((char*) msg, "P1")) { //----------P1-------------
 8003f5a:	4917      	ldr	r1, [pc, #92]	; (8003fb8 <setProgram+0x100>)
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f001 f893 	bl	8005088 <strstr>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00c      	beq.n	8003f82 <setProgram+0xca>
		subroutine_Init(data);
 8003f68:	6838      	ldr	r0, [r7, #0]
 8003f6a:	f000 f855 	bl	8004018 <subroutine_Init>
		startCounterTime = 0;
 8003f6e:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <setProgram+0x104>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
		data->pumpingTime = 30;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	221e      	movs	r2, #30
 8003f78:	729a      	strb	r2, [r3, #10]
		startPumping = 1;
 8003f7a:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <setProgram+0x108>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
}
 8003f80:	e011      	b.n	8003fa6 <setProgram+0xee>
	} else if (strstr((char*) msg, "P0")) { //-----------P0--------------
 8003f82:	4910      	ldr	r1, [pc, #64]	; (8003fc4 <setProgram+0x10c>)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f001 f87f 	bl	8005088 <strstr>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <setProgram+0xee>
		data->pumpingTime = 0;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	729a      	strb	r2, [r3, #10]
		startPumping = 0;
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <setProgram+0x108>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2108      	movs	r1, #8
 8003fa0:	4809      	ldr	r0, [pc, #36]	; (8003fc8 <setProgram+0x110>)
 8003fa2:	f7fe fa50 	bl	8002446 <HAL_GPIO_WritePin>
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	08007dac 	.word	0x08007dac
 8003fb4:	08007db0 	.word	0x08007db0
 8003fb8:	08007db8 	.word	0x08007db8
 8003fbc:	20000200 	.word	0x20000200
 8003fc0:	20000341 	.word	0x20000341
 8003fc4:	08007dbc 	.word	0x08007dbc
 8003fc8:	40010c00 	.word	0x40010c00

08003fcc <activeBrewing>:

	}
//--------przewin msg do konca------------
	msg = przewinDo(msg, '\0');
}
void activeBrewing(Subroutine data) {
 8003fcc:	b084      	sub	sp, #16
 8003fce:	b490      	push	{r4, r7}
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	f107 0408 	add.w	r4, r7, #8
 8003fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//-----pętla grzania-------
	extern uint32_t CounterHeating;
	CounterHeating = 0;
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <activeBrewing+0x40>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
	if (data.regType == BANGBANG) {
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <activeBrewing+0x28>
		startBangBang = true;
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <activeBrewing+0x44>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
		startPIDReg = false;
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <activeBrewing+0x48>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
		startBangBang = false;
		startPIDReg = true;
		//grzanieRegPID(data.heatingCycle[i]);
	}

}
 8003ff2:	e005      	b.n	8004000 <activeBrewing+0x34>
		startBangBang = false;
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <activeBrewing+0x44>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
		startPIDReg = true;
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <activeBrewing+0x48>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	bc90      	pop	{r4, r7}
 8004006:	b004      	add	sp, #16
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000208 	.word	0x20000208
 8004010:	2000029b 	.word	0x2000029b
 8004014:	2000029d 	.word	0x2000029d

08004018 <subroutine_Init>:
void subroutine_Init(struct Subroutine *data) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	startPIDReg = false;
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <subroutine_Init+0x70>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
	startBangBang = false;
 8004026:	4b19      	ldr	r3, [pc, #100]	; (800408c <subroutine_Init+0x74>)
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
	startPumping = false;
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <subroutine_Init+0x78>)
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 5; i++)
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e013      	b.n	8004060 <subroutine_Init+0x48>
		for (int j = 0; j < 2; j++)
 8004038:	2300      	movs	r3, #0
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	e00a      	b.n	8004054 <subroutine_Init+0x3c>
			data->heatingCycle[i][j] = 0;
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	441a      	add	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4413      	add	r3, r2
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 2; j++)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3301      	adds	r3, #1
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b01      	cmp	r3, #1
 8004058:	ddf1      	ble.n	800403e <subroutine_Init+0x26>
	for (int i = 0; i < 5; i++)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3301      	adds	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b04      	cmp	r3, #4
 8004064:	dde8      	ble.n	8004038 <subroutine_Init+0x20>
	data->pumpingTime = 0;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
 800406c:	2200      	movs	r2, #0
 800406e:	2108      	movs	r1, #8
 8004070:	4808      	ldr	r0, [pc, #32]	; (8004094 <subroutine_Init+0x7c>)
 8004072:	f7fe f9e8 	bl	8002446 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRZALKA_PORT, GRZALKA_PIN, GPIO_PIN_RESET);
 8004076:	2200      	movs	r2, #0
 8004078:	2110      	movs	r1, #16
 800407a:	4806      	ldr	r0, [pc, #24]	; (8004094 <subroutine_Init+0x7c>)
 800407c:	f7fe f9e3 	bl	8002446 <HAL_GPIO_WritePin>
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	2000029d 	.word	0x2000029d
 800408c:	2000029b 	.word	0x2000029b
 8004090:	20000341 	.word	0x20000341
 8004094:	40010c00 	.word	0x40010c00

08004098 <pumping>:
void pumping(uint8_t timeOfPumping) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
	extern uint32_t CounterPump;
	if (CounterPump <= timeOfPumping * 60) {
 80040a2:	79fa      	ldrb	r2, [r7, #7]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <pumping+0x44>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d305      	bcc.n	80040c2 <pumping+0x2a>
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_SET);
 80040b6:	2201      	movs	r2, #1
 80040b8:	2108      	movs	r1, #8
 80040ba:	4809      	ldr	r0, [pc, #36]	; (80040e0 <pumping+0x48>)
 80040bc:	f7fe f9c3 	bl	8002446 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
		startPumping = false;
	}
}
 80040c0:	e007      	b.n	80040d2 <pumping+0x3a>
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
 80040c2:	2200      	movs	r2, #0
 80040c4:	2108      	movs	r1, #8
 80040c6:	4806      	ldr	r0, [pc, #24]	; (80040e0 <pumping+0x48>)
 80040c8:	f7fe f9bd 	bl	8002446 <HAL_GPIO_WritePin>
		startPumping = false;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <pumping+0x4c>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000204 	.word	0x20000204
 80040e0:	40010c00 	.word	0x40010c00
 80040e4:	20000341 	.word	0x20000341

080040e8 <grzanieRegDwustawna>:
void grzanieRegDwustawna(uint8_t setTemperature, uint8_t timeOfHeating,
		double hysteresis, uint8_t *numberOfCycle) {
 80040e8:	b5b0      	push	{r4, r5, r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	e9c7 2300 	strd	r2, r3, [r7]
 80040f2:	4603      	mov	r3, r0
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	460b      	mov	r3, r1
 80040f8:	73bb      	strb	r3, [r7, #14]
	extern bool isHeating;
	extern double measuredTemperature;
	extern uint32_t CounterHeating;
	if (CounterHeating <= timeOfHeating * 60) {
 80040fa:	7bba      	ldrb	r2, [r7, #14]
 80040fc:	4613      	mov	r3, r2
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	461a      	mov	r2, r3
 8004106:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <grzanieRegDwustawna+0xec>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d33e      	bcc.n	800418c <grzanieRegDwustawna+0xa4>
		if ((double) setTemperature >= measuredTemperature - hysteresis) {
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc f967 	bl	80003e4 <__aeabi_ui2d>
 8004116:	4604      	mov	r4, r0
 8004118:	460d      	mov	r5, r1
 800411a:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <grzanieRegDwustawna+0xf0>)
 800411c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004124:	f7fc f820 	bl	8000168 <__aeabi_dsub>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4620      	mov	r0, r4
 800412e:	4629      	mov	r1, r5
 8004130:	f7fc fc58 	bl	80009e4 <__aeabi_dcmpge>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <grzanieRegDwustawna+0x64>
			isHeating = true;
 800413a:	4b28      	ldr	r3, [pc, #160]	; (80041dc <grzanieRegDwustawna+0xf4>)
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GRZALKA_PORT, GRZALKA_PIN, GPIO_PIN_SET);
 8004140:	2201      	movs	r2, #1
 8004142:	2110      	movs	r1, #16
 8004144:	4826      	ldr	r0, [pc, #152]	; (80041e0 <grzanieRegDwustawna+0xf8>)
 8004146:	f7fe f97e 	bl	8002446 <HAL_GPIO_WritePin>
			startPumping = true;
			extern uint32_t CounterPump;
			CounterPump = 0;
		}
	}
}
 800414a:	e03e      	b.n	80041ca <grzanieRegDwustawna+0xe2>
		} else if ((double) setTemperature < measuredTemperature + hysteresis) {
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc f948 	bl	80003e4 <__aeabi_ui2d>
 8004154:	4604      	mov	r4, r0
 8004156:	460d      	mov	r5, r1
 8004158:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <grzanieRegDwustawna+0xf0>)
 800415a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800415e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004162:	f7fc f803 	bl	800016c <__adddf3>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4620      	mov	r0, r4
 800416c:	4629      	mov	r1, r5
 800416e:	f7fc fc25 	bl	80009bc <__aeabi_dcmplt>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d100      	bne.n	800417a <grzanieRegDwustawna+0x92>
}
 8004178:	e027      	b.n	80041ca <grzanieRegDwustawna+0xe2>
			isHeating = false;
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <grzanieRegDwustawna+0xf4>)
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GRZALKA_PORT, GRZALKA_PIN, GPIO_PIN_RESET);
 8004180:	2200      	movs	r2, #0
 8004182:	2110      	movs	r1, #16
 8004184:	4816      	ldr	r0, [pc, #88]	; (80041e0 <grzanieRegDwustawna+0xf8>)
 8004186:	f7fe f95e 	bl	8002446 <HAL_GPIO_WritePin>
}
 800418a:	e01e      	b.n	80041ca <grzanieRegDwustawna+0xe2>
		HAL_GPIO_WritePin(GRZALKA_PORT, GRZALKA_PIN, GPIO_PIN_RESET);
 800418c:	2200      	movs	r2, #0
 800418e:	2110      	movs	r1, #16
 8004190:	4813      	ldr	r0, [pc, #76]	; (80041e0 <grzanieRegDwustawna+0xf8>)
 8004192:	f7fe f958 	bl	8002446 <HAL_GPIO_WritePin>
		CounterHeating = 0;
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <grzanieRegDwustawna+0xec>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
		if (*numberOfCycle < 4)
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d806      	bhi.n	80041b2 <grzanieRegDwustawna+0xca>
			(*numberOfCycle)++;
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	701a      	strb	r2, [r3, #0]
}
 80041b0:	e00b      	b.n	80041ca <grzanieRegDwustawna+0xe2>
			*numberOfCycle = 0;
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
			startBangBang = false;
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <grzanieRegDwustawna+0xfc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
			startPumping = true;
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <grzanieRegDwustawna+0x100>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	701a      	strb	r2, [r3, #0]
			CounterPump = 0;
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <grzanieRegDwustawna+0x104>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bdb0      	pop	{r4, r5, r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000208 	.word	0x20000208
 80041d8:	200002a0 	.word	0x200002a0
 80041dc:	200001fc 	.word	0x200001fc
 80041e0:	40010c00 	.word	0x40010c00
 80041e4:	2000029b 	.word	0x2000029b
 80041e8:	20000341 	.word	0x20000341
 80041ec:	20000204 	.word	0x20000204

080041f0 <przewinDo>:
void grzanieRegPID(uint8_t *heatingCycle) {

}
uint8_t* przewinDo(uint8_t *msg, uint8_t znak) {
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
	while (!(*(++msg) == znak))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3301      	adds	r3, #1
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	429a      	cmp	r2, r3
 800420a:	d1f7      	bne.n	80041fc <przewinDo+0xc>
		;
	return msg;
 800420c:	687b      	ldr	r3, [r7, #4]
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <readTemperature>:
uint8_t* readTemperature(uint8_t *msg, Subroutine *dataTemp,
		uint8_t currentCycle) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	71fb      	strb	r3, [r7, #7]
//--------jezeli faktycznieeee poprawnie uzyte----------
	if ((*msg) != '\0') {
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d07a      	beq.n	8004324 <readTemperature+0x10c>
		//-------przewiń do S------
		if (strstr((char*) msg, "S")) {
 800422e:	2153      	movs	r1, #83	; 0x53
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 feed 	bl	8005010 <strchr>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d062      	beq.n	8004302 <readTemperature+0xea>
			while ((*msg++) != 'S')
 800423c:	bf00      	nop
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	60fa      	str	r2, [r7, #12]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b53      	cmp	r3, #83	; 0x53
 8004248:	d1f9      	bne.n	800423e <readTemperature+0x26>
				;
			//-------PID lub dwustawna--------
			dataTemp->regType = *msg == '0' ? BANGBANG : PID;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b30      	cmp	r3, #48	; 0x30
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	72da      	strb	r2, [r3, #11]
			if (dataTemp->regType == PID)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	7adb      	ldrb	r3, [r3, #11]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d105      	bne.n	8004272 <readTemperature+0x5a>
				msg = przewinDo(msg, 'T');
 8004266:	2154      	movs	r1, #84	; 0x54
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff ffc1 	bl	80041f0 <przewinDo>
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	e047      	b.n	8004302 <readTemperature+0xea>
			else if (dataTemp->regType == BANGBANG) { //histereza
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	7adb      	ldrb	r3, [r3, #11]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d143      	bne.n	8004302 <readTemperature+0xea>
				msg = przewinDo(msg, 'H');
 800427a:	2148      	movs	r1, #72	; 0x48
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff ffb7 	bl	80041f0 <przewinDo>
 8004282:	60f8      	str	r0, [r7, #12]
				msg = convDouble(msg, &dataTemp->hist);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3310      	adds	r3, #16
 8004288:	4619      	mov	r1, r3
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f88d 	bl	80043aa <convDouble>
 8004290:	60f8      	str	r0, [r7, #12]
				*msg++;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3301      	adds	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
		}
		//-------Wypełnienie cykli--------

		/*tymczasowa convna temp służy do
		 zamienienia kilkucyfrowego ciągu znaków w liczbę*/
		while (*msg != ';') {
 8004298:	e033      	b.n	8004302 <readTemperature+0xea>

			//-----Pobranie temperatury------
			if (*msg == 'T') {
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b54      	cmp	r3, #84	; 0x54
 80042a0:	d109      	bne.n	80042b6 <readTemperature+0x9e>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][0]);
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	4413      	add	r3, r2
 80042aa:	4619      	mov	r1, r3
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f840 	bl	8004332 <conv>
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	e025      	b.n	8004302 <readTemperature+0xea>

			} else if (*msg == 'H') { //histereza
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b48      	cmp	r3, #72	; 0x48
 80042bc:	d107      	bne.n	80042ce <readTemperature+0xb6>
				msg = convDouble(msg, &dataTemp->hist);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3310      	adds	r3, #16
 80042c2:	4619      	mov	r1, r3
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f870 	bl	80043aa <convDouble>
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	e019      	b.n	8004302 <readTemperature+0xea>
				//---------Pobranie czasu-------
			} else if (*msg == 't') {
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b74      	cmp	r3, #116	; 0x74
 80042d4:	d10a      	bne.n	80042ec <readTemperature+0xd4>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][1]);
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	3301      	adds	r3, #1
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4413      	add	r3, r2
 80042e0:	4619      	mov	r1, r3
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f825 	bl	8004332 <conv>
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	e00a      	b.n	8004302 <readTemperature+0xea>
			} else if (*msg == 'P') {
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b50      	cmp	r3, #80	; 0x50
 80042f2:	d10b      	bne.n	800430c <readTemperature+0xf4>
				msg = conv(msg, &dataTemp->pumpingTime);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	330a      	adds	r3, #10
 80042f8:	4619      	mov	r1, r3
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f819 	bl	8004332 <conv>
 8004300:	60f8      	str	r0, [r7, #12]
		while (*msg != ';') {
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b3b      	cmp	r3, #59	; 0x3b
 8004308:	d1c7      	bne.n	800429a <readTemperature+0x82>
 800430a:	e000      	b.n	800430e <readTemperature+0xf6>
			} else
				break;
 800430c:	bf00      	nop

		}
		return (*msg) != '\0' ? ++msg : msg; //zwroc wskaznik w ostatnim polozeniu
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <readTemperature+0x108>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3301      	adds	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	e004      	b.n	800432a <readTemperature+0x112>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	e002      	b.n	800432a <readTemperature+0x112>
	} else
		return msg = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
	//return (*msg) != '\0' ? ++msg : msg; //zwroc wskaznik w ostatnim polozeniu
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <conv>:
uint8_t* conv(uint8_t *msg, uint8_t *digit) {
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
	uint8_t temp[3] = { 'a' };
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	2100      	movs	r1, #0
 8004342:	460a      	mov	r2, r1
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	460a      	mov	r2, r1
 8004348:	709a      	strb	r2, [r3, #2]
 800434a:	2361      	movs	r3, #97	; 0x61
 800434c:	733b      	strb	r3, [r7, #12]
	uint8_t i;
	++msg;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3301      	adds	r3, #1
 8004352:	607b      	str	r3, [r7, #4]
	for (i = 0; isdigit(*msg); i++) {
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	e00d      	b.n	8004376 <conv+0x44>
		temp[i] = *msg++;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	7819      	ldrb	r1, [r3, #0]
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	4413      	add	r3, r2
 800436a:	460a      	mov	r2, r1
 800436c:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (i = 0; isdigit(*msg); i++) {
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	3301      	adds	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
 8004376:	f000 f8f5 	bl	8004564 <__locale_ctype_ptr>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <conv+0x28>
	}
	*digit = atoi((char*) temp);
 800438e:	f107 030c 	add.w	r3, r7, #12
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f899 	bl	80044ca <atoi>
 8004398:	4603      	mov	r3, r0
 800439a:	b2da      	uxtb	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	701a      	strb	r2, [r3, #0]
	return msg;
 80043a0:	687b      	ldr	r3, [r7, #4]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <convDouble>:
uint8_t* convDouble(uint8_t *msg, double *digit) {
 80043aa:	b590      	push	{r4, r7, lr}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
	uint8_t temp[4] = { 'a' };
 80043b4:	2300      	movs	r3, #0
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	2361      	movs	r3, #97	; 0x61
 80043ba:	723b      	strb	r3, [r7, #8]
	uint8_t i;
	++msg;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3301      	adds	r3, #1
 80043c0:	607b      	str	r3, [r7, #4]
	for (i = 0; isdigit(*msg) || *msg == '.' || *msg == ','; i++) {
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	e00d      	b.n	80043e4 <convDouble+0x3a>
		temp[i] = *msg++;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	7819      	ldrb	r1, [r3, #0]
 80043d2:	f107 0310 	add.w	r3, r7, #16
 80043d6:	4413      	add	r3, r2
 80043d8:	460a      	mov	r2, r1
 80043da:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (i = 0; isdigit(*msg) || *msg == '.' || *msg == ','; i++) {
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	3301      	adds	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	f000 f8be 	bl	8004564 <__locale_ctype_ptr>
 80043e8:	4602      	mov	r2, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	4413      	add	r3, r2
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e5      	bne.n	80043c8 <convDouble+0x1e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b2e      	cmp	r3, #46	; 0x2e
 8004402:	d0e1      	beq.n	80043c8 <convDouble+0x1e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b2c      	cmp	r3, #44	; 0x2c
 800440a:	d0dd      	beq.n	80043c8 <convDouble+0x1e>
	}
	(*digit) = atof((char*) temp);
 800440c:	f107 0308 	add.w	r3, r7, #8
 8004410:	4618      	mov	r0, r3
 8004412:	f000 f857 	bl	80044c4 <atof>
 8004416:	4603      	mov	r3, r0
 8004418:	460c      	mov	r4, r1
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	e9c2 3400 	strd	r3, r4, [r2]
	return msg;
 8004420:	687b      	ldr	r3, [r7, #4]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bd90      	pop	{r4, r7, pc}
	...

0800442c <textConversion>:
char* textConversion(double dTemperature, char* targetVariable) {
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b089      	sub	sp, #36	; 0x24
 8004430:	af00      	add	r7, sp, #0
 8004432:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
	char* temp;
	temp = malloc(sizeof(char) * 25);
 8004438:	2019      	movs	r0, #25
 800443a:	f000 f8a1 	bl	8004580 <malloc>
 800443e:	4603      	mov	r3, r0
 8004440:	61fb      	str	r3, [r7, #28]
	char sTemperature[10]="";
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	f107 0314 	add.w	r3, r7, #20
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	809a      	strh	r2, [r3, #4]
	extern double measuredTemperature;
	strcpy(temp, targetVariable);
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	69f8      	ldr	r0, [r7, #28]
 8004454:	f000 fde9 	bl	800502a <strcpy>
	sprintf(temp+strlen(temp), ".val=");
 8004458:	69f8      	ldr	r0, [r7, #28]
 800445a:	f7fb fe79 	bl	8000150 <strlen>
 800445e:	4602      	mov	r2, r0
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <textConversion+0x8c>)
 8004466:	6810      	ldr	r0, [r2, #0]
 8004468:	6018      	str	r0, [r3, #0]
 800446a:	8892      	ldrh	r2, [r2, #4]
 800446c:	809a      	strh	r2, [r3, #4]
	itoa((int)(10.0 * measuredTemperature), sTemperature, 10);
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <textConversion+0x90>)
 8004470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <textConversion+0x94>)
 800447a:	f7fc f82d 	bl	80004d8 <__aeabi_dmul>
 800447e:	4603      	mov	r3, r0
 8004480:	460c      	mov	r4, r1
 8004482:	4618      	mov	r0, r3
 8004484:	4621      	mov	r1, r4
 8004486:	f7fc fad7 	bl	8000a38 <__aeabi_d2iz>
 800448a:	f107 0310 	add.w	r3, r7, #16
 800448e:	220a      	movs	r2, #10
 8004490:	4619      	mov	r1, r3
 8004492:	f000 f861 	bl	8004558 <itoa>
	sprintf(temp + strlen(temp), sTemperature);
 8004496:	69f8      	ldr	r0, [r7, #28]
 8004498:	f7fb fe5a 	bl	8000150 <strlen>
 800449c:	4602      	mov	r2, r0
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f107 0210 	add.w	r2, r7, #16
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fd91 	bl	8004fd0 <siprintf>

	return temp;
 80044ae:	69fb      	ldr	r3, [r7, #28]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3724      	adds	r7, #36	; 0x24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd90      	pop	{r4, r7, pc}
 80044b8:	08007ddc 	.word	0x08007ddc
 80044bc:	200002a0 	.word	0x200002a0
 80044c0:	40240000 	.word	0x40240000

080044c4 <atof>:
 80044c4:	2100      	movs	r1, #0
 80044c6:	f001 bc1b 	b.w	8005d00 <strtod>

080044ca <atoi>:
 80044ca:	220a      	movs	r2, #10
 80044cc:	2100      	movs	r1, #0
 80044ce:	f001 bca5 	b.w	8005e1c <strtol>
	...

080044d4 <__errno>:
 80044d4:	4b01      	ldr	r3, [pc, #4]	; (80044dc <__errno+0x8>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c

080044e0 <__libc_init_array>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	2500      	movs	r5, #0
 80044e4:	4e0c      	ldr	r6, [pc, #48]	; (8004518 <__libc_init_array+0x38>)
 80044e6:	4c0d      	ldr	r4, [pc, #52]	; (800451c <__libc_init_array+0x3c>)
 80044e8:	1ba4      	subs	r4, r4, r6
 80044ea:	10a4      	asrs	r4, r4, #2
 80044ec:	42a5      	cmp	r5, r4
 80044ee:	d109      	bne.n	8004504 <__libc_init_array+0x24>
 80044f0:	f003 fc2e 	bl	8007d50 <_init>
 80044f4:	2500      	movs	r5, #0
 80044f6:	4e0a      	ldr	r6, [pc, #40]	; (8004520 <__libc_init_array+0x40>)
 80044f8:	4c0a      	ldr	r4, [pc, #40]	; (8004524 <__libc_init_array+0x44>)
 80044fa:	1ba4      	subs	r4, r4, r6
 80044fc:	10a4      	asrs	r4, r4, #2
 80044fe:	42a5      	cmp	r5, r4
 8004500:	d105      	bne.n	800450e <__libc_init_array+0x2e>
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004508:	4798      	blx	r3
 800450a:	3501      	adds	r5, #1
 800450c:	e7ee      	b.n	80044ec <__libc_init_array+0xc>
 800450e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004512:	4798      	blx	r3
 8004514:	3501      	adds	r5, #1
 8004516:	e7f2      	b.n	80044fe <__libc_init_array+0x1e>
 8004518:	080080d8 	.word	0x080080d8
 800451c:	080080d8 	.word	0x080080d8
 8004520:	080080d8 	.word	0x080080d8
 8004524:	080080dc 	.word	0x080080dc

08004528 <__itoa>:
 8004528:	1e93      	subs	r3, r2, #2
 800452a:	2b22      	cmp	r3, #34	; 0x22
 800452c:	b510      	push	{r4, lr}
 800452e:	460c      	mov	r4, r1
 8004530:	d904      	bls.n	800453c <__itoa+0x14>
 8004532:	2300      	movs	r3, #0
 8004534:	461c      	mov	r4, r3
 8004536:	700b      	strb	r3, [r1, #0]
 8004538:	4620      	mov	r0, r4
 800453a:	bd10      	pop	{r4, pc}
 800453c:	2a0a      	cmp	r2, #10
 800453e:	d109      	bne.n	8004554 <__itoa+0x2c>
 8004540:	2800      	cmp	r0, #0
 8004542:	da07      	bge.n	8004554 <__itoa+0x2c>
 8004544:	232d      	movs	r3, #45	; 0x2d
 8004546:	700b      	strb	r3, [r1, #0]
 8004548:	2101      	movs	r1, #1
 800454a:	4240      	negs	r0, r0
 800454c:	4421      	add	r1, r4
 800454e:	f001 fc7b 	bl	8005e48 <__utoa>
 8004552:	e7f1      	b.n	8004538 <__itoa+0x10>
 8004554:	2100      	movs	r1, #0
 8004556:	e7f9      	b.n	800454c <__itoa+0x24>

08004558 <itoa>:
 8004558:	f7ff bfe6 	b.w	8004528 <__itoa>

0800455c <__locale_ctype_ptr_l>:
 800455c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004560:	4770      	bx	lr
	...

08004564 <__locale_ctype_ptr>:
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <__locale_ctype_ptr+0x14>)
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <__locale_ctype_ptr+0x18>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf08      	it	eq
 8004570:	4613      	moveq	r3, r2
 8004572:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004576:	4770      	bx	lr
 8004578:	2000000c 	.word	0x2000000c
 800457c:	20000070 	.word	0x20000070

08004580 <malloc>:
 8004580:	4b02      	ldr	r3, [pc, #8]	; (800458c <malloc+0xc>)
 8004582:	4601      	mov	r1, r0
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	f000 b869 	b.w	800465c <_malloc_r>
 800458a:	bf00      	nop
 800458c:	2000000c 	.word	0x2000000c

08004590 <__ascii_mbtowc>:
 8004590:	b082      	sub	sp, #8
 8004592:	b901      	cbnz	r1, 8004596 <__ascii_mbtowc+0x6>
 8004594:	a901      	add	r1, sp, #4
 8004596:	b142      	cbz	r2, 80045aa <__ascii_mbtowc+0x1a>
 8004598:	b14b      	cbz	r3, 80045ae <__ascii_mbtowc+0x1e>
 800459a:	7813      	ldrb	r3, [r2, #0]
 800459c:	600b      	str	r3, [r1, #0]
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	1c10      	adds	r0, r2, #0
 80045a2:	bf18      	it	ne
 80045a4:	2001      	movne	r0, #1
 80045a6:	b002      	add	sp, #8
 80045a8:	4770      	bx	lr
 80045aa:	4610      	mov	r0, r2
 80045ac:	e7fb      	b.n	80045a6 <__ascii_mbtowc+0x16>
 80045ae:	f06f 0001 	mvn.w	r0, #1
 80045b2:	e7f8      	b.n	80045a6 <__ascii_mbtowc+0x16>

080045b4 <memset>:
 80045b4:	4603      	mov	r3, r0
 80045b6:	4402      	add	r2, r0
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d100      	bne.n	80045be <memset+0xa>
 80045bc:	4770      	bx	lr
 80045be:	f803 1b01 	strb.w	r1, [r3], #1
 80045c2:	e7f9      	b.n	80045b8 <memset+0x4>

080045c4 <_free_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4605      	mov	r5, r0
 80045c8:	2900      	cmp	r1, #0
 80045ca:	d043      	beq.n	8004654 <_free_r+0x90>
 80045cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d0:	1f0c      	subs	r4, r1, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bfb8      	it	lt
 80045d6:	18e4      	addlt	r4, r4, r3
 80045d8:	f002 fe17 	bl	800720a <__malloc_lock>
 80045dc:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <_free_r+0x94>)
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	4610      	mov	r0, r2
 80045e2:	b933      	cbnz	r3, 80045f2 <_free_r+0x2e>
 80045e4:	6063      	str	r3, [r4, #4]
 80045e6:	6014      	str	r4, [r2, #0]
 80045e8:	4628      	mov	r0, r5
 80045ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ee:	f002 be0d 	b.w	800720c <__malloc_unlock>
 80045f2:	42a3      	cmp	r3, r4
 80045f4:	d90b      	bls.n	800460e <_free_r+0x4a>
 80045f6:	6821      	ldr	r1, [r4, #0]
 80045f8:	1862      	adds	r2, r4, r1
 80045fa:	4293      	cmp	r3, r2
 80045fc:	bf01      	itttt	eq
 80045fe:	681a      	ldreq	r2, [r3, #0]
 8004600:	685b      	ldreq	r3, [r3, #4]
 8004602:	1852      	addeq	r2, r2, r1
 8004604:	6022      	streq	r2, [r4, #0]
 8004606:	6063      	str	r3, [r4, #4]
 8004608:	6004      	str	r4, [r0, #0]
 800460a:	e7ed      	b.n	80045e8 <_free_r+0x24>
 800460c:	4613      	mov	r3, r2
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	b10a      	cbz	r2, 8004616 <_free_r+0x52>
 8004612:	42a2      	cmp	r2, r4
 8004614:	d9fa      	bls.n	800460c <_free_r+0x48>
 8004616:	6819      	ldr	r1, [r3, #0]
 8004618:	1858      	adds	r0, r3, r1
 800461a:	42a0      	cmp	r0, r4
 800461c:	d10b      	bne.n	8004636 <_free_r+0x72>
 800461e:	6820      	ldr	r0, [r4, #0]
 8004620:	4401      	add	r1, r0
 8004622:	1858      	adds	r0, r3, r1
 8004624:	4282      	cmp	r2, r0
 8004626:	6019      	str	r1, [r3, #0]
 8004628:	d1de      	bne.n	80045e8 <_free_r+0x24>
 800462a:	6810      	ldr	r0, [r2, #0]
 800462c:	6852      	ldr	r2, [r2, #4]
 800462e:	4401      	add	r1, r0
 8004630:	6019      	str	r1, [r3, #0]
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	e7d8      	b.n	80045e8 <_free_r+0x24>
 8004636:	d902      	bls.n	800463e <_free_r+0x7a>
 8004638:	230c      	movs	r3, #12
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	e7d4      	b.n	80045e8 <_free_r+0x24>
 800463e:	6820      	ldr	r0, [r4, #0]
 8004640:	1821      	adds	r1, r4, r0
 8004642:	428a      	cmp	r2, r1
 8004644:	bf01      	itttt	eq
 8004646:	6811      	ldreq	r1, [r2, #0]
 8004648:	6852      	ldreq	r2, [r2, #4]
 800464a:	1809      	addeq	r1, r1, r0
 800464c:	6021      	streq	r1, [r4, #0]
 800464e:	6062      	str	r2, [r4, #4]
 8004650:	605c      	str	r4, [r3, #4]
 8004652:	e7c9      	b.n	80045e8 <_free_r+0x24>
 8004654:	bd38      	pop	{r3, r4, r5, pc}
 8004656:	bf00      	nop
 8004658:	2000021c 	.word	0x2000021c

0800465c <_malloc_r>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	1ccd      	adds	r5, r1, #3
 8004660:	f025 0503 	bic.w	r5, r5, #3
 8004664:	3508      	adds	r5, #8
 8004666:	2d0c      	cmp	r5, #12
 8004668:	bf38      	it	cc
 800466a:	250c      	movcc	r5, #12
 800466c:	2d00      	cmp	r5, #0
 800466e:	4606      	mov	r6, r0
 8004670:	db01      	blt.n	8004676 <_malloc_r+0x1a>
 8004672:	42a9      	cmp	r1, r5
 8004674:	d903      	bls.n	800467e <_malloc_r+0x22>
 8004676:	230c      	movs	r3, #12
 8004678:	6033      	str	r3, [r6, #0]
 800467a:	2000      	movs	r0, #0
 800467c:	bd70      	pop	{r4, r5, r6, pc}
 800467e:	f002 fdc4 	bl	800720a <__malloc_lock>
 8004682:	4a21      	ldr	r2, [pc, #132]	; (8004708 <_malloc_r+0xac>)
 8004684:	6814      	ldr	r4, [r2, #0]
 8004686:	4621      	mov	r1, r4
 8004688:	b991      	cbnz	r1, 80046b0 <_malloc_r+0x54>
 800468a:	4c20      	ldr	r4, [pc, #128]	; (800470c <_malloc_r+0xb0>)
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	b91b      	cbnz	r3, 8004698 <_malloc_r+0x3c>
 8004690:	4630      	mov	r0, r6
 8004692:	f000 fc8d 	bl	8004fb0 <_sbrk_r>
 8004696:	6020      	str	r0, [r4, #0]
 8004698:	4629      	mov	r1, r5
 800469a:	4630      	mov	r0, r6
 800469c:	f000 fc88 	bl	8004fb0 <_sbrk_r>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d124      	bne.n	80046ee <_malloc_r+0x92>
 80046a4:	230c      	movs	r3, #12
 80046a6:	4630      	mov	r0, r6
 80046a8:	6033      	str	r3, [r6, #0]
 80046aa:	f002 fdaf 	bl	800720c <__malloc_unlock>
 80046ae:	e7e4      	b.n	800467a <_malloc_r+0x1e>
 80046b0:	680b      	ldr	r3, [r1, #0]
 80046b2:	1b5b      	subs	r3, r3, r5
 80046b4:	d418      	bmi.n	80046e8 <_malloc_r+0x8c>
 80046b6:	2b0b      	cmp	r3, #11
 80046b8:	d90f      	bls.n	80046da <_malloc_r+0x7e>
 80046ba:	600b      	str	r3, [r1, #0]
 80046bc:	18cc      	adds	r4, r1, r3
 80046be:	50cd      	str	r5, [r1, r3]
 80046c0:	4630      	mov	r0, r6
 80046c2:	f002 fda3 	bl	800720c <__malloc_unlock>
 80046c6:	f104 000b 	add.w	r0, r4, #11
 80046ca:	1d23      	adds	r3, r4, #4
 80046cc:	f020 0007 	bic.w	r0, r0, #7
 80046d0:	1ac3      	subs	r3, r0, r3
 80046d2:	d0d3      	beq.n	800467c <_malloc_r+0x20>
 80046d4:	425a      	negs	r2, r3
 80046d6:	50e2      	str	r2, [r4, r3]
 80046d8:	e7d0      	b.n	800467c <_malloc_r+0x20>
 80046da:	684b      	ldr	r3, [r1, #4]
 80046dc:	428c      	cmp	r4, r1
 80046de:	bf16      	itet	ne
 80046e0:	6063      	strne	r3, [r4, #4]
 80046e2:	6013      	streq	r3, [r2, #0]
 80046e4:	460c      	movne	r4, r1
 80046e6:	e7eb      	b.n	80046c0 <_malloc_r+0x64>
 80046e8:	460c      	mov	r4, r1
 80046ea:	6849      	ldr	r1, [r1, #4]
 80046ec:	e7cc      	b.n	8004688 <_malloc_r+0x2c>
 80046ee:	1cc4      	adds	r4, r0, #3
 80046f0:	f024 0403 	bic.w	r4, r4, #3
 80046f4:	42a0      	cmp	r0, r4
 80046f6:	d005      	beq.n	8004704 <_malloc_r+0xa8>
 80046f8:	1a21      	subs	r1, r4, r0
 80046fa:	4630      	mov	r0, r6
 80046fc:	f000 fc58 	bl	8004fb0 <_sbrk_r>
 8004700:	3001      	adds	r0, #1
 8004702:	d0cf      	beq.n	80046a4 <_malloc_r+0x48>
 8004704:	6025      	str	r5, [r4, #0]
 8004706:	e7db      	b.n	80046c0 <_malloc_r+0x64>
 8004708:	2000021c 	.word	0x2000021c
 800470c:	20000220 	.word	0x20000220

08004710 <__cvt>:
 8004710:	2b00      	cmp	r3, #0
 8004712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004716:	461e      	mov	r6, r3
 8004718:	bfbb      	ittet	lt
 800471a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800471e:	461e      	movlt	r6, r3
 8004720:	2300      	movge	r3, #0
 8004722:	232d      	movlt	r3, #45	; 0x2d
 8004724:	b088      	sub	sp, #32
 8004726:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004728:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800472c:	f027 0720 	bic.w	r7, r7, #32
 8004730:	2f46      	cmp	r7, #70	; 0x46
 8004732:	4614      	mov	r4, r2
 8004734:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004736:	700b      	strb	r3, [r1, #0]
 8004738:	d004      	beq.n	8004744 <__cvt+0x34>
 800473a:	2f45      	cmp	r7, #69	; 0x45
 800473c:	d100      	bne.n	8004740 <__cvt+0x30>
 800473e:	3501      	adds	r5, #1
 8004740:	2302      	movs	r3, #2
 8004742:	e000      	b.n	8004746 <__cvt+0x36>
 8004744:	2303      	movs	r3, #3
 8004746:	aa07      	add	r2, sp, #28
 8004748:	9204      	str	r2, [sp, #16]
 800474a:	aa06      	add	r2, sp, #24
 800474c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004750:	e9cd 3500 	strd	r3, r5, [sp]
 8004754:	4622      	mov	r2, r4
 8004756:	4633      	mov	r3, r6
 8004758:	f001 fc52 	bl	8006000 <_dtoa_r>
 800475c:	2f47      	cmp	r7, #71	; 0x47
 800475e:	4680      	mov	r8, r0
 8004760:	d102      	bne.n	8004768 <__cvt+0x58>
 8004762:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004764:	07db      	lsls	r3, r3, #31
 8004766:	d526      	bpl.n	80047b6 <__cvt+0xa6>
 8004768:	2f46      	cmp	r7, #70	; 0x46
 800476a:	eb08 0905 	add.w	r9, r8, r5
 800476e:	d111      	bne.n	8004794 <__cvt+0x84>
 8004770:	f898 3000 	ldrb.w	r3, [r8]
 8004774:	2b30      	cmp	r3, #48	; 0x30
 8004776:	d10a      	bne.n	800478e <__cvt+0x7e>
 8004778:	2200      	movs	r2, #0
 800477a:	2300      	movs	r3, #0
 800477c:	4620      	mov	r0, r4
 800477e:	4631      	mov	r1, r6
 8004780:	f7fc f912 	bl	80009a8 <__aeabi_dcmpeq>
 8004784:	b918      	cbnz	r0, 800478e <__cvt+0x7e>
 8004786:	f1c5 0501 	rsb	r5, r5, #1
 800478a:	f8ca 5000 	str.w	r5, [sl]
 800478e:	f8da 3000 	ldr.w	r3, [sl]
 8004792:	4499      	add	r9, r3
 8004794:	2200      	movs	r2, #0
 8004796:	2300      	movs	r3, #0
 8004798:	4620      	mov	r0, r4
 800479a:	4631      	mov	r1, r6
 800479c:	f7fc f904 	bl	80009a8 <__aeabi_dcmpeq>
 80047a0:	b938      	cbnz	r0, 80047b2 <__cvt+0xa2>
 80047a2:	2230      	movs	r2, #48	; 0x30
 80047a4:	9b07      	ldr	r3, [sp, #28]
 80047a6:	454b      	cmp	r3, r9
 80047a8:	d205      	bcs.n	80047b6 <__cvt+0xa6>
 80047aa:	1c59      	adds	r1, r3, #1
 80047ac:	9107      	str	r1, [sp, #28]
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e7f8      	b.n	80047a4 <__cvt+0x94>
 80047b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80047b6:	4640      	mov	r0, r8
 80047b8:	9b07      	ldr	r3, [sp, #28]
 80047ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80047bc:	eba3 0308 	sub.w	r3, r3, r8
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	b008      	add	sp, #32
 80047c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080047c8 <__exponent>:
 80047c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ca:	2900      	cmp	r1, #0
 80047cc:	bfb4      	ite	lt
 80047ce:	232d      	movlt	r3, #45	; 0x2d
 80047d0:	232b      	movge	r3, #43	; 0x2b
 80047d2:	4604      	mov	r4, r0
 80047d4:	bfb8      	it	lt
 80047d6:	4249      	neglt	r1, r1
 80047d8:	2909      	cmp	r1, #9
 80047da:	f804 2b02 	strb.w	r2, [r4], #2
 80047de:	7043      	strb	r3, [r0, #1]
 80047e0:	dd21      	ble.n	8004826 <__exponent+0x5e>
 80047e2:	f10d 0307 	add.w	r3, sp, #7
 80047e6:	461f      	mov	r7, r3
 80047e8:	260a      	movs	r6, #10
 80047ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80047ee:	fb06 1115 	mls	r1, r6, r5, r1
 80047f2:	2d09      	cmp	r5, #9
 80047f4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80047f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047fc:	f103 32ff 	add.w	r2, r3, #4294967295
 8004800:	4629      	mov	r1, r5
 8004802:	dc09      	bgt.n	8004818 <__exponent+0x50>
 8004804:	3130      	adds	r1, #48	; 0x30
 8004806:	3b02      	subs	r3, #2
 8004808:	f802 1c01 	strb.w	r1, [r2, #-1]
 800480c:	42bb      	cmp	r3, r7
 800480e:	4622      	mov	r2, r4
 8004810:	d304      	bcc.n	800481c <__exponent+0x54>
 8004812:	1a10      	subs	r0, r2, r0
 8004814:	b003      	add	sp, #12
 8004816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004818:	4613      	mov	r3, r2
 800481a:	e7e6      	b.n	80047ea <__exponent+0x22>
 800481c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004820:	f804 2b01 	strb.w	r2, [r4], #1
 8004824:	e7f2      	b.n	800480c <__exponent+0x44>
 8004826:	2330      	movs	r3, #48	; 0x30
 8004828:	4419      	add	r1, r3
 800482a:	7083      	strb	r3, [r0, #2]
 800482c:	1d02      	adds	r2, r0, #4
 800482e:	70c1      	strb	r1, [r0, #3]
 8004830:	e7ef      	b.n	8004812 <__exponent+0x4a>
	...

08004834 <_printf_float>:
 8004834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004838:	b091      	sub	sp, #68	; 0x44
 800483a:	460c      	mov	r4, r1
 800483c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800483e:	4693      	mov	fp, r2
 8004840:	461e      	mov	r6, r3
 8004842:	4605      	mov	r5, r0
 8004844:	f002 fcba 	bl	80071bc <_localeconv_r>
 8004848:	6803      	ldr	r3, [r0, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	9309      	str	r3, [sp, #36]	; 0x24
 800484e:	f7fb fc7f 	bl	8000150 <strlen>
 8004852:	2300      	movs	r3, #0
 8004854:	930e      	str	r3, [sp, #56]	; 0x38
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	900a      	str	r0, [sp, #40]	; 0x28
 800485a:	3307      	adds	r3, #7
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	f103 0208 	add.w	r2, r3, #8
 8004864:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004868:	f8d4 a000 	ldr.w	sl, [r4]
 800486c:	603a      	str	r2, [r7, #0]
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004876:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800487a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800487e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	4ba6      	ldr	r3, [pc, #664]	; (8004b20 <_printf_float+0x2ec>)
 8004886:	4638      	mov	r0, r7
 8004888:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800488a:	f7fc f8bf 	bl	8000a0c <__aeabi_dcmpun>
 800488e:	bb68      	cbnz	r0, 80048ec <_printf_float+0xb8>
 8004890:	f04f 32ff 	mov.w	r2, #4294967295
 8004894:	4ba2      	ldr	r3, [pc, #648]	; (8004b20 <_printf_float+0x2ec>)
 8004896:	4638      	mov	r0, r7
 8004898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800489a:	f7fc f899 	bl	80009d0 <__aeabi_dcmple>
 800489e:	bb28      	cbnz	r0, 80048ec <_printf_float+0xb8>
 80048a0:	2200      	movs	r2, #0
 80048a2:	2300      	movs	r3, #0
 80048a4:	4638      	mov	r0, r7
 80048a6:	4649      	mov	r1, r9
 80048a8:	f7fc f888 	bl	80009bc <__aeabi_dcmplt>
 80048ac:	b110      	cbz	r0, 80048b4 <_printf_float+0x80>
 80048ae:	232d      	movs	r3, #45	; 0x2d
 80048b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b4:	4f9b      	ldr	r7, [pc, #620]	; (8004b24 <_printf_float+0x2f0>)
 80048b6:	4b9c      	ldr	r3, [pc, #624]	; (8004b28 <_printf_float+0x2f4>)
 80048b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048bc:	bf98      	it	ls
 80048be:	461f      	movls	r7, r3
 80048c0:	2303      	movs	r3, #3
 80048c2:	f04f 0900 	mov.w	r9, #0
 80048c6:	6123      	str	r3, [r4, #16]
 80048c8:	f02a 0304 	bic.w	r3, sl, #4
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	9600      	str	r6, [sp, #0]
 80048d0:	465b      	mov	r3, fp
 80048d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80048d4:	4621      	mov	r1, r4
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f9e2 	bl	8004ca0 <_printf_common>
 80048dc:	3001      	adds	r0, #1
 80048de:	f040 8090 	bne.w	8004a02 <_printf_float+0x1ce>
 80048e2:	f04f 30ff 	mov.w	r0, #4294967295
 80048e6:	b011      	add	sp, #68	; 0x44
 80048e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ec:	463a      	mov	r2, r7
 80048ee:	464b      	mov	r3, r9
 80048f0:	4638      	mov	r0, r7
 80048f2:	4649      	mov	r1, r9
 80048f4:	f7fc f88a 	bl	8000a0c <__aeabi_dcmpun>
 80048f8:	b110      	cbz	r0, 8004900 <_printf_float+0xcc>
 80048fa:	4f8c      	ldr	r7, [pc, #560]	; (8004b2c <_printf_float+0x2f8>)
 80048fc:	4b8c      	ldr	r3, [pc, #560]	; (8004b30 <_printf_float+0x2fc>)
 80048fe:	e7db      	b.n	80048b8 <_printf_float+0x84>
 8004900:	6863      	ldr	r3, [r4, #4]
 8004902:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004906:	1c59      	adds	r1, r3, #1
 8004908:	a80d      	add	r0, sp, #52	; 0x34
 800490a:	a90e      	add	r1, sp, #56	; 0x38
 800490c:	d140      	bne.n	8004990 <_printf_float+0x15c>
 800490e:	2306      	movs	r3, #6
 8004910:	6063      	str	r3, [r4, #4]
 8004912:	f04f 0c00 	mov.w	ip, #0
 8004916:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800491a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800491e:	6863      	ldr	r3, [r4, #4]
 8004920:	6022      	str	r2, [r4, #0]
 8004922:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	463a      	mov	r2, r7
 800492a:	464b      	mov	r3, r9
 800492c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004930:	4628      	mov	r0, r5
 8004932:	f7ff feed 	bl	8004710 <__cvt>
 8004936:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800493a:	2b47      	cmp	r3, #71	; 0x47
 800493c:	4607      	mov	r7, r0
 800493e:	d109      	bne.n	8004954 <_printf_float+0x120>
 8004940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004942:	1cd8      	adds	r0, r3, #3
 8004944:	db02      	blt.n	800494c <_printf_float+0x118>
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	4293      	cmp	r3, r2
 800494a:	dd47      	ble.n	80049dc <_printf_float+0x1a8>
 800494c:	f1a8 0802 	sub.w	r8, r8, #2
 8004950:	fa5f f888 	uxtb.w	r8, r8
 8004954:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004958:	990d      	ldr	r1, [sp, #52]	; 0x34
 800495a:	d824      	bhi.n	80049a6 <_printf_float+0x172>
 800495c:	3901      	subs	r1, #1
 800495e:	4642      	mov	r2, r8
 8004960:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004964:	910d      	str	r1, [sp, #52]	; 0x34
 8004966:	f7ff ff2f 	bl	80047c8 <__exponent>
 800496a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800496c:	4681      	mov	r9, r0
 800496e:	1813      	adds	r3, r2, r0
 8004970:	2a01      	cmp	r2, #1
 8004972:	6123      	str	r3, [r4, #16]
 8004974:	dc02      	bgt.n	800497c <_printf_float+0x148>
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	07d1      	lsls	r1, r2, #31
 800497a:	d501      	bpl.n	8004980 <_printf_float+0x14c>
 800497c:	3301      	adds	r3, #1
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0a2      	beq.n	80048ce <_printf_float+0x9a>
 8004988:	232d      	movs	r3, #45	; 0x2d
 800498a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800498e:	e79e      	b.n	80048ce <_printf_float+0x9a>
 8004990:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004994:	f000 816e 	beq.w	8004c74 <_printf_float+0x440>
 8004998:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800499c:	d1b9      	bne.n	8004912 <_printf_float+0xde>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1b7      	bne.n	8004912 <_printf_float+0xde>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e7b4      	b.n	8004910 <_printf_float+0xdc>
 80049a6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80049aa:	d119      	bne.n	80049e0 <_printf_float+0x1ac>
 80049ac:	2900      	cmp	r1, #0
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	dd0c      	ble.n	80049cc <_printf_float+0x198>
 80049b2:	6121      	str	r1, [r4, #16]
 80049b4:	b913      	cbnz	r3, 80049bc <_printf_float+0x188>
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	07d2      	lsls	r2, r2, #31
 80049ba:	d502      	bpl.n	80049c2 <_printf_float+0x18e>
 80049bc:	3301      	adds	r3, #1
 80049be:	440b      	add	r3, r1
 80049c0:	6123      	str	r3, [r4, #16]
 80049c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049c4:	f04f 0900 	mov.w	r9, #0
 80049c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80049ca:	e7d9      	b.n	8004980 <_printf_float+0x14c>
 80049cc:	b913      	cbnz	r3, 80049d4 <_printf_float+0x1a0>
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	07d0      	lsls	r0, r2, #31
 80049d2:	d501      	bpl.n	80049d8 <_printf_float+0x1a4>
 80049d4:	3302      	adds	r3, #2
 80049d6:	e7f3      	b.n	80049c0 <_printf_float+0x18c>
 80049d8:	2301      	movs	r3, #1
 80049da:	e7f1      	b.n	80049c0 <_printf_float+0x18c>
 80049dc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80049e0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80049e4:	4293      	cmp	r3, r2
 80049e6:	db05      	blt.n	80049f4 <_printf_float+0x1c0>
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	6123      	str	r3, [r4, #16]
 80049ec:	07d1      	lsls	r1, r2, #31
 80049ee:	d5e8      	bpl.n	80049c2 <_printf_float+0x18e>
 80049f0:	3301      	adds	r3, #1
 80049f2:	e7e5      	b.n	80049c0 <_printf_float+0x18c>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bfcc      	ite	gt
 80049f8:	2301      	movgt	r3, #1
 80049fa:	f1c3 0302 	rsble	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	e7de      	b.n	80049c0 <_printf_float+0x18c>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	055a      	lsls	r2, r3, #21
 8004a06:	d407      	bmi.n	8004a18 <_printf_float+0x1e4>
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	463a      	mov	r2, r7
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	4628      	mov	r0, r5
 8004a10:	47b0      	blx	r6
 8004a12:	3001      	adds	r0, #1
 8004a14:	d129      	bne.n	8004a6a <_printf_float+0x236>
 8004a16:	e764      	b.n	80048e2 <_printf_float+0xae>
 8004a18:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004a1c:	f240 80d7 	bls.w	8004bce <_printf_float+0x39a>
 8004a20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a24:	2200      	movs	r2, #0
 8004a26:	2300      	movs	r3, #0
 8004a28:	f7fb ffbe 	bl	80009a8 <__aeabi_dcmpeq>
 8004a2c:	b388      	cbz	r0, 8004a92 <_printf_float+0x25e>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4a40      	ldr	r2, [pc, #256]	; (8004b34 <_printf_float+0x300>)
 8004a32:	4659      	mov	r1, fp
 8004a34:	4628      	mov	r0, r5
 8004a36:	47b0      	blx	r6
 8004a38:	3001      	adds	r0, #1
 8004a3a:	f43f af52 	beq.w	80048e2 <_printf_float+0xae>
 8004a3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a42:	429a      	cmp	r2, r3
 8004a44:	db02      	blt.n	8004a4c <_printf_float+0x218>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	07d8      	lsls	r0, r3, #31
 8004a4a:	d50e      	bpl.n	8004a6a <_printf_float+0x236>
 8004a4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a50:	4659      	mov	r1, fp
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b0      	blx	r6
 8004a56:	3001      	adds	r0, #1
 8004a58:	f43f af43 	beq.w	80048e2 <_printf_float+0xae>
 8004a5c:	2700      	movs	r7, #0
 8004a5e:	f104 081a 	add.w	r8, r4, #26
 8004a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a64:	3b01      	subs	r3, #1
 8004a66:	42bb      	cmp	r3, r7
 8004a68:	dc09      	bgt.n	8004a7e <_printf_float+0x24a>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	079f      	lsls	r7, r3, #30
 8004a6e:	f100 80fd 	bmi.w	8004c6c <_printf_float+0x438>
 8004a72:	68e0      	ldr	r0, [r4, #12]
 8004a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a76:	4298      	cmp	r0, r3
 8004a78:	bfb8      	it	lt
 8004a7a:	4618      	movlt	r0, r3
 8004a7c:	e733      	b.n	80048e6 <_printf_float+0xb2>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4642      	mov	r2, r8
 8004a82:	4659      	mov	r1, fp
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b0      	blx	r6
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f43f af2a 	beq.w	80048e2 <_printf_float+0xae>
 8004a8e:	3701      	adds	r7, #1
 8004a90:	e7e7      	b.n	8004a62 <_printf_float+0x22e>
 8004a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	dc2b      	bgt.n	8004af0 <_printf_float+0x2bc>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	4a26      	ldr	r2, [pc, #152]	; (8004b34 <_printf_float+0x300>)
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b0      	blx	r6
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	f43f af1d 	beq.w	80048e2 <_printf_float+0xae>
 8004aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aaa:	b923      	cbnz	r3, 8004ab6 <_printf_float+0x282>
 8004aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aae:	b913      	cbnz	r3, 8004ab6 <_printf_float+0x282>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	07d9      	lsls	r1, r3, #31
 8004ab4:	d5d9      	bpl.n	8004a6a <_printf_float+0x236>
 8004ab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aba:	4659      	mov	r1, fp
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b0      	blx	r6
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f af0e 	beq.w	80048e2 <_printf_float+0xae>
 8004ac6:	f04f 0800 	mov.w	r8, #0
 8004aca:	f104 091a 	add.w	r9, r4, #26
 8004ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ad0:	425b      	negs	r3, r3
 8004ad2:	4543      	cmp	r3, r8
 8004ad4:	dc01      	bgt.n	8004ada <_printf_float+0x2a6>
 8004ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ad8:	e797      	b.n	8004a0a <_printf_float+0x1d6>
 8004ada:	2301      	movs	r3, #1
 8004adc:	464a      	mov	r2, r9
 8004ade:	4659      	mov	r1, fp
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b0      	blx	r6
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	f43f aefc 	beq.w	80048e2 <_printf_float+0xae>
 8004aea:	f108 0801 	add.w	r8, r8, #1
 8004aee:	e7ee      	b.n	8004ace <_printf_float+0x29a>
 8004af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004af4:	429a      	cmp	r2, r3
 8004af6:	bfa8      	it	ge
 8004af8:	461a      	movge	r2, r3
 8004afa:	2a00      	cmp	r2, #0
 8004afc:	4690      	mov	r8, r2
 8004afe:	dd07      	ble.n	8004b10 <_printf_float+0x2dc>
 8004b00:	4613      	mov	r3, r2
 8004b02:	4659      	mov	r1, fp
 8004b04:	463a      	mov	r2, r7
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b0      	blx	r6
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	f43f aee9 	beq.w	80048e2 <_printf_float+0xae>
 8004b10:	f104 031a 	add.w	r3, r4, #26
 8004b14:	f04f 0a00 	mov.w	sl, #0
 8004b18:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b1e:	e015      	b.n	8004b4c <_printf_float+0x318>
 8004b20:	7fefffff 	.word	0x7fefffff
 8004b24:	08007e0a 	.word	0x08007e0a
 8004b28:	08007e06 	.word	0x08007e06
 8004b2c:	08007e12 	.word	0x08007e12
 8004b30:	08007e0e 	.word	0x08007e0e
 8004b34:	08007e16 	.word	0x08007e16
 8004b38:	2301      	movs	r3, #1
 8004b3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	4628      	mov	r0, r5
 8004b40:	47b0      	blx	r6
 8004b42:	3001      	adds	r0, #1
 8004b44:	f43f aecd 	beq.w	80048e2 <_printf_float+0xae>
 8004b48:	f10a 0a01 	add.w	sl, sl, #1
 8004b4c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004b50:	eba9 0308 	sub.w	r3, r9, r8
 8004b54:	4553      	cmp	r3, sl
 8004b56:	dcef      	bgt.n	8004b38 <_printf_float+0x304>
 8004b58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	444f      	add	r7, r9
 8004b60:	db14      	blt.n	8004b8c <_printf_float+0x358>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	07da      	lsls	r2, r3, #31
 8004b66:	d411      	bmi.n	8004b8c <_printf_float+0x358>
 8004b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b6c:	eba3 0209 	sub.w	r2, r3, r9
 8004b70:	eba3 0901 	sub.w	r9, r3, r1
 8004b74:	4591      	cmp	r9, r2
 8004b76:	bfa8      	it	ge
 8004b78:	4691      	movge	r9, r2
 8004b7a:	f1b9 0f00 	cmp.w	r9, #0
 8004b7e:	dc0d      	bgt.n	8004b9c <_printf_float+0x368>
 8004b80:	2700      	movs	r7, #0
 8004b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b86:	f104 081a 	add.w	r8, r4, #26
 8004b8a:	e018      	b.n	8004bbe <_printf_float+0x38a>
 8004b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b90:	4659      	mov	r1, fp
 8004b92:	4628      	mov	r0, r5
 8004b94:	47b0      	blx	r6
 8004b96:	3001      	adds	r0, #1
 8004b98:	d1e6      	bne.n	8004b68 <_printf_float+0x334>
 8004b9a:	e6a2      	b.n	80048e2 <_printf_float+0xae>
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	463a      	mov	r2, r7
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b0      	blx	r6
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d1ea      	bne.n	8004b80 <_printf_float+0x34c>
 8004baa:	e69a      	b.n	80048e2 <_printf_float+0xae>
 8004bac:	2301      	movs	r3, #1
 8004bae:	4642      	mov	r2, r8
 8004bb0:	4659      	mov	r1, fp
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	47b0      	blx	r6
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f43f ae93 	beq.w	80048e2 <_printf_float+0xae>
 8004bbc:	3701      	adds	r7, #1
 8004bbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	eba3 0309 	sub.w	r3, r3, r9
 8004bc8:	42bb      	cmp	r3, r7
 8004bca:	dcef      	bgt.n	8004bac <_printf_float+0x378>
 8004bcc:	e74d      	b.n	8004a6a <_printf_float+0x236>
 8004bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bd0:	2a01      	cmp	r2, #1
 8004bd2:	dc01      	bgt.n	8004bd8 <_printf_float+0x3a4>
 8004bd4:	07db      	lsls	r3, r3, #31
 8004bd6:	d538      	bpl.n	8004c4a <_printf_float+0x416>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	463a      	mov	r2, r7
 8004bdc:	4659      	mov	r1, fp
 8004bde:	4628      	mov	r0, r5
 8004be0:	47b0      	blx	r6
 8004be2:	3001      	adds	r0, #1
 8004be4:	f43f ae7d 	beq.w	80048e2 <_printf_float+0xae>
 8004be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bec:	4659      	mov	r1, fp
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b0      	blx	r6
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f107 0701 	add.w	r7, r7, #1
 8004bf8:	f43f ae73 	beq.w	80048e2 <_printf_float+0xae>
 8004bfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c02:	2200      	movs	r2, #0
 8004c04:	f103 38ff 	add.w	r8, r3, #4294967295
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f7fb fecd 	bl	80009a8 <__aeabi_dcmpeq>
 8004c0e:	b9c0      	cbnz	r0, 8004c42 <_printf_float+0x40e>
 8004c10:	4643      	mov	r3, r8
 8004c12:	463a      	mov	r2, r7
 8004c14:	4659      	mov	r1, fp
 8004c16:	4628      	mov	r0, r5
 8004c18:	47b0      	blx	r6
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d10d      	bne.n	8004c3a <_printf_float+0x406>
 8004c1e:	e660      	b.n	80048e2 <_printf_float+0xae>
 8004c20:	2301      	movs	r3, #1
 8004c22:	4642      	mov	r2, r8
 8004c24:	4659      	mov	r1, fp
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b0      	blx	r6
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	f43f ae59 	beq.w	80048e2 <_printf_float+0xae>
 8004c30:	3701      	adds	r7, #1
 8004c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c34:	3b01      	subs	r3, #1
 8004c36:	42bb      	cmp	r3, r7
 8004c38:	dcf2      	bgt.n	8004c20 <_printf_float+0x3ec>
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c40:	e6e4      	b.n	8004a0c <_printf_float+0x1d8>
 8004c42:	2700      	movs	r7, #0
 8004c44:	f104 081a 	add.w	r8, r4, #26
 8004c48:	e7f3      	b.n	8004c32 <_printf_float+0x3fe>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e7e1      	b.n	8004c12 <_printf_float+0x3de>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4642      	mov	r2, r8
 8004c52:	4659      	mov	r1, fp
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b0      	blx	r6
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f ae42 	beq.w	80048e2 <_printf_float+0xae>
 8004c5e:	3701      	adds	r7, #1
 8004c60:	68e3      	ldr	r3, [r4, #12]
 8004c62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	42bb      	cmp	r3, r7
 8004c68:	dcf1      	bgt.n	8004c4e <_printf_float+0x41a>
 8004c6a:	e702      	b.n	8004a72 <_printf_float+0x23e>
 8004c6c:	2700      	movs	r7, #0
 8004c6e:	f104 0819 	add.w	r8, r4, #25
 8004c72:	e7f5      	b.n	8004c60 <_printf_float+0x42c>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f43f ae94 	beq.w	80049a2 <_printf_float+0x16e>
 8004c7a:	f04f 0c00 	mov.w	ip, #0
 8004c7e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004c82:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004c86:	6022      	str	r2, [r4, #0]
 8004c88:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004c8c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	463a      	mov	r2, r7
 8004c94:	464b      	mov	r3, r9
 8004c96:	4628      	mov	r0, r5
 8004c98:	f7ff fd3a 	bl	8004710 <__cvt>
 8004c9c:	4607      	mov	r7, r0
 8004c9e:	e64f      	b.n	8004940 <_printf_float+0x10c>

08004ca0 <_printf_common>:
 8004ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	4691      	mov	r9, r2
 8004ca6:	461f      	mov	r7, r3
 8004ca8:	688a      	ldr	r2, [r1, #8]
 8004caa:	690b      	ldr	r3, [r1, #16]
 8004cac:	4606      	mov	r6, r0
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bfb8      	it	lt
 8004cb2:	4613      	movlt	r3, r2
 8004cb4:	f8c9 3000 	str.w	r3, [r9]
 8004cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cc2:	b112      	cbz	r2, 8004cca <_printf_common+0x2a>
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	f8c9 3000 	str.w	r3, [r9]
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	0699      	lsls	r1, r3, #26
 8004cce:	bf42      	ittt	mi
 8004cd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004cd4:	3302      	addmi	r3, #2
 8004cd6:	f8c9 3000 	strmi.w	r3, [r9]
 8004cda:	6825      	ldr	r5, [r4, #0]
 8004cdc:	f015 0506 	ands.w	r5, r5, #6
 8004ce0:	d107      	bne.n	8004cf2 <_printf_common+0x52>
 8004ce2:	f104 0a19 	add.w	sl, r4, #25
 8004ce6:	68e3      	ldr	r3, [r4, #12]
 8004ce8:	f8d9 2000 	ldr.w	r2, [r9]
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	42ab      	cmp	r3, r5
 8004cf0:	dc29      	bgt.n	8004d46 <_printf_common+0xa6>
 8004cf2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	3300      	adds	r3, #0
 8004cfa:	bf18      	it	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	0692      	lsls	r2, r2, #26
 8004d00:	d42e      	bmi.n	8004d60 <_printf_common+0xc0>
 8004d02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d06:	4639      	mov	r1, r7
 8004d08:	4630      	mov	r0, r6
 8004d0a:	47c0      	blx	r8
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d021      	beq.n	8004d54 <_printf_common+0xb4>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	68e5      	ldr	r5, [r4, #12]
 8004d14:	f003 0306 	and.w	r3, r3, #6
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	bf18      	it	ne
 8004d1c:	2500      	movne	r5, #0
 8004d1e:	f8d9 2000 	ldr.w	r2, [r9]
 8004d22:	f04f 0900 	mov.w	r9, #0
 8004d26:	bf08      	it	eq
 8004d28:	1aad      	subeq	r5, r5, r2
 8004d2a:	68a3      	ldr	r3, [r4, #8]
 8004d2c:	6922      	ldr	r2, [r4, #16]
 8004d2e:	bf08      	it	eq
 8004d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bfc4      	itt	gt
 8004d38:	1a9b      	subgt	r3, r3, r2
 8004d3a:	18ed      	addgt	r5, r5, r3
 8004d3c:	341a      	adds	r4, #26
 8004d3e:	454d      	cmp	r5, r9
 8004d40:	d11a      	bne.n	8004d78 <_printf_common+0xd8>
 8004d42:	2000      	movs	r0, #0
 8004d44:	e008      	b.n	8004d58 <_printf_common+0xb8>
 8004d46:	2301      	movs	r3, #1
 8004d48:	4652      	mov	r2, sl
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	47c0      	blx	r8
 8004d50:	3001      	adds	r0, #1
 8004d52:	d103      	bne.n	8004d5c <_printf_common+0xbc>
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5c:	3501      	adds	r5, #1
 8004d5e:	e7c2      	b.n	8004ce6 <_printf_common+0x46>
 8004d60:	2030      	movs	r0, #48	; 0x30
 8004d62:	18e1      	adds	r1, r4, r3
 8004d64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d6e:	4422      	add	r2, r4
 8004d70:	3302      	adds	r3, #2
 8004d72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d76:	e7c4      	b.n	8004d02 <_printf_common+0x62>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	4639      	mov	r1, r7
 8004d7e:	4630      	mov	r0, r6
 8004d80:	47c0      	blx	r8
 8004d82:	3001      	adds	r0, #1
 8004d84:	d0e6      	beq.n	8004d54 <_printf_common+0xb4>
 8004d86:	f109 0901 	add.w	r9, r9, #1
 8004d8a:	e7d8      	b.n	8004d3e <_printf_common+0x9e>

08004d8c <_printf_i>:
 8004d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d94:	460c      	mov	r4, r1
 8004d96:	7e09      	ldrb	r1, [r1, #24]
 8004d98:	b085      	sub	sp, #20
 8004d9a:	296e      	cmp	r1, #110	; 0x6e
 8004d9c:	4617      	mov	r7, r2
 8004d9e:	4606      	mov	r6, r0
 8004da0:	4698      	mov	r8, r3
 8004da2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004da4:	f000 80b3 	beq.w	8004f0e <_printf_i+0x182>
 8004da8:	d822      	bhi.n	8004df0 <_printf_i+0x64>
 8004daa:	2963      	cmp	r1, #99	; 0x63
 8004dac:	d036      	beq.n	8004e1c <_printf_i+0x90>
 8004dae:	d80a      	bhi.n	8004dc6 <_printf_i+0x3a>
 8004db0:	2900      	cmp	r1, #0
 8004db2:	f000 80b9 	beq.w	8004f28 <_printf_i+0x19c>
 8004db6:	2958      	cmp	r1, #88	; 0x58
 8004db8:	f000 8083 	beq.w	8004ec2 <_printf_i+0x136>
 8004dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004dc4:	e032      	b.n	8004e2c <_printf_i+0xa0>
 8004dc6:	2964      	cmp	r1, #100	; 0x64
 8004dc8:	d001      	beq.n	8004dce <_printf_i+0x42>
 8004dca:	2969      	cmp	r1, #105	; 0x69
 8004dcc:	d1f6      	bne.n	8004dbc <_printf_i+0x30>
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	6813      	ldr	r3, [r2, #0]
 8004dd2:	0605      	lsls	r5, r0, #24
 8004dd4:	f103 0104 	add.w	r1, r3, #4
 8004dd8:	d52a      	bpl.n	8004e30 <_printf_i+0xa4>
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6011      	str	r1, [r2, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	da03      	bge.n	8004dea <_printf_i+0x5e>
 8004de2:	222d      	movs	r2, #45	; 0x2d
 8004de4:	425b      	negs	r3, r3
 8004de6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004dea:	486f      	ldr	r0, [pc, #444]	; (8004fa8 <_printf_i+0x21c>)
 8004dec:	220a      	movs	r2, #10
 8004dee:	e039      	b.n	8004e64 <_printf_i+0xd8>
 8004df0:	2973      	cmp	r1, #115	; 0x73
 8004df2:	f000 809d 	beq.w	8004f30 <_printf_i+0x1a4>
 8004df6:	d808      	bhi.n	8004e0a <_printf_i+0x7e>
 8004df8:	296f      	cmp	r1, #111	; 0x6f
 8004dfa:	d020      	beq.n	8004e3e <_printf_i+0xb2>
 8004dfc:	2970      	cmp	r1, #112	; 0x70
 8004dfe:	d1dd      	bne.n	8004dbc <_printf_i+0x30>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	f043 0320 	orr.w	r3, r3, #32
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	e003      	b.n	8004e12 <_printf_i+0x86>
 8004e0a:	2975      	cmp	r1, #117	; 0x75
 8004e0c:	d017      	beq.n	8004e3e <_printf_i+0xb2>
 8004e0e:	2978      	cmp	r1, #120	; 0x78
 8004e10:	d1d4      	bne.n	8004dbc <_printf_i+0x30>
 8004e12:	2378      	movs	r3, #120	; 0x78
 8004e14:	4865      	ldr	r0, [pc, #404]	; (8004fac <_printf_i+0x220>)
 8004e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e1a:	e055      	b.n	8004ec8 <_printf_i+0x13c>
 8004e1c:	6813      	ldr	r3, [r2, #0]
 8004e1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e22:	1d19      	adds	r1, r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6011      	str	r1, [r2, #0]
 8004e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e08c      	b.n	8004f4a <_printf_i+0x1be>
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e36:	6011      	str	r1, [r2, #0]
 8004e38:	bf18      	it	ne
 8004e3a:	b21b      	sxthne	r3, r3
 8004e3c:	e7cf      	b.n	8004dde <_printf_i+0x52>
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	6825      	ldr	r5, [r4, #0]
 8004e42:	1d18      	adds	r0, r3, #4
 8004e44:	6010      	str	r0, [r2, #0]
 8004e46:	0628      	lsls	r0, r5, #24
 8004e48:	d501      	bpl.n	8004e4e <_printf_i+0xc2>
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	e002      	b.n	8004e54 <_printf_i+0xc8>
 8004e4e:	0668      	lsls	r0, r5, #25
 8004e50:	d5fb      	bpl.n	8004e4a <_printf_i+0xbe>
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	296f      	cmp	r1, #111	; 0x6f
 8004e56:	bf14      	ite	ne
 8004e58:	220a      	movne	r2, #10
 8004e5a:	2208      	moveq	r2, #8
 8004e5c:	4852      	ldr	r0, [pc, #328]	; (8004fa8 <_printf_i+0x21c>)
 8004e5e:	2100      	movs	r1, #0
 8004e60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e64:	6865      	ldr	r5, [r4, #4]
 8004e66:	2d00      	cmp	r5, #0
 8004e68:	60a5      	str	r5, [r4, #8]
 8004e6a:	f2c0 8095 	blt.w	8004f98 <_printf_i+0x20c>
 8004e6e:	6821      	ldr	r1, [r4, #0]
 8004e70:	f021 0104 	bic.w	r1, r1, #4
 8004e74:	6021      	str	r1, [r4, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d13d      	bne.n	8004ef6 <_printf_i+0x16a>
 8004e7a:	2d00      	cmp	r5, #0
 8004e7c:	f040 808e 	bne.w	8004f9c <_printf_i+0x210>
 8004e80:	4665      	mov	r5, ip
 8004e82:	2a08      	cmp	r2, #8
 8004e84:	d10b      	bne.n	8004e9e <_printf_i+0x112>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	07db      	lsls	r3, r3, #31
 8004e8a:	d508      	bpl.n	8004e9e <_printf_i+0x112>
 8004e8c:	6923      	ldr	r3, [r4, #16]
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	bfde      	ittt	le
 8004e94:	2330      	movle	r3, #48	; 0x30
 8004e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e9e:	ebac 0305 	sub.w	r3, ip, r5
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	f8cd 8000 	str.w	r8, [sp]
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	aa03      	add	r2, sp, #12
 8004eac:	4621      	mov	r1, r4
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f7ff fef6 	bl	8004ca0 <_printf_common>
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d14d      	bne.n	8004f54 <_printf_i+0x1c8>
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	b005      	add	sp, #20
 8004ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ec2:	4839      	ldr	r0, [pc, #228]	; (8004fa8 <_printf_i+0x21c>)
 8004ec4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ec8:	6813      	ldr	r3, [r2, #0]
 8004eca:	6821      	ldr	r1, [r4, #0]
 8004ecc:	1d1d      	adds	r5, r3, #4
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6015      	str	r5, [r2, #0]
 8004ed2:	060a      	lsls	r2, r1, #24
 8004ed4:	d50b      	bpl.n	8004eee <_printf_i+0x162>
 8004ed6:	07ca      	lsls	r2, r1, #31
 8004ed8:	bf44      	itt	mi
 8004eda:	f041 0120 	orrmi.w	r1, r1, #32
 8004ede:	6021      	strmi	r1, [r4, #0]
 8004ee0:	b91b      	cbnz	r3, 8004eea <_printf_i+0x15e>
 8004ee2:	6822      	ldr	r2, [r4, #0]
 8004ee4:	f022 0220 	bic.w	r2, r2, #32
 8004ee8:	6022      	str	r2, [r4, #0]
 8004eea:	2210      	movs	r2, #16
 8004eec:	e7b7      	b.n	8004e5e <_printf_i+0xd2>
 8004eee:	064d      	lsls	r5, r1, #25
 8004ef0:	bf48      	it	mi
 8004ef2:	b29b      	uxthmi	r3, r3
 8004ef4:	e7ef      	b.n	8004ed6 <_printf_i+0x14a>
 8004ef6:	4665      	mov	r5, ip
 8004ef8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004efc:	fb02 3311 	mls	r3, r2, r1, r3
 8004f00:	5cc3      	ldrb	r3, [r0, r3]
 8004f02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f06:	460b      	mov	r3, r1
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	d1f5      	bne.n	8004ef8 <_printf_i+0x16c>
 8004f0c:	e7b9      	b.n	8004e82 <_printf_i+0xf6>
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	6825      	ldr	r5, [r4, #0]
 8004f12:	1d18      	adds	r0, r3, #4
 8004f14:	6961      	ldr	r1, [r4, #20]
 8004f16:	6010      	str	r0, [r2, #0]
 8004f18:	0628      	lsls	r0, r5, #24
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	d501      	bpl.n	8004f22 <_printf_i+0x196>
 8004f1e:	6019      	str	r1, [r3, #0]
 8004f20:	e002      	b.n	8004f28 <_printf_i+0x19c>
 8004f22:	066a      	lsls	r2, r5, #25
 8004f24:	d5fb      	bpl.n	8004f1e <_printf_i+0x192>
 8004f26:	8019      	strh	r1, [r3, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4665      	mov	r5, ip
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	e7b9      	b.n	8004ea4 <_printf_i+0x118>
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	1d19      	adds	r1, r3, #4
 8004f34:	6011      	str	r1, [r2, #0]
 8004f36:	681d      	ldr	r5, [r3, #0]
 8004f38:	6862      	ldr	r2, [r4, #4]
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f002 f94b 	bl	80071d8 <memchr>
 8004f42:	b108      	cbz	r0, 8004f48 <_printf_i+0x1bc>
 8004f44:	1b40      	subs	r0, r0, r5
 8004f46:	6060      	str	r0, [r4, #4]
 8004f48:	6863      	ldr	r3, [r4, #4]
 8004f4a:	6123      	str	r3, [r4, #16]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f52:	e7a7      	b.n	8004ea4 <_printf_i+0x118>
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	462a      	mov	r2, r5
 8004f58:	4639      	mov	r1, r7
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	47c0      	blx	r8
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d0aa      	beq.n	8004eb8 <_printf_i+0x12c>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	079b      	lsls	r3, r3, #30
 8004f66:	d413      	bmi.n	8004f90 <_printf_i+0x204>
 8004f68:	68e0      	ldr	r0, [r4, #12]
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	4298      	cmp	r0, r3
 8004f6e:	bfb8      	it	lt
 8004f70:	4618      	movlt	r0, r3
 8004f72:	e7a3      	b.n	8004ebc <_printf_i+0x130>
 8004f74:	2301      	movs	r3, #1
 8004f76:	464a      	mov	r2, r9
 8004f78:	4639      	mov	r1, r7
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	47c0      	blx	r8
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d09a      	beq.n	8004eb8 <_printf_i+0x12c>
 8004f82:	3501      	adds	r5, #1
 8004f84:	68e3      	ldr	r3, [r4, #12]
 8004f86:	9a03      	ldr	r2, [sp, #12]
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	42ab      	cmp	r3, r5
 8004f8c:	dcf2      	bgt.n	8004f74 <_printf_i+0x1e8>
 8004f8e:	e7eb      	b.n	8004f68 <_printf_i+0x1dc>
 8004f90:	2500      	movs	r5, #0
 8004f92:	f104 0919 	add.w	r9, r4, #25
 8004f96:	e7f5      	b.n	8004f84 <_printf_i+0x1f8>
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1ac      	bne.n	8004ef6 <_printf_i+0x16a>
 8004f9c:	7803      	ldrb	r3, [r0, #0]
 8004f9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fa6:	e76c      	b.n	8004e82 <_printf_i+0xf6>
 8004fa8:	08007e18 	.word	0x08007e18
 8004fac:	08007e29 	.word	0x08007e29

08004fb0 <_sbrk_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4c05      	ldr	r4, [pc, #20]	; (8004fcc <_sbrk_r+0x1c>)
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	f7fc f884 	bl	80010c8 <_sbrk>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_sbrk_r+0x1a>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_sbrk_r+0x1a>
 8004fc8:	602b      	str	r3, [r5, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	20000568 	.word	0x20000568

08004fd0 <siprintf>:
 8004fd0:	b40e      	push	{r1, r2, r3}
 8004fd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fd6:	b500      	push	{lr}
 8004fd8:	b09c      	sub	sp, #112	; 0x70
 8004fda:	ab1d      	add	r3, sp, #116	; 0x74
 8004fdc:	9002      	str	r0, [sp, #8]
 8004fde:	9006      	str	r0, [sp, #24]
 8004fe0:	9107      	str	r1, [sp, #28]
 8004fe2:	9104      	str	r1, [sp, #16]
 8004fe4:	4808      	ldr	r0, [pc, #32]	; (8005008 <siprintf+0x38>)
 8004fe6:	4909      	ldr	r1, [pc, #36]	; (800500c <siprintf+0x3c>)
 8004fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fec:	9105      	str	r1, [sp, #20]
 8004fee:	6800      	ldr	r0, [r0, #0]
 8004ff0:	a902      	add	r1, sp, #8
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	f002 fd6c 	bl	8007ad0 <_svfiprintf_r>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	9b02      	ldr	r3, [sp, #8]
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	b01c      	add	sp, #112	; 0x70
 8005000:	f85d eb04 	ldr.w	lr, [sp], #4
 8005004:	b003      	add	sp, #12
 8005006:	4770      	bx	lr
 8005008:	2000000c 	.word	0x2000000c
 800500c:	ffff0208 	.word	0xffff0208

08005010 <strchr>:
 8005010:	b2c9      	uxtb	r1, r1
 8005012:	4603      	mov	r3, r0
 8005014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005018:	b11a      	cbz	r2, 8005022 <strchr+0x12>
 800501a:	428a      	cmp	r2, r1
 800501c:	d1f9      	bne.n	8005012 <strchr+0x2>
 800501e:	4618      	mov	r0, r3
 8005020:	4770      	bx	lr
 8005022:	2900      	cmp	r1, #0
 8005024:	bf18      	it	ne
 8005026:	2300      	movne	r3, #0
 8005028:	e7f9      	b.n	800501e <strchr+0xe>

0800502a <strcpy>:
 800502a:	4603      	mov	r3, r0
 800502c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005030:	f803 2b01 	strb.w	r2, [r3], #1
 8005034:	2a00      	cmp	r2, #0
 8005036:	d1f9      	bne.n	800502c <strcpy+0x2>
 8005038:	4770      	bx	lr

0800503a <strncmp>:
 800503a:	b510      	push	{r4, lr}
 800503c:	b16a      	cbz	r2, 800505a <strncmp+0x20>
 800503e:	3901      	subs	r1, #1
 8005040:	1884      	adds	r4, r0, r2
 8005042:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005046:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800504a:	4293      	cmp	r3, r2
 800504c:	d103      	bne.n	8005056 <strncmp+0x1c>
 800504e:	42a0      	cmp	r0, r4
 8005050:	d001      	beq.n	8005056 <strncmp+0x1c>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f5      	bne.n	8005042 <strncmp+0x8>
 8005056:	1a98      	subs	r0, r3, r2
 8005058:	bd10      	pop	{r4, pc}
 800505a:	4610      	mov	r0, r2
 800505c:	e7fc      	b.n	8005058 <strncmp+0x1e>

0800505e <strncpy>:
 800505e:	b570      	push	{r4, r5, r6, lr}
 8005060:	4604      	mov	r4, r0
 8005062:	3901      	subs	r1, #1
 8005064:	b902      	cbnz	r2, 8005068 <strncpy+0xa>
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	4623      	mov	r3, r4
 800506a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800506e:	1e56      	subs	r6, r2, #1
 8005070:	f803 5b01 	strb.w	r5, [r3], #1
 8005074:	b92d      	cbnz	r5, 8005082 <strncpy+0x24>
 8005076:	4414      	add	r4, r2
 8005078:	42a3      	cmp	r3, r4
 800507a:	d0f4      	beq.n	8005066 <strncpy+0x8>
 800507c:	f803 5b01 	strb.w	r5, [r3], #1
 8005080:	e7fa      	b.n	8005078 <strncpy+0x1a>
 8005082:	461c      	mov	r4, r3
 8005084:	4632      	mov	r2, r6
 8005086:	e7ed      	b.n	8005064 <strncpy+0x6>

08005088 <strstr>:
 8005088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508a:	7803      	ldrb	r3, [r0, #0]
 800508c:	b17b      	cbz	r3, 80050ae <strstr+0x26>
 800508e:	4604      	mov	r4, r0
 8005090:	7823      	ldrb	r3, [r4, #0]
 8005092:	4620      	mov	r0, r4
 8005094:	1c66      	adds	r6, r4, #1
 8005096:	b17b      	cbz	r3, 80050b8 <strstr+0x30>
 8005098:	1e4a      	subs	r2, r1, #1
 800509a:	1e63      	subs	r3, r4, #1
 800509c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80050a0:	b14d      	cbz	r5, 80050b6 <strstr+0x2e>
 80050a2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80050a6:	4634      	mov	r4, r6
 80050a8:	42af      	cmp	r7, r5
 80050aa:	d0f7      	beq.n	800509c <strstr+0x14>
 80050ac:	e7f0      	b.n	8005090 <strstr+0x8>
 80050ae:	780b      	ldrb	r3, [r1, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf18      	it	ne
 80050b4:	2000      	movne	r0, #0
 80050b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b8:	4618      	mov	r0, r3
 80050ba:	e7fc      	b.n	80050b6 <strstr+0x2e>

080050bc <sulp>:
 80050bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c0:	460f      	mov	r7, r1
 80050c2:	4690      	mov	r8, r2
 80050c4:	f002 fb6e 	bl	80077a4 <__ulp>
 80050c8:	4604      	mov	r4, r0
 80050ca:	460d      	mov	r5, r1
 80050cc:	f1b8 0f00 	cmp.w	r8, #0
 80050d0:	d011      	beq.n	80050f6 <sulp+0x3a>
 80050d2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80050d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050da:	2b00      	cmp	r3, #0
 80050dc:	dd0b      	ble.n	80050f6 <sulp+0x3a>
 80050de:	2400      	movs	r4, #0
 80050e0:	051b      	lsls	r3, r3, #20
 80050e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80050e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80050ea:	4622      	mov	r2, r4
 80050ec:	462b      	mov	r3, r5
 80050ee:	f7fb f9f3 	bl	80004d8 <__aeabi_dmul>
 80050f2:	4604      	mov	r4, r0
 80050f4:	460d      	mov	r5, r1
 80050f6:	4620      	mov	r0, r4
 80050f8:	4629      	mov	r1, r5
 80050fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005100 <_strtod_l>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	461f      	mov	r7, r3
 8005106:	2300      	movs	r3, #0
 8005108:	b0a1      	sub	sp, #132	; 0x84
 800510a:	4683      	mov	fp, r0
 800510c:	4638      	mov	r0, r7
 800510e:	460e      	mov	r6, r1
 8005110:	9217      	str	r2, [sp, #92]	; 0x5c
 8005112:	931c      	str	r3, [sp, #112]	; 0x70
 8005114:	f002 f850 	bl	80071b8 <__localeconv_l>
 8005118:	4680      	mov	r8, r0
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	f7fb f818 	bl	8000150 <strlen>
 8005120:	f04f 0900 	mov.w	r9, #0
 8005124:	4604      	mov	r4, r0
 8005126:	f04f 0a00 	mov.w	sl, #0
 800512a:	961b      	str	r6, [sp, #108]	; 0x6c
 800512c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	2a0d      	cmp	r2, #13
 8005132:	d832      	bhi.n	800519a <_strtod_l+0x9a>
 8005134:	2a09      	cmp	r2, #9
 8005136:	d236      	bcs.n	80051a6 <_strtod_l+0xa6>
 8005138:	2a00      	cmp	r2, #0
 800513a:	d03e      	beq.n	80051ba <_strtod_l+0xba>
 800513c:	2300      	movs	r3, #0
 800513e:	930d      	str	r3, [sp, #52]	; 0x34
 8005140:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005142:	782b      	ldrb	r3, [r5, #0]
 8005144:	2b30      	cmp	r3, #48	; 0x30
 8005146:	f040 80ac 	bne.w	80052a2 <_strtod_l+0x1a2>
 800514a:	786b      	ldrb	r3, [r5, #1]
 800514c:	2b58      	cmp	r3, #88	; 0x58
 800514e:	d001      	beq.n	8005154 <_strtod_l+0x54>
 8005150:	2b78      	cmp	r3, #120	; 0x78
 8005152:	d167      	bne.n	8005224 <_strtod_l+0x124>
 8005154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005156:	9702      	str	r7, [sp, #8]
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	ab1c      	add	r3, sp, #112	; 0x70
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	4a89      	ldr	r2, [pc, #548]	; (8005384 <_strtod_l+0x284>)
 8005160:	ab1d      	add	r3, sp, #116	; 0x74
 8005162:	a91b      	add	r1, sp, #108	; 0x6c
 8005164:	4658      	mov	r0, fp
 8005166:	f001 fd4f 	bl	8006c08 <__gethex>
 800516a:	f010 0407 	ands.w	r4, r0, #7
 800516e:	4606      	mov	r6, r0
 8005170:	d005      	beq.n	800517e <_strtod_l+0x7e>
 8005172:	2c06      	cmp	r4, #6
 8005174:	d12b      	bne.n	80051ce <_strtod_l+0xce>
 8005176:	2300      	movs	r3, #0
 8005178:	3501      	adds	r5, #1
 800517a:	951b      	str	r5, [sp, #108]	; 0x6c
 800517c:	930d      	str	r3, [sp, #52]	; 0x34
 800517e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005180:	2b00      	cmp	r3, #0
 8005182:	f040 85a6 	bne.w	8005cd2 <_strtod_l+0xbd2>
 8005186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005188:	b1e3      	cbz	r3, 80051c4 <_strtod_l+0xc4>
 800518a:	464a      	mov	r2, r9
 800518c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	b021      	add	sp, #132	; 0x84
 8005196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519a:	2a2b      	cmp	r2, #43	; 0x2b
 800519c:	d015      	beq.n	80051ca <_strtod_l+0xca>
 800519e:	2a2d      	cmp	r2, #45	; 0x2d
 80051a0:	d004      	beq.n	80051ac <_strtod_l+0xac>
 80051a2:	2a20      	cmp	r2, #32
 80051a4:	d1ca      	bne.n	800513c <_strtod_l+0x3c>
 80051a6:	3301      	adds	r3, #1
 80051a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80051aa:	e7bf      	b.n	800512c <_strtod_l+0x2c>
 80051ac:	2201      	movs	r2, #1
 80051ae:	920d      	str	r2, [sp, #52]	; 0x34
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1c2      	bne.n	8005140 <_strtod_l+0x40>
 80051ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 8585 	bne.w	8005cce <_strtod_l+0xbce>
 80051c4:	464a      	mov	r2, r9
 80051c6:	4653      	mov	r3, sl
 80051c8:	e7e2      	b.n	8005190 <_strtod_l+0x90>
 80051ca:	2200      	movs	r2, #0
 80051cc:	e7ef      	b.n	80051ae <_strtod_l+0xae>
 80051ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80051d0:	b13a      	cbz	r2, 80051e2 <_strtod_l+0xe2>
 80051d2:	2135      	movs	r1, #53	; 0x35
 80051d4:	a81e      	add	r0, sp, #120	; 0x78
 80051d6:	f002 fbd8 	bl	800798a <__copybits>
 80051da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80051dc:	4658      	mov	r0, fp
 80051de:	f002 f84a 	bl	8007276 <_Bfree>
 80051e2:	3c01      	subs	r4, #1
 80051e4:	2c04      	cmp	r4, #4
 80051e6:	d806      	bhi.n	80051f6 <_strtod_l+0xf6>
 80051e8:	e8df f004 	tbb	[pc, r4]
 80051ec:	1714030a 	.word	0x1714030a
 80051f0:	0a          	.byte	0x0a
 80051f1:	00          	.byte	0x00
 80051f2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80051f6:	0731      	lsls	r1, r6, #28
 80051f8:	d5c1      	bpl.n	800517e <_strtod_l+0x7e>
 80051fa:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80051fe:	e7be      	b.n	800517e <_strtod_l+0x7e>
 8005200:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005202:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005206:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800520a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800520e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005212:	e7f0      	b.n	80051f6 <_strtod_l+0xf6>
 8005214:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005388 <_strtod_l+0x288>
 8005218:	e7ed      	b.n	80051f6 <_strtod_l+0xf6>
 800521a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800521e:	f04f 39ff 	mov.w	r9, #4294967295
 8005222:	e7e8      	b.n	80051f6 <_strtod_l+0xf6>
 8005224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	921b      	str	r2, [sp, #108]	; 0x6c
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b30      	cmp	r3, #48	; 0x30
 800522e:	d0f9      	beq.n	8005224 <_strtod_l+0x124>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0a4      	beq.n	800517e <_strtod_l+0x7e>
 8005234:	2301      	movs	r3, #1
 8005236:	2500      	movs	r5, #0
 8005238:	220a      	movs	r2, #10
 800523a:	9307      	str	r3, [sp, #28]
 800523c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800523e:	9506      	str	r5, [sp, #24]
 8005240:	9308      	str	r3, [sp, #32]
 8005242:	9504      	str	r5, [sp, #16]
 8005244:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005246:	7807      	ldrb	r7, [r0, #0]
 8005248:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800524c:	b2d9      	uxtb	r1, r3
 800524e:	2909      	cmp	r1, #9
 8005250:	d929      	bls.n	80052a6 <_strtod_l+0x1a6>
 8005252:	4622      	mov	r2, r4
 8005254:	f8d8 1000 	ldr.w	r1, [r8]
 8005258:	f7ff feef 	bl	800503a <strncmp>
 800525c:	2800      	cmp	r0, #0
 800525e:	d031      	beq.n	80052c4 <_strtod_l+0x1c4>
 8005260:	2000      	movs	r0, #0
 8005262:	463b      	mov	r3, r7
 8005264:	4602      	mov	r2, r0
 8005266:	9c04      	ldr	r4, [sp, #16]
 8005268:	9005      	str	r0, [sp, #20]
 800526a:	2b65      	cmp	r3, #101	; 0x65
 800526c:	d001      	beq.n	8005272 <_strtod_l+0x172>
 800526e:	2b45      	cmp	r3, #69	; 0x45
 8005270:	d114      	bne.n	800529c <_strtod_l+0x19c>
 8005272:	b924      	cbnz	r4, 800527e <_strtod_l+0x17e>
 8005274:	b910      	cbnz	r0, 800527c <_strtod_l+0x17c>
 8005276:	9b07      	ldr	r3, [sp, #28]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d09e      	beq.n	80051ba <_strtod_l+0xba>
 800527c:	2400      	movs	r4, #0
 800527e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005280:	1c73      	adds	r3, r6, #1
 8005282:	931b      	str	r3, [sp, #108]	; 0x6c
 8005284:	7873      	ldrb	r3, [r6, #1]
 8005286:	2b2b      	cmp	r3, #43	; 0x2b
 8005288:	d078      	beq.n	800537c <_strtod_l+0x27c>
 800528a:	2b2d      	cmp	r3, #45	; 0x2d
 800528c:	d070      	beq.n	8005370 <_strtod_l+0x270>
 800528e:	f04f 0c00 	mov.w	ip, #0
 8005292:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005296:	2f09      	cmp	r7, #9
 8005298:	d97c      	bls.n	8005394 <_strtod_l+0x294>
 800529a:	961b      	str	r6, [sp, #108]	; 0x6c
 800529c:	f04f 0e00 	mov.w	lr, #0
 80052a0:	e09a      	b.n	80053d8 <_strtod_l+0x2d8>
 80052a2:	2300      	movs	r3, #0
 80052a4:	e7c7      	b.n	8005236 <_strtod_l+0x136>
 80052a6:	9904      	ldr	r1, [sp, #16]
 80052a8:	3001      	adds	r0, #1
 80052aa:	2908      	cmp	r1, #8
 80052ac:	bfd7      	itett	le
 80052ae:	9906      	ldrle	r1, [sp, #24]
 80052b0:	fb02 3505 	mlagt	r5, r2, r5, r3
 80052b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80052b8:	9306      	strle	r3, [sp, #24]
 80052ba:	9b04      	ldr	r3, [sp, #16]
 80052bc:	901b      	str	r0, [sp, #108]	; 0x6c
 80052be:	3301      	adds	r3, #1
 80052c0:	9304      	str	r3, [sp, #16]
 80052c2:	e7bf      	b.n	8005244 <_strtod_l+0x144>
 80052c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052c6:	191a      	adds	r2, r3, r4
 80052c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80052ca:	9a04      	ldr	r2, [sp, #16]
 80052cc:	5d1b      	ldrb	r3, [r3, r4]
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	d037      	beq.n	8005342 <_strtod_l+0x242>
 80052d2:	4602      	mov	r2, r0
 80052d4:	9c04      	ldr	r4, [sp, #16]
 80052d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80052da:	2909      	cmp	r1, #9
 80052dc:	d913      	bls.n	8005306 <_strtod_l+0x206>
 80052de:	2101      	movs	r1, #1
 80052e0:	9105      	str	r1, [sp, #20]
 80052e2:	e7c2      	b.n	800526a <_strtod_l+0x16a>
 80052e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052e6:	3001      	adds	r0, #1
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b30      	cmp	r3, #48	; 0x30
 80052f0:	d0f8      	beq.n	80052e4 <_strtod_l+0x1e4>
 80052f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80052f6:	2a08      	cmp	r2, #8
 80052f8:	f200 84f0 	bhi.w	8005cdc <_strtod_l+0xbdc>
 80052fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80052fe:	9208      	str	r2, [sp, #32]
 8005300:	4602      	mov	r2, r0
 8005302:	2000      	movs	r0, #0
 8005304:	4604      	mov	r4, r0
 8005306:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800530a:	f100 0101 	add.w	r1, r0, #1
 800530e:	d012      	beq.n	8005336 <_strtod_l+0x236>
 8005310:	440a      	add	r2, r1
 8005312:	270a      	movs	r7, #10
 8005314:	4621      	mov	r1, r4
 8005316:	eb00 0c04 	add.w	ip, r0, r4
 800531a:	458c      	cmp	ip, r1
 800531c:	d113      	bne.n	8005346 <_strtod_l+0x246>
 800531e:	1821      	adds	r1, r4, r0
 8005320:	2908      	cmp	r1, #8
 8005322:	f104 0401 	add.w	r4, r4, #1
 8005326:	4404      	add	r4, r0
 8005328:	dc19      	bgt.n	800535e <_strtod_l+0x25e>
 800532a:	210a      	movs	r1, #10
 800532c:	9b06      	ldr	r3, [sp, #24]
 800532e:	fb01 e303 	mla	r3, r1, r3, lr
 8005332:	9306      	str	r3, [sp, #24]
 8005334:	2100      	movs	r1, #0
 8005336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005338:	1c58      	adds	r0, r3, #1
 800533a:	901b      	str	r0, [sp, #108]	; 0x6c
 800533c:	785b      	ldrb	r3, [r3, #1]
 800533e:	4608      	mov	r0, r1
 8005340:	e7c9      	b.n	80052d6 <_strtod_l+0x1d6>
 8005342:	9804      	ldr	r0, [sp, #16]
 8005344:	e7d3      	b.n	80052ee <_strtod_l+0x1ee>
 8005346:	2908      	cmp	r1, #8
 8005348:	f101 0101 	add.w	r1, r1, #1
 800534c:	dc03      	bgt.n	8005356 <_strtod_l+0x256>
 800534e:	9b06      	ldr	r3, [sp, #24]
 8005350:	437b      	muls	r3, r7
 8005352:	9306      	str	r3, [sp, #24]
 8005354:	e7e1      	b.n	800531a <_strtod_l+0x21a>
 8005356:	2910      	cmp	r1, #16
 8005358:	bfd8      	it	le
 800535a:	437d      	mulle	r5, r7
 800535c:	e7dd      	b.n	800531a <_strtod_l+0x21a>
 800535e:	2c10      	cmp	r4, #16
 8005360:	bfdc      	itt	le
 8005362:	210a      	movle	r1, #10
 8005364:	fb01 e505 	mlale	r5, r1, r5, lr
 8005368:	e7e4      	b.n	8005334 <_strtod_l+0x234>
 800536a:	2301      	movs	r3, #1
 800536c:	9305      	str	r3, [sp, #20]
 800536e:	e781      	b.n	8005274 <_strtod_l+0x174>
 8005370:	f04f 0c01 	mov.w	ip, #1
 8005374:	1cb3      	adds	r3, r6, #2
 8005376:	931b      	str	r3, [sp, #108]	; 0x6c
 8005378:	78b3      	ldrb	r3, [r6, #2]
 800537a:	e78a      	b.n	8005292 <_strtod_l+0x192>
 800537c:	f04f 0c00 	mov.w	ip, #0
 8005380:	e7f8      	b.n	8005374 <_strtod_l+0x274>
 8005382:	bf00      	nop
 8005384:	08007e3c 	.word	0x08007e3c
 8005388:	7ff00000 	.word	0x7ff00000
 800538c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800538e:	1c5f      	adds	r7, r3, #1
 8005390:	971b      	str	r7, [sp, #108]	; 0x6c
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b30      	cmp	r3, #48	; 0x30
 8005396:	d0f9      	beq.n	800538c <_strtod_l+0x28c>
 8005398:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800539c:	2f08      	cmp	r7, #8
 800539e:	f63f af7d 	bhi.w	800529c <_strtod_l+0x19c>
 80053a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80053a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053a8:	9309      	str	r3, [sp, #36]	; 0x24
 80053aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053ac:	1c5f      	adds	r7, r3, #1
 80053ae:	971b      	str	r7, [sp, #108]	; 0x6c
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80053b6:	f1b8 0f09 	cmp.w	r8, #9
 80053ba:	d937      	bls.n	800542c <_strtod_l+0x32c>
 80053bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053be:	1a7f      	subs	r7, r7, r1
 80053c0:	2f08      	cmp	r7, #8
 80053c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80053c6:	dc37      	bgt.n	8005438 <_strtod_l+0x338>
 80053c8:	45be      	cmp	lr, r7
 80053ca:	bfa8      	it	ge
 80053cc:	46be      	movge	lr, r7
 80053ce:	f1bc 0f00 	cmp.w	ip, #0
 80053d2:	d001      	beq.n	80053d8 <_strtod_l+0x2d8>
 80053d4:	f1ce 0e00 	rsb	lr, lr, #0
 80053d8:	2c00      	cmp	r4, #0
 80053da:	d151      	bne.n	8005480 <_strtod_l+0x380>
 80053dc:	2800      	cmp	r0, #0
 80053de:	f47f aece 	bne.w	800517e <_strtod_l+0x7e>
 80053e2:	9a07      	ldr	r2, [sp, #28]
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	f47f aeca 	bne.w	800517e <_strtod_l+0x7e>
 80053ea:	9a05      	ldr	r2, [sp, #20]
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	f47f aee4 	bne.w	80051ba <_strtod_l+0xba>
 80053f2:	2b4e      	cmp	r3, #78	; 0x4e
 80053f4:	d027      	beq.n	8005446 <_strtod_l+0x346>
 80053f6:	dc21      	bgt.n	800543c <_strtod_l+0x33c>
 80053f8:	2b49      	cmp	r3, #73	; 0x49
 80053fa:	f47f aede 	bne.w	80051ba <_strtod_l+0xba>
 80053fe:	49a4      	ldr	r1, [pc, #656]	; (8005690 <_strtod_l+0x590>)
 8005400:	a81b      	add	r0, sp, #108	; 0x6c
 8005402:	f001 fe35 	bl	8007070 <__match>
 8005406:	2800      	cmp	r0, #0
 8005408:	f43f aed7 	beq.w	80051ba <_strtod_l+0xba>
 800540c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800540e:	49a1      	ldr	r1, [pc, #644]	; (8005694 <_strtod_l+0x594>)
 8005410:	3b01      	subs	r3, #1
 8005412:	a81b      	add	r0, sp, #108	; 0x6c
 8005414:	931b      	str	r3, [sp, #108]	; 0x6c
 8005416:	f001 fe2b 	bl	8007070 <__match>
 800541a:	b910      	cbnz	r0, 8005422 <_strtod_l+0x322>
 800541c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800541e:	3301      	adds	r3, #1
 8005420:	931b      	str	r3, [sp, #108]	; 0x6c
 8005422:	f8df a284 	ldr.w	sl, [pc, #644]	; 80056a8 <_strtod_l+0x5a8>
 8005426:	f04f 0900 	mov.w	r9, #0
 800542a:	e6a8      	b.n	800517e <_strtod_l+0x7e>
 800542c:	210a      	movs	r1, #10
 800542e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005432:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005436:	e7b8      	b.n	80053aa <_strtod_l+0x2aa>
 8005438:	46be      	mov	lr, r7
 800543a:	e7c8      	b.n	80053ce <_strtod_l+0x2ce>
 800543c:	2b69      	cmp	r3, #105	; 0x69
 800543e:	d0de      	beq.n	80053fe <_strtod_l+0x2fe>
 8005440:	2b6e      	cmp	r3, #110	; 0x6e
 8005442:	f47f aeba 	bne.w	80051ba <_strtod_l+0xba>
 8005446:	4994      	ldr	r1, [pc, #592]	; (8005698 <_strtod_l+0x598>)
 8005448:	a81b      	add	r0, sp, #108	; 0x6c
 800544a:	f001 fe11 	bl	8007070 <__match>
 800544e:	2800      	cmp	r0, #0
 8005450:	f43f aeb3 	beq.w	80051ba <_strtod_l+0xba>
 8005454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b28      	cmp	r3, #40	; 0x28
 800545a:	d10e      	bne.n	800547a <_strtod_l+0x37a>
 800545c:	aa1e      	add	r2, sp, #120	; 0x78
 800545e:	498f      	ldr	r1, [pc, #572]	; (800569c <_strtod_l+0x59c>)
 8005460:	a81b      	add	r0, sp, #108	; 0x6c
 8005462:	f001 fe19 	bl	8007098 <__hexnan>
 8005466:	2805      	cmp	r0, #5
 8005468:	d107      	bne.n	800547a <_strtod_l+0x37a>
 800546a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800546c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005470:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005474:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005478:	e681      	b.n	800517e <_strtod_l+0x7e>
 800547a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80056b0 <_strtod_l+0x5b0>
 800547e:	e7d2      	b.n	8005426 <_strtod_l+0x326>
 8005480:	ebae 0302 	sub.w	r3, lr, r2
 8005484:	9307      	str	r3, [sp, #28]
 8005486:	9b04      	ldr	r3, [sp, #16]
 8005488:	9806      	ldr	r0, [sp, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	bf08      	it	eq
 800548e:	4623      	moveq	r3, r4
 8005490:	2c10      	cmp	r4, #16
 8005492:	9304      	str	r3, [sp, #16]
 8005494:	46a0      	mov	r8, r4
 8005496:	bfa8      	it	ge
 8005498:	f04f 0810 	movge.w	r8, #16
 800549c:	f7fa ffa2 	bl	80003e4 <__aeabi_ui2d>
 80054a0:	2c09      	cmp	r4, #9
 80054a2:	4681      	mov	r9, r0
 80054a4:	468a      	mov	sl, r1
 80054a6:	dc13      	bgt.n	80054d0 <_strtod_l+0x3d0>
 80054a8:	9b07      	ldr	r3, [sp, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f43f ae67 	beq.w	800517e <_strtod_l+0x7e>
 80054b0:	9b07      	ldr	r3, [sp, #28]
 80054b2:	dd7e      	ble.n	80055b2 <_strtod_l+0x4b2>
 80054b4:	2b16      	cmp	r3, #22
 80054b6:	dc65      	bgt.n	8005584 <_strtod_l+0x484>
 80054b8:	4a79      	ldr	r2, [pc, #484]	; (80056a0 <_strtod_l+0x5a0>)
 80054ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80054be:	464a      	mov	r2, r9
 80054c0:	e9de 0100 	ldrd	r0, r1, [lr]
 80054c4:	4653      	mov	r3, sl
 80054c6:	f7fb f807 	bl	80004d8 <__aeabi_dmul>
 80054ca:	4681      	mov	r9, r0
 80054cc:	468a      	mov	sl, r1
 80054ce:	e656      	b.n	800517e <_strtod_l+0x7e>
 80054d0:	4b73      	ldr	r3, [pc, #460]	; (80056a0 <_strtod_l+0x5a0>)
 80054d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80054d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054da:	f7fa fffd 	bl	80004d8 <__aeabi_dmul>
 80054de:	4606      	mov	r6, r0
 80054e0:	4628      	mov	r0, r5
 80054e2:	460f      	mov	r7, r1
 80054e4:	f7fa ff7e 	bl	80003e4 <__aeabi_ui2d>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4630      	mov	r0, r6
 80054ee:	4639      	mov	r1, r7
 80054f0:	f7fa fe3c 	bl	800016c <__adddf3>
 80054f4:	2c0f      	cmp	r4, #15
 80054f6:	4681      	mov	r9, r0
 80054f8:	468a      	mov	sl, r1
 80054fa:	ddd5      	ble.n	80054a8 <_strtod_l+0x3a8>
 80054fc:	9b07      	ldr	r3, [sp, #28]
 80054fe:	eba4 0808 	sub.w	r8, r4, r8
 8005502:	4498      	add	r8, r3
 8005504:	f1b8 0f00 	cmp.w	r8, #0
 8005508:	f340 809a 	ble.w	8005640 <_strtod_l+0x540>
 800550c:	f018 030f 	ands.w	r3, r8, #15
 8005510:	d00a      	beq.n	8005528 <_strtod_l+0x428>
 8005512:	4963      	ldr	r1, [pc, #396]	; (80056a0 <_strtod_l+0x5a0>)
 8005514:	464a      	mov	r2, r9
 8005516:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800551a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800551e:	4653      	mov	r3, sl
 8005520:	f7fa ffda 	bl	80004d8 <__aeabi_dmul>
 8005524:	4681      	mov	r9, r0
 8005526:	468a      	mov	sl, r1
 8005528:	f038 080f 	bics.w	r8, r8, #15
 800552c:	d077      	beq.n	800561e <_strtod_l+0x51e>
 800552e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005532:	dd4b      	ble.n	80055cc <_strtod_l+0x4cc>
 8005534:	f04f 0800 	mov.w	r8, #0
 8005538:	f8cd 8010 	str.w	r8, [sp, #16]
 800553c:	f8cd 8020 	str.w	r8, [sp, #32]
 8005540:	f8cd 8018 	str.w	r8, [sp, #24]
 8005544:	2322      	movs	r3, #34	; 0x22
 8005546:	f04f 0900 	mov.w	r9, #0
 800554a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80056a8 <_strtod_l+0x5a8>
 800554e:	f8cb 3000 	str.w	r3, [fp]
 8005552:	9b08      	ldr	r3, [sp, #32]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f43f ae12 	beq.w	800517e <_strtod_l+0x7e>
 800555a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800555c:	4658      	mov	r0, fp
 800555e:	f001 fe8a 	bl	8007276 <_Bfree>
 8005562:	9906      	ldr	r1, [sp, #24]
 8005564:	4658      	mov	r0, fp
 8005566:	f001 fe86 	bl	8007276 <_Bfree>
 800556a:	9904      	ldr	r1, [sp, #16]
 800556c:	4658      	mov	r0, fp
 800556e:	f001 fe82 	bl	8007276 <_Bfree>
 8005572:	9908      	ldr	r1, [sp, #32]
 8005574:	4658      	mov	r0, fp
 8005576:	f001 fe7e 	bl	8007276 <_Bfree>
 800557a:	4641      	mov	r1, r8
 800557c:	4658      	mov	r0, fp
 800557e:	f001 fe7a 	bl	8007276 <_Bfree>
 8005582:	e5fc      	b.n	800517e <_strtod_l+0x7e>
 8005584:	9a07      	ldr	r2, [sp, #28]
 8005586:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800558a:	4293      	cmp	r3, r2
 800558c:	dbb6      	blt.n	80054fc <_strtod_l+0x3fc>
 800558e:	4d44      	ldr	r5, [pc, #272]	; (80056a0 <_strtod_l+0x5a0>)
 8005590:	f1c4 040f 	rsb	r4, r4, #15
 8005594:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005598:	464a      	mov	r2, r9
 800559a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800559e:	4653      	mov	r3, sl
 80055a0:	f7fa ff9a 	bl	80004d8 <__aeabi_dmul>
 80055a4:	9b07      	ldr	r3, [sp, #28]
 80055a6:	1b1c      	subs	r4, r3, r4
 80055a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80055ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055b0:	e789      	b.n	80054c6 <_strtod_l+0x3c6>
 80055b2:	f113 0f16 	cmn.w	r3, #22
 80055b6:	dba1      	blt.n	80054fc <_strtod_l+0x3fc>
 80055b8:	4a39      	ldr	r2, [pc, #228]	; (80056a0 <_strtod_l+0x5a0>)
 80055ba:	4648      	mov	r0, r9
 80055bc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80055c0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80055c4:	4651      	mov	r1, sl
 80055c6:	f7fb f8b1 	bl	800072c <__aeabi_ddiv>
 80055ca:	e77e      	b.n	80054ca <_strtod_l+0x3ca>
 80055cc:	2300      	movs	r3, #0
 80055ce:	4648      	mov	r0, r9
 80055d0:	4651      	mov	r1, sl
 80055d2:	461d      	mov	r5, r3
 80055d4:	4e33      	ldr	r6, [pc, #204]	; (80056a4 <_strtod_l+0x5a4>)
 80055d6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80055da:	f1b8 0f01 	cmp.w	r8, #1
 80055de:	dc21      	bgt.n	8005624 <_strtod_l+0x524>
 80055e0:	b10b      	cbz	r3, 80055e6 <_strtod_l+0x4e6>
 80055e2:	4681      	mov	r9, r0
 80055e4:	468a      	mov	sl, r1
 80055e6:	4b2f      	ldr	r3, [pc, #188]	; (80056a4 <_strtod_l+0x5a4>)
 80055e8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80055ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80055f0:	464a      	mov	r2, r9
 80055f2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80055f6:	4653      	mov	r3, sl
 80055f8:	f7fa ff6e 	bl	80004d8 <__aeabi_dmul>
 80055fc:	4b2a      	ldr	r3, [pc, #168]	; (80056a8 <_strtod_l+0x5a8>)
 80055fe:	460a      	mov	r2, r1
 8005600:	400b      	ands	r3, r1
 8005602:	492a      	ldr	r1, [pc, #168]	; (80056ac <_strtod_l+0x5ac>)
 8005604:	4681      	mov	r9, r0
 8005606:	428b      	cmp	r3, r1
 8005608:	d894      	bhi.n	8005534 <_strtod_l+0x434>
 800560a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800560e:	428b      	cmp	r3, r1
 8005610:	bf86      	itte	hi
 8005612:	f04f 39ff 	movhi.w	r9, #4294967295
 8005616:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80056b4 <_strtod_l+0x5b4>
 800561a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800561e:	2300      	movs	r3, #0
 8005620:	9305      	str	r3, [sp, #20]
 8005622:	e07b      	b.n	800571c <_strtod_l+0x61c>
 8005624:	f018 0f01 	tst.w	r8, #1
 8005628:	d006      	beq.n	8005638 <_strtod_l+0x538>
 800562a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f7fa ff51 	bl	80004d8 <__aeabi_dmul>
 8005636:	2301      	movs	r3, #1
 8005638:	3501      	adds	r5, #1
 800563a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800563e:	e7cc      	b.n	80055da <_strtod_l+0x4da>
 8005640:	d0ed      	beq.n	800561e <_strtod_l+0x51e>
 8005642:	f1c8 0800 	rsb	r8, r8, #0
 8005646:	f018 020f 	ands.w	r2, r8, #15
 800564a:	d00a      	beq.n	8005662 <_strtod_l+0x562>
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <_strtod_l+0x5a0>)
 800564e:	4648      	mov	r0, r9
 8005650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005654:	4651      	mov	r1, sl
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fb f867 	bl	800072c <__aeabi_ddiv>
 800565e:	4681      	mov	r9, r0
 8005660:	468a      	mov	sl, r1
 8005662:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005666:	d0da      	beq.n	800561e <_strtod_l+0x51e>
 8005668:	f1b8 0f1f 	cmp.w	r8, #31
 800566c:	dd24      	ble.n	80056b8 <_strtod_l+0x5b8>
 800566e:	f04f 0800 	mov.w	r8, #0
 8005672:	f8cd 8010 	str.w	r8, [sp, #16]
 8005676:	f8cd 8020 	str.w	r8, [sp, #32]
 800567a:	f8cd 8018 	str.w	r8, [sp, #24]
 800567e:	2322      	movs	r3, #34	; 0x22
 8005680:	f04f 0900 	mov.w	r9, #0
 8005684:	f04f 0a00 	mov.w	sl, #0
 8005688:	f8cb 3000 	str.w	r3, [fp]
 800568c:	e761      	b.n	8005552 <_strtod_l+0x452>
 800568e:	bf00      	nop
 8005690:	08007e0b 	.word	0x08007e0b
 8005694:	08007fb9 	.word	0x08007fb9
 8005698:	08007e13 	.word	0x08007e13
 800569c:	08007e50 	.word	0x08007e50
 80056a0:	08007ff0 	.word	0x08007ff0
 80056a4:	08007fc8 	.word	0x08007fc8
 80056a8:	7ff00000 	.word	0x7ff00000
 80056ac:	7ca00000 	.word	0x7ca00000
 80056b0:	fff80000 	.word	0xfff80000
 80056b4:	7fefffff 	.word	0x7fefffff
 80056b8:	f018 0310 	ands.w	r3, r8, #16
 80056bc:	bf18      	it	ne
 80056be:	236a      	movne	r3, #106	; 0x6a
 80056c0:	4648      	mov	r0, r9
 80056c2:	9305      	str	r3, [sp, #20]
 80056c4:	4651      	mov	r1, sl
 80056c6:	2300      	movs	r3, #0
 80056c8:	4da1      	ldr	r5, [pc, #644]	; (8005950 <_strtod_l+0x850>)
 80056ca:	f1b8 0f00 	cmp.w	r8, #0
 80056ce:	f300 8113 	bgt.w	80058f8 <_strtod_l+0x7f8>
 80056d2:	b10b      	cbz	r3, 80056d8 <_strtod_l+0x5d8>
 80056d4:	4681      	mov	r9, r0
 80056d6:	468a      	mov	sl, r1
 80056d8:	9b05      	ldr	r3, [sp, #20]
 80056da:	b1bb      	cbz	r3, 800570c <_strtod_l+0x60c>
 80056dc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80056e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	4651      	mov	r1, sl
 80056e8:	dd10      	ble.n	800570c <_strtod_l+0x60c>
 80056ea:	2b1f      	cmp	r3, #31
 80056ec:	f340 8110 	ble.w	8005910 <_strtod_l+0x810>
 80056f0:	2b34      	cmp	r3, #52	; 0x34
 80056f2:	bfd8      	it	le
 80056f4:	f04f 32ff 	movle.w	r2, #4294967295
 80056f8:	f04f 0900 	mov.w	r9, #0
 80056fc:	bfcf      	iteee	gt
 80056fe:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005702:	3b20      	suble	r3, #32
 8005704:	fa02 f303 	lslle.w	r3, r2, r3
 8005708:	ea03 0a01 	andle.w	sl, r3, r1
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	4648      	mov	r0, r9
 8005712:	4651      	mov	r1, sl
 8005714:	f7fb f948 	bl	80009a8 <__aeabi_dcmpeq>
 8005718:	2800      	cmp	r0, #0
 800571a:	d1a8      	bne.n	800566e <_strtod_l+0x56e>
 800571c:	9b06      	ldr	r3, [sp, #24]
 800571e:	9a04      	ldr	r2, [sp, #16]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	9908      	ldr	r1, [sp, #32]
 8005724:	4623      	mov	r3, r4
 8005726:	4658      	mov	r0, fp
 8005728:	f001 fdf7 	bl	800731a <__s2b>
 800572c:	9008      	str	r0, [sp, #32]
 800572e:	2800      	cmp	r0, #0
 8005730:	f43f af00 	beq.w	8005534 <_strtod_l+0x434>
 8005734:	9a07      	ldr	r2, [sp, #28]
 8005736:	9b07      	ldr	r3, [sp, #28]
 8005738:	2a00      	cmp	r2, #0
 800573a:	f1c3 0300 	rsb	r3, r3, #0
 800573e:	bfa8      	it	ge
 8005740:	2300      	movge	r3, #0
 8005742:	f04f 0800 	mov.w	r8, #0
 8005746:	930e      	str	r3, [sp, #56]	; 0x38
 8005748:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800574c:	9316      	str	r3, [sp, #88]	; 0x58
 800574e:	f8cd 8010 	str.w	r8, [sp, #16]
 8005752:	9b08      	ldr	r3, [sp, #32]
 8005754:	4658      	mov	r0, fp
 8005756:	6859      	ldr	r1, [r3, #4]
 8005758:	f001 fd59 	bl	800720e <_Balloc>
 800575c:	9006      	str	r0, [sp, #24]
 800575e:	2800      	cmp	r0, #0
 8005760:	f43f aef0 	beq.w	8005544 <_strtod_l+0x444>
 8005764:	9b08      	ldr	r3, [sp, #32]
 8005766:	300c      	adds	r0, #12
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	f103 010c 	add.w	r1, r3, #12
 800576e:	3202      	adds	r2, #2
 8005770:	0092      	lsls	r2, r2, #2
 8005772:	f001 fd3f 	bl	80071f4 <memcpy>
 8005776:	ab1e      	add	r3, sp, #120	; 0x78
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	ab1d      	add	r3, sp, #116	; 0x74
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	464a      	mov	r2, r9
 8005780:	4653      	mov	r3, sl
 8005782:	4658      	mov	r0, fp
 8005784:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005788:	f002 f882 	bl	8007890 <__d2b>
 800578c:	901c      	str	r0, [sp, #112]	; 0x70
 800578e:	2800      	cmp	r0, #0
 8005790:	f43f aed8 	beq.w	8005544 <_strtod_l+0x444>
 8005794:	2101      	movs	r1, #1
 8005796:	4658      	mov	r0, fp
 8005798:	f001 fe4b 	bl	8007432 <__i2b>
 800579c:	9004      	str	r0, [sp, #16]
 800579e:	4603      	mov	r3, r0
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f43f aecf 	beq.w	8005544 <_strtod_l+0x444>
 80057a6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80057a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80057aa:	2d00      	cmp	r5, #0
 80057ac:	bfab      	itete	ge
 80057ae:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057b0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80057b2:	18ee      	addge	r6, r5, r3
 80057b4:	1b5c      	sublt	r4, r3, r5
 80057b6:	9b05      	ldr	r3, [sp, #20]
 80057b8:	bfa8      	it	ge
 80057ba:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80057bc:	eba5 0503 	sub.w	r5, r5, r3
 80057c0:	4415      	add	r5, r2
 80057c2:	4b64      	ldr	r3, [pc, #400]	; (8005954 <_strtod_l+0x854>)
 80057c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80057c8:	bfb8      	it	lt
 80057ca:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80057cc:	429d      	cmp	r5, r3
 80057ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057d2:	f280 80af 	bge.w	8005934 <_strtod_l+0x834>
 80057d6:	1b5b      	subs	r3, r3, r5
 80057d8:	2b1f      	cmp	r3, #31
 80057da:	eba2 0203 	sub.w	r2, r2, r3
 80057de:	f04f 0701 	mov.w	r7, #1
 80057e2:	f300 809c 	bgt.w	800591e <_strtod_l+0x81e>
 80057e6:	2500      	movs	r5, #0
 80057e8:	fa07 f303 	lsl.w	r3, r7, r3
 80057ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80057ee:	18b7      	adds	r7, r6, r2
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	42be      	cmp	r6, r7
 80057f4:	4414      	add	r4, r2
 80057f6:	441c      	add	r4, r3
 80057f8:	4633      	mov	r3, r6
 80057fa:	bfa8      	it	ge
 80057fc:	463b      	movge	r3, r7
 80057fe:	42a3      	cmp	r3, r4
 8005800:	bfa8      	it	ge
 8005802:	4623      	movge	r3, r4
 8005804:	2b00      	cmp	r3, #0
 8005806:	bfc2      	ittt	gt
 8005808:	1aff      	subgt	r7, r7, r3
 800580a:	1ae4      	subgt	r4, r4, r3
 800580c:	1af6      	subgt	r6, r6, r3
 800580e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005810:	b1bb      	cbz	r3, 8005842 <_strtod_l+0x742>
 8005812:	461a      	mov	r2, r3
 8005814:	9904      	ldr	r1, [sp, #16]
 8005816:	4658      	mov	r0, fp
 8005818:	f001 feaa 	bl	8007570 <__pow5mult>
 800581c:	9004      	str	r0, [sp, #16]
 800581e:	2800      	cmp	r0, #0
 8005820:	f43f ae90 	beq.w	8005544 <_strtod_l+0x444>
 8005824:	4601      	mov	r1, r0
 8005826:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005828:	4658      	mov	r0, fp
 800582a:	f001 fe0b 	bl	8007444 <__multiply>
 800582e:	9009      	str	r0, [sp, #36]	; 0x24
 8005830:	2800      	cmp	r0, #0
 8005832:	f43f ae87 	beq.w	8005544 <_strtod_l+0x444>
 8005836:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005838:	4658      	mov	r0, fp
 800583a:	f001 fd1c 	bl	8007276 <_Bfree>
 800583e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005840:	931c      	str	r3, [sp, #112]	; 0x70
 8005842:	2f00      	cmp	r7, #0
 8005844:	dc7a      	bgt.n	800593c <_strtod_l+0x83c>
 8005846:	9b07      	ldr	r3, [sp, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	dd08      	ble.n	800585e <_strtod_l+0x75e>
 800584c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800584e:	9906      	ldr	r1, [sp, #24]
 8005850:	4658      	mov	r0, fp
 8005852:	f001 fe8d 	bl	8007570 <__pow5mult>
 8005856:	9006      	str	r0, [sp, #24]
 8005858:	2800      	cmp	r0, #0
 800585a:	f43f ae73 	beq.w	8005544 <_strtod_l+0x444>
 800585e:	2c00      	cmp	r4, #0
 8005860:	dd08      	ble.n	8005874 <_strtod_l+0x774>
 8005862:	4622      	mov	r2, r4
 8005864:	9906      	ldr	r1, [sp, #24]
 8005866:	4658      	mov	r0, fp
 8005868:	f001 fed0 	bl	800760c <__lshift>
 800586c:	9006      	str	r0, [sp, #24]
 800586e:	2800      	cmp	r0, #0
 8005870:	f43f ae68 	beq.w	8005544 <_strtod_l+0x444>
 8005874:	2e00      	cmp	r6, #0
 8005876:	dd08      	ble.n	800588a <_strtod_l+0x78a>
 8005878:	4632      	mov	r2, r6
 800587a:	9904      	ldr	r1, [sp, #16]
 800587c:	4658      	mov	r0, fp
 800587e:	f001 fec5 	bl	800760c <__lshift>
 8005882:	9004      	str	r0, [sp, #16]
 8005884:	2800      	cmp	r0, #0
 8005886:	f43f ae5d 	beq.w	8005544 <_strtod_l+0x444>
 800588a:	9a06      	ldr	r2, [sp, #24]
 800588c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800588e:	4658      	mov	r0, fp
 8005890:	f001 ff2a 	bl	80076e8 <__mdiff>
 8005894:	4680      	mov	r8, r0
 8005896:	2800      	cmp	r0, #0
 8005898:	f43f ae54 	beq.w	8005544 <_strtod_l+0x444>
 800589c:	2400      	movs	r4, #0
 800589e:	68c3      	ldr	r3, [r0, #12]
 80058a0:	9904      	ldr	r1, [sp, #16]
 80058a2:	60c4      	str	r4, [r0, #12]
 80058a4:	930c      	str	r3, [sp, #48]	; 0x30
 80058a6:	f001 ff05 	bl	80076b4 <__mcmp>
 80058aa:	42a0      	cmp	r0, r4
 80058ac:	da54      	bge.n	8005958 <_strtod_l+0x858>
 80058ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058b0:	b9f3      	cbnz	r3, 80058f0 <_strtod_l+0x7f0>
 80058b2:	f1b9 0f00 	cmp.w	r9, #0
 80058b6:	d11b      	bne.n	80058f0 <_strtod_l+0x7f0>
 80058b8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80058bc:	b9c3      	cbnz	r3, 80058f0 <_strtod_l+0x7f0>
 80058be:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80058c2:	0d1b      	lsrs	r3, r3, #20
 80058c4:	051b      	lsls	r3, r3, #20
 80058c6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058ca:	d911      	bls.n	80058f0 <_strtod_l+0x7f0>
 80058cc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80058d0:	b91b      	cbnz	r3, 80058da <_strtod_l+0x7da>
 80058d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	dd0a      	ble.n	80058f0 <_strtod_l+0x7f0>
 80058da:	4641      	mov	r1, r8
 80058dc:	2201      	movs	r2, #1
 80058de:	4658      	mov	r0, fp
 80058e0:	f001 fe94 	bl	800760c <__lshift>
 80058e4:	9904      	ldr	r1, [sp, #16]
 80058e6:	4680      	mov	r8, r0
 80058e8:	f001 fee4 	bl	80076b4 <__mcmp>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	dc68      	bgt.n	80059c2 <_strtod_l+0x8c2>
 80058f0:	9b05      	ldr	r3, [sp, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d172      	bne.n	80059dc <_strtod_l+0x8dc>
 80058f6:	e630      	b.n	800555a <_strtod_l+0x45a>
 80058f8:	f018 0f01 	tst.w	r8, #1
 80058fc:	d004      	beq.n	8005908 <_strtod_l+0x808>
 80058fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005902:	f7fa fde9 	bl	80004d8 <__aeabi_dmul>
 8005906:	2301      	movs	r3, #1
 8005908:	ea4f 0868 	mov.w	r8, r8, asr #1
 800590c:	3508      	adds	r5, #8
 800590e:	e6dc      	b.n	80056ca <_strtod_l+0x5ca>
 8005910:	f04f 32ff 	mov.w	r2, #4294967295
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	ea03 0909 	and.w	r9, r3, r9
 800591c:	e6f6      	b.n	800570c <_strtod_l+0x60c>
 800591e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005922:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005926:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800592a:	35e2      	adds	r5, #226	; 0xe2
 800592c:	fa07 f505 	lsl.w	r5, r7, r5
 8005930:	970f      	str	r7, [sp, #60]	; 0x3c
 8005932:	e75c      	b.n	80057ee <_strtod_l+0x6ee>
 8005934:	2301      	movs	r3, #1
 8005936:	2500      	movs	r5, #0
 8005938:	930f      	str	r3, [sp, #60]	; 0x3c
 800593a:	e758      	b.n	80057ee <_strtod_l+0x6ee>
 800593c:	463a      	mov	r2, r7
 800593e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005940:	4658      	mov	r0, fp
 8005942:	f001 fe63 	bl	800760c <__lshift>
 8005946:	901c      	str	r0, [sp, #112]	; 0x70
 8005948:	2800      	cmp	r0, #0
 800594a:	f47f af7c 	bne.w	8005846 <_strtod_l+0x746>
 800594e:	e5f9      	b.n	8005544 <_strtod_l+0x444>
 8005950:	08007e68 	.word	0x08007e68
 8005954:	fffffc02 	.word	0xfffffc02
 8005958:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800595c:	f040 8089 	bne.w	8005a72 <_strtod_l+0x972>
 8005960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005962:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005966:	b342      	cbz	r2, 80059ba <_strtod_l+0x8ba>
 8005968:	4aaf      	ldr	r2, [pc, #700]	; (8005c28 <_strtod_l+0xb28>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d156      	bne.n	8005a1c <_strtod_l+0x91c>
 800596e:	9b05      	ldr	r3, [sp, #20]
 8005970:	4648      	mov	r0, r9
 8005972:	b1eb      	cbz	r3, 80059b0 <_strtod_l+0x8b0>
 8005974:	4653      	mov	r3, sl
 8005976:	4aad      	ldr	r2, [pc, #692]	; (8005c2c <_strtod_l+0xb2c>)
 8005978:	f04f 31ff 	mov.w	r1, #4294967295
 800597c:	401a      	ands	r2, r3
 800597e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005982:	d818      	bhi.n	80059b6 <_strtod_l+0x8b6>
 8005984:	0d12      	lsrs	r2, r2, #20
 8005986:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800598a:	fa01 f303 	lsl.w	r3, r1, r3
 800598e:	4298      	cmp	r0, r3
 8005990:	d144      	bne.n	8005a1c <_strtod_l+0x91c>
 8005992:	4ba7      	ldr	r3, [pc, #668]	; (8005c30 <_strtod_l+0xb30>)
 8005994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005996:	429a      	cmp	r2, r3
 8005998:	d102      	bne.n	80059a0 <_strtod_l+0x8a0>
 800599a:	3001      	adds	r0, #1
 800599c:	f43f add2 	beq.w	8005544 <_strtod_l+0x444>
 80059a0:	4ba2      	ldr	r3, [pc, #648]	; (8005c2c <_strtod_l+0xb2c>)
 80059a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a4:	f04f 0900 	mov.w	r9, #0
 80059a8:	401a      	ands	r2, r3
 80059aa:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80059ae:	e79f      	b.n	80058f0 <_strtod_l+0x7f0>
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295
 80059b4:	e7eb      	b.n	800598e <_strtod_l+0x88e>
 80059b6:	460b      	mov	r3, r1
 80059b8:	e7e9      	b.n	800598e <_strtod_l+0x88e>
 80059ba:	bb7b      	cbnz	r3, 8005a1c <_strtod_l+0x91c>
 80059bc:	f1b9 0f00 	cmp.w	r9, #0
 80059c0:	d12c      	bne.n	8005a1c <_strtod_l+0x91c>
 80059c2:	9905      	ldr	r1, [sp, #20]
 80059c4:	4653      	mov	r3, sl
 80059c6:	4a99      	ldr	r2, [pc, #612]	; (8005c2c <_strtod_l+0xb2c>)
 80059c8:	b1f1      	cbz	r1, 8005a08 <_strtod_l+0x908>
 80059ca:	ea02 010a 	and.w	r1, r2, sl
 80059ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80059d2:	dc19      	bgt.n	8005a08 <_strtod_l+0x908>
 80059d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80059d8:	f77f ae51 	ble.w	800567e <_strtod_l+0x57e>
 80059dc:	2300      	movs	r3, #0
 80059de:	4a95      	ldr	r2, [pc, #596]	; (8005c34 <_strtod_l+0xb34>)
 80059e0:	4648      	mov	r0, r9
 80059e2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80059e6:	4651      	mov	r1, sl
 80059e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80059ec:	f7fa fd74 	bl	80004d8 <__aeabi_dmul>
 80059f0:	4681      	mov	r9, r0
 80059f2:	468a      	mov	sl, r1
 80059f4:	2900      	cmp	r1, #0
 80059f6:	f47f adb0 	bne.w	800555a <_strtod_l+0x45a>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	f47f adad 	bne.w	800555a <_strtod_l+0x45a>
 8005a00:	2322      	movs	r3, #34	; 0x22
 8005a02:	f8cb 3000 	str.w	r3, [fp]
 8005a06:	e5a8      	b.n	800555a <_strtod_l+0x45a>
 8005a08:	4013      	ands	r3, r2
 8005a0a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a0e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005a12:	f04f 39ff 	mov.w	r9, #4294967295
 8005a16:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005a1a:	e769      	b.n	80058f0 <_strtod_l+0x7f0>
 8005a1c:	b19d      	cbz	r5, 8005a46 <_strtod_l+0x946>
 8005a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a20:	421d      	tst	r5, r3
 8005a22:	f43f af65 	beq.w	80058f0 <_strtod_l+0x7f0>
 8005a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a28:	9a05      	ldr	r2, [sp, #20]
 8005a2a:	4648      	mov	r0, r9
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	b173      	cbz	r3, 8005a4e <_strtod_l+0x94e>
 8005a30:	f7ff fb44 	bl	80050bc <sulp>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a3c:	f7fa fb96 	bl	800016c <__adddf3>
 8005a40:	4681      	mov	r9, r0
 8005a42:	468a      	mov	sl, r1
 8005a44:	e754      	b.n	80058f0 <_strtod_l+0x7f0>
 8005a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a48:	ea13 0f09 	tst.w	r3, r9
 8005a4c:	e7e9      	b.n	8005a22 <_strtod_l+0x922>
 8005a4e:	f7ff fb35 	bl	80050bc <sulp>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a5a:	f7fa fb85 	bl	8000168 <__aeabi_dsub>
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2300      	movs	r3, #0
 8005a62:	4681      	mov	r9, r0
 8005a64:	468a      	mov	sl, r1
 8005a66:	f7fa ff9f 	bl	80009a8 <__aeabi_dcmpeq>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	f47f ae07 	bne.w	800567e <_strtod_l+0x57e>
 8005a70:	e73e      	b.n	80058f0 <_strtod_l+0x7f0>
 8005a72:	9904      	ldr	r1, [sp, #16]
 8005a74:	4640      	mov	r0, r8
 8005a76:	f001 ff5a 	bl	800792e <__ratio>
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a80:	4606      	mov	r6, r0
 8005a82:	460f      	mov	r7, r1
 8005a84:	f7fa ffa4 	bl	80009d0 <__aeabi_dcmple>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d075      	beq.n	8005b78 <_strtod_l+0xa78>
 8005a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d047      	beq.n	8005b22 <_strtod_l+0xa22>
 8005a92:	2600      	movs	r6, #0
 8005a94:	4f68      	ldr	r7, [pc, #416]	; (8005c38 <_strtod_l+0xb38>)
 8005a96:	4d68      	ldr	r5, [pc, #416]	; (8005c38 <_strtod_l+0xb38>)
 8005a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a9e:	0d1b      	lsrs	r3, r3, #20
 8005aa0:	051b      	lsls	r3, r3, #20
 8005aa2:	930f      	str	r3, [sp, #60]	; 0x3c
 8005aa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aa6:	4b65      	ldr	r3, [pc, #404]	; (8005c3c <_strtod_l+0xb3c>)
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	f040 80cf 	bne.w	8005c4c <_strtod_l+0xb4c>
 8005aae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ab2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab8:	4648      	mov	r0, r9
 8005aba:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005abe:	4651      	mov	r1, sl
 8005ac0:	f001 fe70 	bl	80077a4 <__ulp>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4630      	mov	r0, r6
 8005aca:	4639      	mov	r1, r7
 8005acc:	f7fa fd04 	bl	80004d8 <__aeabi_dmul>
 8005ad0:	464a      	mov	r2, r9
 8005ad2:	4653      	mov	r3, sl
 8005ad4:	f7fa fb4a 	bl	800016c <__adddf3>
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4954      	ldr	r1, [pc, #336]	; (8005c2c <_strtod_l+0xb2c>)
 8005adc:	4a58      	ldr	r2, [pc, #352]	; (8005c40 <_strtod_l+0xb40>)
 8005ade:	4019      	ands	r1, r3
 8005ae0:	4291      	cmp	r1, r2
 8005ae2:	4681      	mov	r9, r0
 8005ae4:	d95e      	bls.n	8005ba4 <_strtod_l+0xaa4>
 8005ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ae8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d103      	bne.n	8005af8 <_strtod_l+0x9f8>
 8005af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af2:	3301      	adds	r3, #1
 8005af4:	f43f ad26 	beq.w	8005544 <_strtod_l+0x444>
 8005af8:	f04f 39ff 	mov.w	r9, #4294967295
 8005afc:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005c30 <_strtod_l+0xb30>
 8005b00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b02:	4658      	mov	r0, fp
 8005b04:	f001 fbb7 	bl	8007276 <_Bfree>
 8005b08:	9906      	ldr	r1, [sp, #24]
 8005b0a:	4658      	mov	r0, fp
 8005b0c:	f001 fbb3 	bl	8007276 <_Bfree>
 8005b10:	9904      	ldr	r1, [sp, #16]
 8005b12:	4658      	mov	r0, fp
 8005b14:	f001 fbaf 	bl	8007276 <_Bfree>
 8005b18:	4641      	mov	r1, r8
 8005b1a:	4658      	mov	r0, fp
 8005b1c:	f001 fbab 	bl	8007276 <_Bfree>
 8005b20:	e617      	b.n	8005752 <_strtod_l+0x652>
 8005b22:	f1b9 0f00 	cmp.w	r9, #0
 8005b26:	d119      	bne.n	8005b5c <_strtod_l+0xa5c>
 8005b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b2e:	b9e3      	cbnz	r3, 8005b6a <_strtod_l+0xa6a>
 8005b30:	2200      	movs	r2, #0
 8005b32:	4b41      	ldr	r3, [pc, #260]	; (8005c38 <_strtod_l+0xb38>)
 8005b34:	4630      	mov	r0, r6
 8005b36:	4639      	mov	r1, r7
 8005b38:	f7fa ff40 	bl	80009bc <__aeabi_dcmplt>
 8005b3c:	b9c8      	cbnz	r0, 8005b72 <_strtod_l+0xa72>
 8005b3e:	2200      	movs	r2, #0
 8005b40:	4b40      	ldr	r3, [pc, #256]	; (8005c44 <_strtod_l+0xb44>)
 8005b42:	4630      	mov	r0, r6
 8005b44:	4639      	mov	r1, r7
 8005b46:	f7fa fcc7 	bl	80004d8 <__aeabi_dmul>
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	460d      	mov	r5, r1
 8005b4e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b52:	9418      	str	r4, [sp, #96]	; 0x60
 8005b54:	9319      	str	r3, [sp, #100]	; 0x64
 8005b56:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005b5a:	e79d      	b.n	8005a98 <_strtod_l+0x998>
 8005b5c:	f1b9 0f01 	cmp.w	r9, #1
 8005b60:	d103      	bne.n	8005b6a <_strtod_l+0xa6a>
 8005b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f43f ad8a 	beq.w	800567e <_strtod_l+0x57e>
 8005b6a:	2600      	movs	r6, #0
 8005b6c:	4f36      	ldr	r7, [pc, #216]	; (8005c48 <_strtod_l+0xb48>)
 8005b6e:	2400      	movs	r4, #0
 8005b70:	e791      	b.n	8005a96 <_strtod_l+0x996>
 8005b72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005b74:	4d33      	ldr	r5, [pc, #204]	; (8005c44 <_strtod_l+0xb44>)
 8005b76:	e7ea      	b.n	8005b4e <_strtod_l+0xa4e>
 8005b78:	4b32      	ldr	r3, [pc, #200]	; (8005c44 <_strtod_l+0xb44>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	4639      	mov	r1, r7
 8005b80:	f7fa fcaa 	bl	80004d8 <__aeabi_dmul>
 8005b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b86:	4604      	mov	r4, r0
 8005b88:	460d      	mov	r5, r1
 8005b8a:	b933      	cbnz	r3, 8005b9a <_strtod_l+0xa9a>
 8005b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b90:	9010      	str	r0, [sp, #64]	; 0x40
 8005b92:	9311      	str	r3, [sp, #68]	; 0x44
 8005b94:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b98:	e77e      	b.n	8005a98 <_strtod_l+0x998>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005ba2:	e7f7      	b.n	8005b94 <_strtod_l+0xa94>
 8005ba4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005ba8:	9b05      	ldr	r3, [sp, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1a8      	bne.n	8005b00 <_strtod_l+0xa00>
 8005bae:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005bb2:	0d1b      	lsrs	r3, r3, #20
 8005bb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bb6:	051b      	lsls	r3, r3, #20
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	4656      	mov	r6, sl
 8005bbc:	d1a0      	bne.n	8005b00 <_strtod_l+0xa00>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f7fa ff39 	bl	8000a38 <__aeabi_d2iz>
 8005bc6:	f7fa fc1d 	bl	8000404 <__aeabi_i2d>
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7fa fac9 	bl	8000168 <__aeabi_dsub>
 8005bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bd8:	4604      	mov	r4, r0
 8005bda:	460d      	mov	r5, r1
 8005bdc:	b933      	cbnz	r3, 8005bec <_strtod_l+0xaec>
 8005bde:	f1b9 0f00 	cmp.w	r9, #0
 8005be2:	d103      	bne.n	8005bec <_strtod_l+0xaec>
 8005be4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005be8:	2e00      	cmp	r6, #0
 8005bea:	d06a      	beq.n	8005cc2 <_strtod_l+0xbc2>
 8005bec:	a30a      	add	r3, pc, #40	; (adr r3, 8005c18 <_strtod_l+0xb18>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	f7fa fee1 	bl	80009bc <__aeabi_dcmplt>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	f47f acad 	bne.w	800555a <_strtod_l+0x45a>
 8005c00:	a307      	add	r3, pc, #28	; (adr r3, 8005c20 <_strtod_l+0xb20>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	4620      	mov	r0, r4
 8005c08:	4629      	mov	r1, r5
 8005c0a:	f7fa fef5 	bl	80009f8 <__aeabi_dcmpgt>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f43f af76 	beq.w	8005b00 <_strtod_l+0xa00>
 8005c14:	e4a1      	b.n	800555a <_strtod_l+0x45a>
 8005c16:	bf00      	nop
 8005c18:	94a03595 	.word	0x94a03595
 8005c1c:	3fdfffff 	.word	0x3fdfffff
 8005c20:	35afe535 	.word	0x35afe535
 8005c24:	3fe00000 	.word	0x3fe00000
 8005c28:	000fffff 	.word	0x000fffff
 8005c2c:	7ff00000 	.word	0x7ff00000
 8005c30:	7fefffff 	.word	0x7fefffff
 8005c34:	39500000 	.word	0x39500000
 8005c38:	3ff00000 	.word	0x3ff00000
 8005c3c:	7fe00000 	.word	0x7fe00000
 8005c40:	7c9fffff 	.word	0x7c9fffff
 8005c44:	3fe00000 	.word	0x3fe00000
 8005c48:	bff00000 	.word	0xbff00000
 8005c4c:	9b05      	ldr	r3, [sp, #20]
 8005c4e:	b313      	cbz	r3, 8005c96 <_strtod_l+0xb96>
 8005c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c56:	d81e      	bhi.n	8005c96 <_strtod_l+0xb96>
 8005c58:	a325      	add	r3, pc, #148	; (adr r3, 8005cf0 <_strtod_l+0xbf0>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa feb5 	bl	80009d0 <__aeabi_dcmple>
 8005c66:	b190      	cbz	r0, 8005c8e <_strtod_l+0xb8e>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f7fa ff0c 	bl	8000a88 <__aeabi_d2uiz>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	bf08      	it	eq
 8005c74:	2001      	moveq	r0, #1
 8005c76:	f7fa fbb5 	bl	80003e4 <__aeabi_ui2d>
 8005c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	460d      	mov	r5, r1
 8005c80:	b9d3      	cbnz	r3, 8005cb8 <_strtod_l+0xbb8>
 8005c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c86:	9012      	str	r0, [sp, #72]	; 0x48
 8005c88:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c8a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005c8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c90:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005c94:	1a9f      	subs	r7, r3, r2
 8005c96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c9a:	f001 fd83 	bl	80077a4 <__ulp>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	f7fa fc17 	bl	80004d8 <__aeabi_dmul>
 8005caa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cae:	f7fa fa5d 	bl	800016c <__adddf3>
 8005cb2:	4681      	mov	r9, r0
 8005cb4:	468a      	mov	sl, r1
 8005cb6:	e777      	b.n	8005ba8 <_strtod_l+0xaa8>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005cc0:	e7e3      	b.n	8005c8a <_strtod_l+0xb8a>
 8005cc2:	a30d      	add	r3, pc, #52	; (adr r3, 8005cf8 <_strtod_l+0xbf8>)
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f7fa fe78 	bl	80009bc <__aeabi_dcmplt>
 8005ccc:	e79f      	b.n	8005c0e <_strtod_l+0xb0e>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	930d      	str	r3, [sp, #52]	; 0x34
 8005cd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cd4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	f7ff ba55 	b.w	8005186 <_strtod_l+0x86>
 8005cdc:	2b65      	cmp	r3, #101	; 0x65
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f43f ab42 	beq.w	800536a <_strtod_l+0x26a>
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4614      	mov	r4, r2
 8005cea:	9105      	str	r1, [sp, #20]
 8005cec:	f7ff babf 	b.w	800526e <_strtod_l+0x16e>
 8005cf0:	ffc00000 	.word	0xffc00000
 8005cf4:	41dfffff 	.word	0x41dfffff
 8005cf8:	94a03595 	.word	0x94a03595
 8005cfc:	3fcfffff 	.word	0x3fcfffff

08005d00 <strtod>:
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <strtod+0x1c>)
 8005d02:	b410      	push	{r4}
 8005d04:	681c      	ldr	r4, [r3, #0]
 8005d06:	4a06      	ldr	r2, [pc, #24]	; (8005d20 <strtod+0x20>)
 8005d08:	6a23      	ldr	r3, [r4, #32]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	bf08      	it	eq
 8005d0e:	4613      	moveq	r3, r2
 8005d10:	460a      	mov	r2, r1
 8005d12:	4601      	mov	r1, r0
 8005d14:	4620      	mov	r0, r4
 8005d16:	bc10      	pop	{r4}
 8005d18:	f7ff b9f2 	b.w	8005100 <_strtod_l>
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	20000070 	.word	0x20000070

08005d24 <_strtol_l.isra.0>:
 8005d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	4680      	mov	r8, r0
 8005d2a:	4689      	mov	r9, r1
 8005d2c:	4692      	mov	sl, r2
 8005d2e:	461e      	mov	r6, r3
 8005d30:	460f      	mov	r7, r1
 8005d32:	463d      	mov	r5, r7
 8005d34:	9808      	ldr	r0, [sp, #32]
 8005d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d3a:	f7fe fc0f 	bl	800455c <__locale_ctype_ptr_l>
 8005d3e:	4420      	add	r0, r4
 8005d40:	7843      	ldrb	r3, [r0, #1]
 8005d42:	f013 0308 	ands.w	r3, r3, #8
 8005d46:	d132      	bne.n	8005dae <_strtol_l.isra.0+0x8a>
 8005d48:	2c2d      	cmp	r4, #45	; 0x2d
 8005d4a:	d132      	bne.n	8005db2 <_strtol_l.isra.0+0x8e>
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	787c      	ldrb	r4, [r7, #1]
 8005d50:	1cbd      	adds	r5, r7, #2
 8005d52:	2e00      	cmp	r6, #0
 8005d54:	d05d      	beq.n	8005e12 <_strtol_l.isra.0+0xee>
 8005d56:	2e10      	cmp	r6, #16
 8005d58:	d109      	bne.n	8005d6e <_strtol_l.isra.0+0x4a>
 8005d5a:	2c30      	cmp	r4, #48	; 0x30
 8005d5c:	d107      	bne.n	8005d6e <_strtol_l.isra.0+0x4a>
 8005d5e:	782b      	ldrb	r3, [r5, #0]
 8005d60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d64:	2b58      	cmp	r3, #88	; 0x58
 8005d66:	d14f      	bne.n	8005e08 <_strtol_l.isra.0+0xe4>
 8005d68:	2610      	movs	r6, #16
 8005d6a:	786c      	ldrb	r4, [r5, #1]
 8005d6c:	3502      	adds	r5, #2
 8005d6e:	2a00      	cmp	r2, #0
 8005d70:	bf14      	ite	ne
 8005d72:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005d76:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005d7a:	2700      	movs	r7, #0
 8005d7c:	fbb1 fcf6 	udiv	ip, r1, r6
 8005d80:	4638      	mov	r0, r7
 8005d82:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005d86:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005d8a:	2b09      	cmp	r3, #9
 8005d8c:	d817      	bhi.n	8005dbe <_strtol_l.isra.0+0x9a>
 8005d8e:	461c      	mov	r4, r3
 8005d90:	42a6      	cmp	r6, r4
 8005d92:	dd23      	ble.n	8005ddc <_strtol_l.isra.0+0xb8>
 8005d94:	1c7b      	adds	r3, r7, #1
 8005d96:	d007      	beq.n	8005da8 <_strtol_l.isra.0+0x84>
 8005d98:	4584      	cmp	ip, r0
 8005d9a:	d31c      	bcc.n	8005dd6 <_strtol_l.isra.0+0xb2>
 8005d9c:	d101      	bne.n	8005da2 <_strtol_l.isra.0+0x7e>
 8005d9e:	45a6      	cmp	lr, r4
 8005da0:	db19      	blt.n	8005dd6 <_strtol_l.isra.0+0xb2>
 8005da2:	2701      	movs	r7, #1
 8005da4:	fb00 4006 	mla	r0, r0, r6, r4
 8005da8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dac:	e7eb      	b.n	8005d86 <_strtol_l.isra.0+0x62>
 8005dae:	462f      	mov	r7, r5
 8005db0:	e7bf      	b.n	8005d32 <_strtol_l.isra.0+0xe>
 8005db2:	2c2b      	cmp	r4, #43	; 0x2b
 8005db4:	bf04      	itt	eq
 8005db6:	1cbd      	addeq	r5, r7, #2
 8005db8:	787c      	ldrbeq	r4, [r7, #1]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	e7c9      	b.n	8005d52 <_strtol_l.isra.0+0x2e>
 8005dbe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005dc2:	2b19      	cmp	r3, #25
 8005dc4:	d801      	bhi.n	8005dca <_strtol_l.isra.0+0xa6>
 8005dc6:	3c37      	subs	r4, #55	; 0x37
 8005dc8:	e7e2      	b.n	8005d90 <_strtol_l.isra.0+0x6c>
 8005dca:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005dce:	2b19      	cmp	r3, #25
 8005dd0:	d804      	bhi.n	8005ddc <_strtol_l.isra.0+0xb8>
 8005dd2:	3c57      	subs	r4, #87	; 0x57
 8005dd4:	e7dc      	b.n	8005d90 <_strtol_l.isra.0+0x6c>
 8005dd6:	f04f 37ff 	mov.w	r7, #4294967295
 8005dda:	e7e5      	b.n	8005da8 <_strtol_l.isra.0+0x84>
 8005ddc:	1c7b      	adds	r3, r7, #1
 8005dde:	d108      	bne.n	8005df2 <_strtol_l.isra.0+0xce>
 8005de0:	2322      	movs	r3, #34	; 0x22
 8005de2:	4608      	mov	r0, r1
 8005de4:	f8c8 3000 	str.w	r3, [r8]
 8005de8:	f1ba 0f00 	cmp.w	sl, #0
 8005dec:	d107      	bne.n	8005dfe <_strtol_l.isra.0+0xda>
 8005dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df2:	b102      	cbz	r2, 8005df6 <_strtol_l.isra.0+0xd2>
 8005df4:	4240      	negs	r0, r0
 8005df6:	f1ba 0f00 	cmp.w	sl, #0
 8005dfa:	d0f8      	beq.n	8005dee <_strtol_l.isra.0+0xca>
 8005dfc:	b10f      	cbz	r7, 8005e02 <_strtol_l.isra.0+0xde>
 8005dfe:	f105 39ff 	add.w	r9, r5, #4294967295
 8005e02:	f8ca 9000 	str.w	r9, [sl]
 8005e06:	e7f2      	b.n	8005dee <_strtol_l.isra.0+0xca>
 8005e08:	2430      	movs	r4, #48	; 0x30
 8005e0a:	2e00      	cmp	r6, #0
 8005e0c:	d1af      	bne.n	8005d6e <_strtol_l.isra.0+0x4a>
 8005e0e:	2608      	movs	r6, #8
 8005e10:	e7ad      	b.n	8005d6e <_strtol_l.isra.0+0x4a>
 8005e12:	2c30      	cmp	r4, #48	; 0x30
 8005e14:	d0a3      	beq.n	8005d5e <_strtol_l.isra.0+0x3a>
 8005e16:	260a      	movs	r6, #10
 8005e18:	e7a9      	b.n	8005d6e <_strtol_l.isra.0+0x4a>
	...

08005e1c <strtol>:
 8005e1c:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <strtol+0x24>)
 8005e1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e20:	681c      	ldr	r4, [r3, #0]
 8005e22:	4d08      	ldr	r5, [pc, #32]	; (8005e44 <strtol+0x28>)
 8005e24:	6a23      	ldr	r3, [r4, #32]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bf08      	it	eq
 8005e2a:	462b      	moveq	r3, r5
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	460a      	mov	r2, r1
 8005e32:	4601      	mov	r1, r0
 8005e34:	4620      	mov	r0, r4
 8005e36:	f7ff ff75 	bl	8005d24 <_strtol_l.isra.0>
 8005e3a:	b003      	add	sp, #12
 8005e3c:	bd30      	pop	{r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	2000000c 	.word	0x2000000c
 8005e44:	20000070 	.word	0x20000070

08005e48 <__utoa>:
 8005e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e4a:	b08b      	sub	sp, #44	; 0x2c
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	466e      	mov	r6, sp
 8005e52:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <__utoa+0x78>)
 8005e54:	f103 0c20 	add.w	ip, r3, #32
 8005e58:	4637      	mov	r7, r6
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	6859      	ldr	r1, [r3, #4]
 8005e5e:	3308      	adds	r3, #8
 8005e60:	c703      	stmia	r7!, {r0, r1}
 8005e62:	4563      	cmp	r3, ip
 8005e64:	463e      	mov	r6, r7
 8005e66:	d1f7      	bne.n	8005e58 <__utoa+0x10>
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	791b      	ldrb	r3, [r3, #4]
 8005e6c:	6038      	str	r0, [r7, #0]
 8005e6e:	713b      	strb	r3, [r7, #4]
 8005e70:	1e93      	subs	r3, r2, #2
 8005e72:	2b22      	cmp	r3, #34	; 0x22
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	d904      	bls.n	8005e84 <__utoa+0x3c>
 8005e7a:	7023      	strb	r3, [r4, #0]
 8005e7c:	461c      	mov	r4, r3
 8005e7e:	4620      	mov	r0, r4
 8005e80:	b00b      	add	sp, #44	; 0x2c
 8005e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e84:	1e66      	subs	r6, r4, #1
 8005e86:	fbb5 f0f2 	udiv	r0, r5, r2
 8005e8a:	fb02 5510 	mls	r5, r2, r0, r5
 8005e8e:	af0a      	add	r7, sp, #40	; 0x28
 8005e90:	443d      	add	r5, r7
 8005e92:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	b968      	cbnz	r0, 8005ebc <__utoa+0x74>
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	5460      	strb	r0, [r4, r1]
 8005ea4:	4423      	add	r3, r4
 8005ea6:	1b19      	subs	r1, r3, r4
 8005ea8:	1b10      	subs	r0, r2, r4
 8005eaa:	4281      	cmp	r1, r0
 8005eac:	dde7      	ble.n	8005e7e <__utoa+0x36>
 8005eae:	7811      	ldrb	r1, [r2, #0]
 8005eb0:	7818      	ldrb	r0, [r3, #0]
 8005eb2:	f802 0b01 	strb.w	r0, [r2], #1
 8005eb6:	f803 1901 	strb.w	r1, [r3], #-1
 8005eba:	e7f4      	b.n	8005ea6 <__utoa+0x5e>
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	e7e2      	b.n	8005e86 <__utoa+0x3e>
 8005ec0:	08007e90 	.word	0x08007e90

08005ec4 <__ascii_wctomb>:
 8005ec4:	b149      	cbz	r1, 8005eda <__ascii_wctomb+0x16>
 8005ec6:	2aff      	cmp	r2, #255	; 0xff
 8005ec8:	bf8b      	itete	hi
 8005eca:	238a      	movhi	r3, #138	; 0x8a
 8005ecc:	700a      	strbls	r2, [r1, #0]
 8005ece:	6003      	strhi	r3, [r0, #0]
 8005ed0:	2001      	movls	r0, #1
 8005ed2:	bf88      	it	hi
 8005ed4:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ed8:	4770      	bx	lr
 8005eda:	4608      	mov	r0, r1
 8005edc:	4770      	bx	lr

08005ede <quorem>:
 8005ede:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee2:	6903      	ldr	r3, [r0, #16]
 8005ee4:	690c      	ldr	r4, [r1, #16]
 8005ee6:	4680      	mov	r8, r0
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	f2c0 8084 	blt.w	8005ff6 <quorem+0x118>
 8005eee:	3c01      	subs	r4, #1
 8005ef0:	f101 0714 	add.w	r7, r1, #20
 8005ef4:	f100 0614 	add.w	r6, r0, #20
 8005ef8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005efc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f00:	3501      	adds	r5, #1
 8005f02:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f06:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005f0a:	eb06 030c 	add.w	r3, r6, ip
 8005f0e:	eb07 090c 	add.w	r9, r7, ip
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	b39d      	cbz	r5, 8005f7e <quorem+0xa0>
 8005f16:	f04f 0a00 	mov.w	sl, #0
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	46b6      	mov	lr, r6
 8005f1e:	46d3      	mov	fp, sl
 8005f20:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f24:	b293      	uxth	r3, r2
 8005f26:	fb05 a303 	mla	r3, r5, r3, sl
 8005f2a:	0c12      	lsrs	r2, r2, #16
 8005f2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f30:	fb05 a202 	mla	r2, r5, r2, sl
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	ebab 0303 	sub.w	r3, fp, r3
 8005f3a:	f8de b000 	ldr.w	fp, [lr]
 8005f3e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005f42:	fa1f fb8b 	uxth.w	fp, fp
 8005f46:	445b      	add	r3, fp
 8005f48:	fa1f fb82 	uxth.w	fp, r2
 8005f4c:	f8de 2000 	ldr.w	r2, [lr]
 8005f50:	4581      	cmp	r9, r0
 8005f52:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005f56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f60:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005f64:	f84e 3b04 	str.w	r3, [lr], #4
 8005f68:	d2da      	bcs.n	8005f20 <quorem+0x42>
 8005f6a:	f856 300c 	ldr.w	r3, [r6, ip]
 8005f6e:	b933      	cbnz	r3, 8005f7e <quorem+0xa0>
 8005f70:	9b01      	ldr	r3, [sp, #4]
 8005f72:	3b04      	subs	r3, #4
 8005f74:	429e      	cmp	r6, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	d331      	bcc.n	8005fde <quorem+0x100>
 8005f7a:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f001 fb98 	bl	80076b4 <__mcmp>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	db26      	blt.n	8005fd6 <quorem+0xf8>
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f04f 0c00 	mov.w	ip, #0
 8005f8e:	3501      	adds	r5, #1
 8005f90:	f857 1b04 	ldr.w	r1, [r7], #4
 8005f94:	f8d0 e000 	ldr.w	lr, [r0]
 8005f98:	b28b      	uxth	r3, r1
 8005f9a:	ebac 0303 	sub.w	r3, ip, r3
 8005f9e:	fa1f f28e 	uxth.w	r2, lr
 8005fa2:	4413      	add	r3, r2
 8005fa4:	0c0a      	lsrs	r2, r1, #16
 8005fa6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fb4:	45b9      	cmp	r9, r7
 8005fb6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fba:	f840 3b04 	str.w	r3, [r0], #4
 8005fbe:	d2e7      	bcs.n	8005f90 <quorem+0xb2>
 8005fc0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005fc4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005fc8:	b92a      	cbnz	r2, 8005fd6 <quorem+0xf8>
 8005fca:	3b04      	subs	r3, #4
 8005fcc:	429e      	cmp	r6, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	d30b      	bcc.n	8005fea <quorem+0x10c>
 8005fd2:	f8c8 4010 	str.w	r4, [r8, #16]
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	b003      	add	sp, #12
 8005fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	3b04      	subs	r3, #4
 8005fe2:	2a00      	cmp	r2, #0
 8005fe4:	d1c9      	bne.n	8005f7a <quorem+0x9c>
 8005fe6:	3c01      	subs	r4, #1
 8005fe8:	e7c4      	b.n	8005f74 <quorem+0x96>
 8005fea:	6812      	ldr	r2, [r2, #0]
 8005fec:	3b04      	subs	r3, #4
 8005fee:	2a00      	cmp	r2, #0
 8005ff0:	d1ef      	bne.n	8005fd2 <quorem+0xf4>
 8005ff2:	3c01      	subs	r4, #1
 8005ff4:	e7ea      	b.n	8005fcc <quorem+0xee>
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	e7ee      	b.n	8005fd8 <quorem+0xfa>
 8005ffa:	0000      	movs	r0, r0
 8005ffc:	0000      	movs	r0, r0
	...

08006000 <_dtoa_r>:
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	4616      	mov	r6, r2
 8006006:	461f      	mov	r7, r3
 8006008:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800600a:	b095      	sub	sp, #84	; 0x54
 800600c:	4604      	mov	r4, r0
 800600e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006012:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006016:	b93d      	cbnz	r5, 8006028 <_dtoa_r+0x28>
 8006018:	2010      	movs	r0, #16
 800601a:	f7fe fab1 	bl	8004580 <malloc>
 800601e:	6260      	str	r0, [r4, #36]	; 0x24
 8006020:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006024:	6005      	str	r5, [r0, #0]
 8006026:	60c5      	str	r5, [r0, #12]
 8006028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800602a:	6819      	ldr	r1, [r3, #0]
 800602c:	b151      	cbz	r1, 8006044 <_dtoa_r+0x44>
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	2301      	movs	r3, #1
 8006032:	4093      	lsls	r3, r2
 8006034:	604a      	str	r2, [r1, #4]
 8006036:	608b      	str	r3, [r1, #8]
 8006038:	4620      	mov	r0, r4
 800603a:	f001 f91c 	bl	8007276 <_Bfree>
 800603e:	2200      	movs	r2, #0
 8006040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	1e3b      	subs	r3, r7, #0
 8006046:	bfaf      	iteee	ge
 8006048:	2300      	movge	r3, #0
 800604a:	2201      	movlt	r2, #1
 800604c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006050:	9303      	strlt	r3, [sp, #12]
 8006052:	bfac      	ite	ge
 8006054:	f8c8 3000 	strge.w	r3, [r8]
 8006058:	f8c8 2000 	strlt.w	r2, [r8]
 800605c:	4bae      	ldr	r3, [pc, #696]	; (8006318 <_dtoa_r+0x318>)
 800605e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006062:	ea33 0308 	bics.w	r3, r3, r8
 8006066:	d11b      	bne.n	80060a0 <_dtoa_r+0xa0>
 8006068:	f242 730f 	movw	r3, #9999	; 0x270f
 800606c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	b923      	cbnz	r3, 800607e <_dtoa_r+0x7e>
 8006074:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006078:	2800      	cmp	r0, #0
 800607a:	f000 8545 	beq.w	8006b08 <_dtoa_r+0xb08>
 800607e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006080:	b953      	cbnz	r3, 8006098 <_dtoa_r+0x98>
 8006082:	4ba6      	ldr	r3, [pc, #664]	; (800631c <_dtoa_r+0x31c>)
 8006084:	e021      	b.n	80060ca <_dtoa_r+0xca>
 8006086:	4ba6      	ldr	r3, [pc, #664]	; (8006320 <_dtoa_r+0x320>)
 8006088:	9306      	str	r3, [sp, #24]
 800608a:	3308      	adds	r3, #8
 800608c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	9806      	ldr	r0, [sp, #24]
 8006092:	b015      	add	sp, #84	; 0x54
 8006094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006098:	4ba0      	ldr	r3, [pc, #640]	; (800631c <_dtoa_r+0x31c>)
 800609a:	9306      	str	r3, [sp, #24]
 800609c:	3303      	adds	r3, #3
 800609e:	e7f5      	b.n	800608c <_dtoa_r+0x8c>
 80060a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060a4:	2200      	movs	r2, #0
 80060a6:	2300      	movs	r3, #0
 80060a8:	4630      	mov	r0, r6
 80060aa:	4639      	mov	r1, r7
 80060ac:	f7fa fc7c 	bl	80009a8 <__aeabi_dcmpeq>
 80060b0:	4682      	mov	sl, r0
 80060b2:	b160      	cbz	r0, 80060ce <_dtoa_r+0xce>
 80060b4:	2301      	movs	r3, #1
 80060b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8520 	beq.w	8006b02 <_dtoa_r+0xb02>
 80060c2:	4b98      	ldr	r3, [pc, #608]	; (8006324 <_dtoa_r+0x324>)
 80060c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	9306      	str	r3, [sp, #24]
 80060cc:	e7e0      	b.n	8006090 <_dtoa_r+0x90>
 80060ce:	ab12      	add	r3, sp, #72	; 0x48
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	ab13      	add	r3, sp, #76	; 0x4c
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	4632      	mov	r2, r6
 80060d8:	463b      	mov	r3, r7
 80060da:	4620      	mov	r0, r4
 80060dc:	f001 fbd8 	bl	8007890 <__d2b>
 80060e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060e4:	4683      	mov	fp, r0
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	d07d      	beq.n	80061e6 <_dtoa_r+0x1e6>
 80060ea:	46b0      	mov	r8, r6
 80060ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060f0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80060f4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80060f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060fc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006100:	2200      	movs	r2, #0
 8006102:	4b89      	ldr	r3, [pc, #548]	; (8006328 <_dtoa_r+0x328>)
 8006104:	4640      	mov	r0, r8
 8006106:	4649      	mov	r1, r9
 8006108:	f7fa f82e 	bl	8000168 <__aeabi_dsub>
 800610c:	a37c      	add	r3, pc, #496	; (adr r3, 8006300 <_dtoa_r+0x300>)
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f7fa f9e1 	bl	80004d8 <__aeabi_dmul>
 8006116:	a37c      	add	r3, pc, #496	; (adr r3, 8006308 <_dtoa_r+0x308>)
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	f7fa f826 	bl	800016c <__adddf3>
 8006120:	4606      	mov	r6, r0
 8006122:	4628      	mov	r0, r5
 8006124:	460f      	mov	r7, r1
 8006126:	f7fa f96d 	bl	8000404 <__aeabi_i2d>
 800612a:	a379      	add	r3, pc, #484	; (adr r3, 8006310 <_dtoa_r+0x310>)
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f7fa f9d2 	bl	80004d8 <__aeabi_dmul>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4630      	mov	r0, r6
 800613a:	4639      	mov	r1, r7
 800613c:	f7fa f816 	bl	800016c <__adddf3>
 8006140:	4606      	mov	r6, r0
 8006142:	460f      	mov	r7, r1
 8006144:	f7fa fc78 	bl	8000a38 <__aeabi_d2iz>
 8006148:	2200      	movs	r2, #0
 800614a:	4682      	mov	sl, r0
 800614c:	2300      	movs	r3, #0
 800614e:	4630      	mov	r0, r6
 8006150:	4639      	mov	r1, r7
 8006152:	f7fa fc33 	bl	80009bc <__aeabi_dcmplt>
 8006156:	b148      	cbz	r0, 800616c <_dtoa_r+0x16c>
 8006158:	4650      	mov	r0, sl
 800615a:	f7fa f953 	bl	8000404 <__aeabi_i2d>
 800615e:	4632      	mov	r2, r6
 8006160:	463b      	mov	r3, r7
 8006162:	f7fa fc21 	bl	80009a8 <__aeabi_dcmpeq>
 8006166:	b908      	cbnz	r0, 800616c <_dtoa_r+0x16c>
 8006168:	f10a 3aff 	add.w	sl, sl, #4294967295
 800616c:	f1ba 0f16 	cmp.w	sl, #22
 8006170:	d85a      	bhi.n	8006228 <_dtoa_r+0x228>
 8006172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006176:	496d      	ldr	r1, [pc, #436]	; (800632c <_dtoa_r+0x32c>)
 8006178:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800617c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006180:	f7fa fc3a 	bl	80009f8 <__aeabi_dcmpgt>
 8006184:	2800      	cmp	r0, #0
 8006186:	d051      	beq.n	800622c <_dtoa_r+0x22c>
 8006188:	2300      	movs	r3, #0
 800618a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800618e:	930d      	str	r3, [sp, #52]	; 0x34
 8006190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006192:	1b5d      	subs	r5, r3, r5
 8006194:	1e6b      	subs	r3, r5, #1
 8006196:	9307      	str	r3, [sp, #28]
 8006198:	bf43      	ittte	mi
 800619a:	2300      	movmi	r3, #0
 800619c:	f1c5 0901 	rsbmi	r9, r5, #1
 80061a0:	9307      	strmi	r3, [sp, #28]
 80061a2:	f04f 0900 	movpl.w	r9, #0
 80061a6:	f1ba 0f00 	cmp.w	sl, #0
 80061aa:	db41      	blt.n	8006230 <_dtoa_r+0x230>
 80061ac:	9b07      	ldr	r3, [sp, #28]
 80061ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80061b2:	4453      	add	r3, sl
 80061b4:	9307      	str	r3, [sp, #28]
 80061b6:	2300      	movs	r3, #0
 80061b8:	9308      	str	r3, [sp, #32]
 80061ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061bc:	2b09      	cmp	r3, #9
 80061be:	f200 808f 	bhi.w	80062e0 <_dtoa_r+0x2e0>
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	bfc4      	itt	gt
 80061c6:	3b04      	subgt	r3, #4
 80061c8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80061ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061cc:	bfc8      	it	gt
 80061ce:	2500      	movgt	r5, #0
 80061d0:	f1a3 0302 	sub.w	r3, r3, #2
 80061d4:	bfd8      	it	le
 80061d6:	2501      	movle	r5, #1
 80061d8:	2b03      	cmp	r3, #3
 80061da:	f200 808d 	bhi.w	80062f8 <_dtoa_r+0x2f8>
 80061de:	e8df f003 	tbb	[pc, r3]
 80061e2:	7d7b      	.short	0x7d7b
 80061e4:	6f2f      	.short	0x6f2f
 80061e6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80061ea:	441d      	add	r5, r3
 80061ec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80061f0:	2820      	cmp	r0, #32
 80061f2:	dd13      	ble.n	800621c <_dtoa_r+0x21c>
 80061f4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80061f8:	9b02      	ldr	r3, [sp, #8]
 80061fa:	fa08 f800 	lsl.w	r8, r8, r0
 80061fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006202:	fa23 f000 	lsr.w	r0, r3, r0
 8006206:	ea48 0000 	orr.w	r0, r8, r0
 800620a:	f7fa f8eb 	bl	80003e4 <__aeabi_ui2d>
 800620e:	2301      	movs	r3, #1
 8006210:	4680      	mov	r8, r0
 8006212:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006216:	3d01      	subs	r5, #1
 8006218:	9310      	str	r3, [sp, #64]	; 0x40
 800621a:	e771      	b.n	8006100 <_dtoa_r+0x100>
 800621c:	9b02      	ldr	r3, [sp, #8]
 800621e:	f1c0 0020 	rsb	r0, r0, #32
 8006222:	fa03 f000 	lsl.w	r0, r3, r0
 8006226:	e7f0      	b.n	800620a <_dtoa_r+0x20a>
 8006228:	2301      	movs	r3, #1
 800622a:	e7b0      	b.n	800618e <_dtoa_r+0x18e>
 800622c:	900d      	str	r0, [sp, #52]	; 0x34
 800622e:	e7af      	b.n	8006190 <_dtoa_r+0x190>
 8006230:	f1ca 0300 	rsb	r3, sl, #0
 8006234:	9308      	str	r3, [sp, #32]
 8006236:	2300      	movs	r3, #0
 8006238:	eba9 090a 	sub.w	r9, r9, sl
 800623c:	930c      	str	r3, [sp, #48]	; 0x30
 800623e:	e7bc      	b.n	80061ba <_dtoa_r+0x1ba>
 8006240:	2301      	movs	r3, #1
 8006242:	9309      	str	r3, [sp, #36]	; 0x24
 8006244:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006246:	2b00      	cmp	r3, #0
 8006248:	dd74      	ble.n	8006334 <_dtoa_r+0x334>
 800624a:	4698      	mov	r8, r3
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	2200      	movs	r2, #0
 8006250:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006252:	6072      	str	r2, [r6, #4]
 8006254:	2204      	movs	r2, #4
 8006256:	f102 0014 	add.w	r0, r2, #20
 800625a:	4298      	cmp	r0, r3
 800625c:	6871      	ldr	r1, [r6, #4]
 800625e:	d96e      	bls.n	800633e <_dtoa_r+0x33e>
 8006260:	4620      	mov	r0, r4
 8006262:	f000 ffd4 	bl	800720e <_Balloc>
 8006266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006268:	6030      	str	r0, [r6, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f1b8 0f0e 	cmp.w	r8, #14
 8006270:	9306      	str	r3, [sp, #24]
 8006272:	f200 80ed 	bhi.w	8006450 <_dtoa_r+0x450>
 8006276:	2d00      	cmp	r5, #0
 8006278:	f000 80ea 	beq.w	8006450 <_dtoa_r+0x450>
 800627c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006280:	f1ba 0f00 	cmp.w	sl, #0
 8006284:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006288:	dd77      	ble.n	800637a <_dtoa_r+0x37a>
 800628a:	4a28      	ldr	r2, [pc, #160]	; (800632c <_dtoa_r+0x32c>)
 800628c:	f00a 030f 	and.w	r3, sl, #15
 8006290:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006294:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006298:	06f0      	lsls	r0, r6, #27
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80062a2:	d568      	bpl.n	8006376 <_dtoa_r+0x376>
 80062a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80062a8:	4b21      	ldr	r3, [pc, #132]	; (8006330 <_dtoa_r+0x330>)
 80062aa:	2503      	movs	r5, #3
 80062ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062b0:	f7fa fa3c 	bl	800072c <__aeabi_ddiv>
 80062b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b8:	f006 060f 	and.w	r6, r6, #15
 80062bc:	4f1c      	ldr	r7, [pc, #112]	; (8006330 <_dtoa_r+0x330>)
 80062be:	e04f      	b.n	8006360 <_dtoa_r+0x360>
 80062c0:	2301      	movs	r3, #1
 80062c2:	9309      	str	r3, [sp, #36]	; 0x24
 80062c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062c6:	4453      	add	r3, sl
 80062c8:	f103 0801 	add.w	r8, r3, #1
 80062cc:	9304      	str	r3, [sp, #16]
 80062ce:	4643      	mov	r3, r8
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	bfb8      	it	lt
 80062d4:	2301      	movlt	r3, #1
 80062d6:	e7ba      	b.n	800624e <_dtoa_r+0x24e>
 80062d8:	2300      	movs	r3, #0
 80062da:	e7b2      	b.n	8006242 <_dtoa_r+0x242>
 80062dc:	2300      	movs	r3, #0
 80062de:	e7f0      	b.n	80062c2 <_dtoa_r+0x2c2>
 80062e0:	2501      	movs	r5, #1
 80062e2:	2300      	movs	r3, #0
 80062e4:	9509      	str	r5, [sp, #36]	; 0x24
 80062e6:	931e      	str	r3, [sp, #120]	; 0x78
 80062e8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ec:	2200      	movs	r2, #0
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	4698      	mov	r8, r3
 80062f2:	2312      	movs	r3, #18
 80062f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80062f6:	e7aa      	b.n	800624e <_dtoa_r+0x24e>
 80062f8:	2301      	movs	r3, #1
 80062fa:	9309      	str	r3, [sp, #36]	; 0x24
 80062fc:	e7f4      	b.n	80062e8 <_dtoa_r+0x2e8>
 80062fe:	bf00      	nop
 8006300:	636f4361 	.word	0x636f4361
 8006304:	3fd287a7 	.word	0x3fd287a7
 8006308:	8b60c8b3 	.word	0x8b60c8b3
 800630c:	3fc68a28 	.word	0x3fc68a28
 8006310:	509f79fb 	.word	0x509f79fb
 8006314:	3fd34413 	.word	0x3fd34413
 8006318:	7ff00000 	.word	0x7ff00000
 800631c:	08007fbf 	.word	0x08007fbf
 8006320:	08007fb6 	.word	0x08007fb6
 8006324:	08007e17 	.word	0x08007e17
 8006328:	3ff80000 	.word	0x3ff80000
 800632c:	08007ff0 	.word	0x08007ff0
 8006330:	08007fc8 	.word	0x08007fc8
 8006334:	2301      	movs	r3, #1
 8006336:	9304      	str	r3, [sp, #16]
 8006338:	4698      	mov	r8, r3
 800633a:	461a      	mov	r2, r3
 800633c:	e7da      	b.n	80062f4 <_dtoa_r+0x2f4>
 800633e:	3101      	adds	r1, #1
 8006340:	6071      	str	r1, [r6, #4]
 8006342:	0052      	lsls	r2, r2, #1
 8006344:	e787      	b.n	8006256 <_dtoa_r+0x256>
 8006346:	07f1      	lsls	r1, r6, #31
 8006348:	d508      	bpl.n	800635c <_dtoa_r+0x35c>
 800634a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800634e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006352:	f7fa f8c1 	bl	80004d8 <__aeabi_dmul>
 8006356:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800635a:	3501      	adds	r5, #1
 800635c:	1076      	asrs	r6, r6, #1
 800635e:	3708      	adds	r7, #8
 8006360:	2e00      	cmp	r6, #0
 8006362:	d1f0      	bne.n	8006346 <_dtoa_r+0x346>
 8006364:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636c:	f7fa f9de 	bl	800072c <__aeabi_ddiv>
 8006370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006374:	e01b      	b.n	80063ae <_dtoa_r+0x3ae>
 8006376:	2502      	movs	r5, #2
 8006378:	e7a0      	b.n	80062bc <_dtoa_r+0x2bc>
 800637a:	f000 80a4 	beq.w	80064c6 <_dtoa_r+0x4c6>
 800637e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006382:	f1ca 0600 	rsb	r6, sl, #0
 8006386:	4ba0      	ldr	r3, [pc, #640]	; (8006608 <_dtoa_r+0x608>)
 8006388:	f006 020f 	and.w	r2, r6, #15
 800638c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f7fa f8a0 	bl	80004d8 <__aeabi_dmul>
 8006398:	2502      	movs	r5, #2
 800639a:	2300      	movs	r3, #0
 800639c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a0:	4f9a      	ldr	r7, [pc, #616]	; (800660c <_dtoa_r+0x60c>)
 80063a2:	1136      	asrs	r6, r6, #4
 80063a4:	2e00      	cmp	r6, #0
 80063a6:	f040 8083 	bne.w	80064b0 <_dtoa_r+0x4b0>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e0      	bne.n	8006370 <_dtoa_r+0x370>
 80063ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 808a 	beq.w	80064ca <_dtoa_r+0x4ca>
 80063b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80063be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b92      	ldr	r3, [pc, #584]	; (8006610 <_dtoa_r+0x610>)
 80063c6:	f7fa faf9 	bl	80009bc <__aeabi_dcmplt>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d07d      	beq.n	80064ca <_dtoa_r+0x4ca>
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	d07a      	beq.n	80064ca <_dtoa_r+0x4ca>
 80063d4:	9b04      	ldr	r3, [sp, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	dd36      	ble.n	8006448 <_dtoa_r+0x448>
 80063da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063de:	2200      	movs	r2, #0
 80063e0:	4b8c      	ldr	r3, [pc, #560]	; (8006614 <_dtoa_r+0x614>)
 80063e2:	f7fa f879 	bl	80004d8 <__aeabi_dmul>
 80063e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ea:	9e04      	ldr	r6, [sp, #16]
 80063ec:	f10a 37ff 	add.w	r7, sl, #4294967295
 80063f0:	3501      	adds	r5, #1
 80063f2:	4628      	mov	r0, r5
 80063f4:	f7fa f806 	bl	8000404 <__aeabi_i2d>
 80063f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063fc:	f7fa f86c 	bl	80004d8 <__aeabi_dmul>
 8006400:	2200      	movs	r2, #0
 8006402:	4b85      	ldr	r3, [pc, #532]	; (8006618 <_dtoa_r+0x618>)
 8006404:	f7f9 feb2 	bl	800016c <__adddf3>
 8006408:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800640c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006410:	950b      	str	r5, [sp, #44]	; 0x2c
 8006412:	2e00      	cmp	r6, #0
 8006414:	d15c      	bne.n	80064d0 <_dtoa_r+0x4d0>
 8006416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	4b7f      	ldr	r3, [pc, #508]	; (800661c <_dtoa_r+0x61c>)
 800641e:	f7f9 fea3 	bl	8000168 <__aeabi_dsub>
 8006422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006424:	462b      	mov	r3, r5
 8006426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800642a:	f7fa fae5 	bl	80009f8 <__aeabi_dcmpgt>
 800642e:	2800      	cmp	r0, #0
 8006430:	f040 8281 	bne.w	8006936 <_dtoa_r+0x936>
 8006434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800643a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800643e:	f7fa fabd 	bl	80009bc <__aeabi_dcmplt>
 8006442:	2800      	cmp	r0, #0
 8006444:	f040 8275 	bne.w	8006932 <_dtoa_r+0x932>
 8006448:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800644c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006452:	2b00      	cmp	r3, #0
 8006454:	f2c0 814b 	blt.w	80066ee <_dtoa_r+0x6ee>
 8006458:	f1ba 0f0e 	cmp.w	sl, #14
 800645c:	f300 8147 	bgt.w	80066ee <_dtoa_r+0x6ee>
 8006460:	4b69      	ldr	r3, [pc, #420]	; (8006608 <_dtoa_r+0x608>)
 8006462:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800646e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006470:	2b00      	cmp	r3, #0
 8006472:	f280 80d7 	bge.w	8006624 <_dtoa_r+0x624>
 8006476:	f1b8 0f00 	cmp.w	r8, #0
 800647a:	f300 80d3 	bgt.w	8006624 <_dtoa_r+0x624>
 800647e:	f040 8257 	bne.w	8006930 <_dtoa_r+0x930>
 8006482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006486:	2200      	movs	r2, #0
 8006488:	4b64      	ldr	r3, [pc, #400]	; (800661c <_dtoa_r+0x61c>)
 800648a:	f7fa f825 	bl	80004d8 <__aeabi_dmul>
 800648e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006492:	f7fa faa7 	bl	80009e4 <__aeabi_dcmpge>
 8006496:	4646      	mov	r6, r8
 8006498:	4647      	mov	r7, r8
 800649a:	2800      	cmp	r0, #0
 800649c:	f040 822d 	bne.w	80068fa <_dtoa_r+0x8fa>
 80064a0:	9b06      	ldr	r3, [sp, #24]
 80064a2:	9a06      	ldr	r2, [sp, #24]
 80064a4:	1c5d      	adds	r5, r3, #1
 80064a6:	2331      	movs	r3, #49	; 0x31
 80064a8:	f10a 0a01 	add.w	sl, sl, #1
 80064ac:	7013      	strb	r3, [r2, #0]
 80064ae:	e228      	b.n	8006902 <_dtoa_r+0x902>
 80064b0:	07f2      	lsls	r2, r6, #31
 80064b2:	d505      	bpl.n	80064c0 <_dtoa_r+0x4c0>
 80064b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b8:	f7fa f80e 	bl	80004d8 <__aeabi_dmul>
 80064bc:	2301      	movs	r3, #1
 80064be:	3501      	adds	r5, #1
 80064c0:	1076      	asrs	r6, r6, #1
 80064c2:	3708      	adds	r7, #8
 80064c4:	e76e      	b.n	80063a4 <_dtoa_r+0x3a4>
 80064c6:	2502      	movs	r5, #2
 80064c8:	e771      	b.n	80063ae <_dtoa_r+0x3ae>
 80064ca:	4657      	mov	r7, sl
 80064cc:	4646      	mov	r6, r8
 80064ce:	e790      	b.n	80063f2 <_dtoa_r+0x3f2>
 80064d0:	4b4d      	ldr	r3, [pc, #308]	; (8006608 <_dtoa_r+0x608>)
 80064d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064d6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80064da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d048      	beq.n	8006572 <_dtoa_r+0x572>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	2000      	movs	r0, #0
 80064e6:	494e      	ldr	r1, [pc, #312]	; (8006620 <_dtoa_r+0x620>)
 80064e8:	f7fa f920 	bl	800072c <__aeabi_ddiv>
 80064ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064f0:	f7f9 fe3a 	bl	8000168 <__aeabi_dsub>
 80064f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064f8:	9d06      	ldr	r5, [sp, #24]
 80064fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064fe:	f7fa fa9b 	bl	8000a38 <__aeabi_d2iz>
 8006502:	9011      	str	r0, [sp, #68]	; 0x44
 8006504:	f7f9 ff7e 	bl	8000404 <__aeabi_i2d>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006510:	f7f9 fe2a 	bl	8000168 <__aeabi_dsub>
 8006514:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800651a:	3330      	adds	r3, #48	; 0x30
 800651c:	f805 3b01 	strb.w	r3, [r5], #1
 8006520:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006524:	f7fa fa4a 	bl	80009bc <__aeabi_dcmplt>
 8006528:	2800      	cmp	r0, #0
 800652a:	d163      	bne.n	80065f4 <_dtoa_r+0x5f4>
 800652c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006530:	2000      	movs	r0, #0
 8006532:	4937      	ldr	r1, [pc, #220]	; (8006610 <_dtoa_r+0x610>)
 8006534:	f7f9 fe18 	bl	8000168 <__aeabi_dsub>
 8006538:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800653c:	f7fa fa3e 	bl	80009bc <__aeabi_dcmplt>
 8006540:	2800      	cmp	r0, #0
 8006542:	f040 80b5 	bne.w	80066b0 <_dtoa_r+0x6b0>
 8006546:	9b06      	ldr	r3, [sp, #24]
 8006548:	1aeb      	subs	r3, r5, r3
 800654a:	429e      	cmp	r6, r3
 800654c:	f77f af7c 	ble.w	8006448 <_dtoa_r+0x448>
 8006550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006554:	2200      	movs	r2, #0
 8006556:	4b2f      	ldr	r3, [pc, #188]	; (8006614 <_dtoa_r+0x614>)
 8006558:	f7f9 ffbe 	bl	80004d8 <__aeabi_dmul>
 800655c:	2200      	movs	r2, #0
 800655e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006566:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <_dtoa_r+0x614>)
 8006568:	f7f9 ffb6 	bl	80004d8 <__aeabi_dmul>
 800656c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006570:	e7c3      	b.n	80064fa <_dtoa_r+0x4fa>
 8006572:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006576:	f7f9 ffaf 	bl	80004d8 <__aeabi_dmul>
 800657a:	9b06      	ldr	r3, [sp, #24]
 800657c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006580:	199d      	adds	r5, r3, r6
 8006582:	461e      	mov	r6, r3
 8006584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006588:	f7fa fa56 	bl	8000a38 <__aeabi_d2iz>
 800658c:	9011      	str	r0, [sp, #68]	; 0x44
 800658e:	f7f9 ff39 	bl	8000404 <__aeabi_i2d>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800659a:	f7f9 fde5 	bl	8000168 <__aeabi_dsub>
 800659e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a4:	3330      	adds	r3, #48	; 0x30
 80065a6:	f806 3b01 	strb.w	r3, [r6], #1
 80065aa:	42ae      	cmp	r6, r5
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	d124      	bne.n	80065fc <_dtoa_r+0x5fc>
 80065b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065b6:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <_dtoa_r+0x620>)
 80065b8:	f7f9 fdd8 	bl	800016c <__adddf3>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c4:	f7fa fa18 	bl	80009f8 <__aeabi_dcmpgt>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d171      	bne.n	80066b0 <_dtoa_r+0x6b0>
 80065cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065d0:	2000      	movs	r0, #0
 80065d2:	4913      	ldr	r1, [pc, #76]	; (8006620 <_dtoa_r+0x620>)
 80065d4:	f7f9 fdc8 	bl	8000168 <__aeabi_dsub>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e0:	f7fa f9ec 	bl	80009bc <__aeabi_dcmplt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f43f af2f 	beq.w	8006448 <_dtoa_r+0x448>
 80065ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065ee:	1e6a      	subs	r2, r5, #1
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	d001      	beq.n	80065f8 <_dtoa_r+0x5f8>
 80065f4:	46ba      	mov	sl, r7
 80065f6:	e04a      	b.n	800668e <_dtoa_r+0x68e>
 80065f8:	4615      	mov	r5, r2
 80065fa:	e7f6      	b.n	80065ea <_dtoa_r+0x5ea>
 80065fc:	4b05      	ldr	r3, [pc, #20]	; (8006614 <_dtoa_r+0x614>)
 80065fe:	f7f9 ff6b 	bl	80004d8 <__aeabi_dmul>
 8006602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006606:	e7bd      	b.n	8006584 <_dtoa_r+0x584>
 8006608:	08007ff0 	.word	0x08007ff0
 800660c:	08007fc8 	.word	0x08007fc8
 8006610:	3ff00000 	.word	0x3ff00000
 8006614:	40240000 	.word	0x40240000
 8006618:	401c0000 	.word	0x401c0000
 800661c:	40140000 	.word	0x40140000
 8006620:	3fe00000 	.word	0x3fe00000
 8006624:	9d06      	ldr	r5, [sp, #24]
 8006626:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800662a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800662e:	4630      	mov	r0, r6
 8006630:	4639      	mov	r1, r7
 8006632:	f7fa f87b 	bl	800072c <__aeabi_ddiv>
 8006636:	f7fa f9ff 	bl	8000a38 <__aeabi_d2iz>
 800663a:	4681      	mov	r9, r0
 800663c:	f7f9 fee2 	bl	8000404 <__aeabi_i2d>
 8006640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006644:	f7f9 ff48 	bl	80004d8 <__aeabi_dmul>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4630      	mov	r0, r6
 800664e:	4639      	mov	r1, r7
 8006650:	f7f9 fd8a 	bl	8000168 <__aeabi_dsub>
 8006654:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006658:	f805 6b01 	strb.w	r6, [r5], #1
 800665c:	9e06      	ldr	r6, [sp, #24]
 800665e:	4602      	mov	r2, r0
 8006660:	1bae      	subs	r6, r5, r6
 8006662:	45b0      	cmp	r8, r6
 8006664:	460b      	mov	r3, r1
 8006666:	d135      	bne.n	80066d4 <_dtoa_r+0x6d4>
 8006668:	f7f9 fd80 	bl	800016c <__adddf3>
 800666c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006670:	4606      	mov	r6, r0
 8006672:	460f      	mov	r7, r1
 8006674:	f7fa f9c0 	bl	80009f8 <__aeabi_dcmpgt>
 8006678:	b9c8      	cbnz	r0, 80066ae <_dtoa_r+0x6ae>
 800667a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800667e:	4630      	mov	r0, r6
 8006680:	4639      	mov	r1, r7
 8006682:	f7fa f991 	bl	80009a8 <__aeabi_dcmpeq>
 8006686:	b110      	cbz	r0, 800668e <_dtoa_r+0x68e>
 8006688:	f019 0f01 	tst.w	r9, #1
 800668c:	d10f      	bne.n	80066ae <_dtoa_r+0x6ae>
 800668e:	4659      	mov	r1, fp
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fdf0 	bl	8007276 <_Bfree>
 8006696:	2300      	movs	r3, #0
 8006698:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800669a:	702b      	strb	r3, [r5, #0]
 800669c:	f10a 0301 	add.w	r3, sl, #1
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f43f acf3 	beq.w	8006090 <_dtoa_r+0x90>
 80066aa:	601d      	str	r5, [r3, #0]
 80066ac:	e4f0      	b.n	8006090 <_dtoa_r+0x90>
 80066ae:	4657      	mov	r7, sl
 80066b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80066b4:	1e6b      	subs	r3, r5, #1
 80066b6:	2a39      	cmp	r2, #57	; 0x39
 80066b8:	d106      	bne.n	80066c8 <_dtoa_r+0x6c8>
 80066ba:	9a06      	ldr	r2, [sp, #24]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d107      	bne.n	80066d0 <_dtoa_r+0x6d0>
 80066c0:	2330      	movs	r3, #48	; 0x30
 80066c2:	7013      	strb	r3, [r2, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	3701      	adds	r7, #1
 80066c8:	781a      	ldrb	r2, [r3, #0]
 80066ca:	3201      	adds	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e791      	b.n	80065f4 <_dtoa_r+0x5f4>
 80066d0:	461d      	mov	r5, r3
 80066d2:	e7ed      	b.n	80066b0 <_dtoa_r+0x6b0>
 80066d4:	2200      	movs	r2, #0
 80066d6:	4b99      	ldr	r3, [pc, #612]	; (800693c <_dtoa_r+0x93c>)
 80066d8:	f7f9 fefe 	bl	80004d8 <__aeabi_dmul>
 80066dc:	2200      	movs	r2, #0
 80066de:	2300      	movs	r3, #0
 80066e0:	4606      	mov	r6, r0
 80066e2:	460f      	mov	r7, r1
 80066e4:	f7fa f960 	bl	80009a8 <__aeabi_dcmpeq>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d09e      	beq.n	800662a <_dtoa_r+0x62a>
 80066ec:	e7cf      	b.n	800668e <_dtoa_r+0x68e>
 80066ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f0:	2a00      	cmp	r2, #0
 80066f2:	f000 8088 	beq.w	8006806 <_dtoa_r+0x806>
 80066f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80066f8:	2a01      	cmp	r2, #1
 80066fa:	dc6d      	bgt.n	80067d8 <_dtoa_r+0x7d8>
 80066fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066fe:	2a00      	cmp	r2, #0
 8006700:	d066      	beq.n	80067d0 <_dtoa_r+0x7d0>
 8006702:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006706:	464d      	mov	r5, r9
 8006708:	9e08      	ldr	r6, [sp, #32]
 800670a:	9a07      	ldr	r2, [sp, #28]
 800670c:	2101      	movs	r1, #1
 800670e:	441a      	add	r2, r3
 8006710:	4620      	mov	r0, r4
 8006712:	4499      	add	r9, r3
 8006714:	9207      	str	r2, [sp, #28]
 8006716:	f000 fe8c 	bl	8007432 <__i2b>
 800671a:	4607      	mov	r7, r0
 800671c:	2d00      	cmp	r5, #0
 800671e:	dd0b      	ble.n	8006738 <_dtoa_r+0x738>
 8006720:	9b07      	ldr	r3, [sp, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	dd08      	ble.n	8006738 <_dtoa_r+0x738>
 8006726:	42ab      	cmp	r3, r5
 8006728:	bfa8      	it	ge
 800672a:	462b      	movge	r3, r5
 800672c:	9a07      	ldr	r2, [sp, #28]
 800672e:	eba9 0903 	sub.w	r9, r9, r3
 8006732:	1aed      	subs	r5, r5, r3
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	9b08      	ldr	r3, [sp, #32]
 800673a:	b1eb      	cbz	r3, 8006778 <_dtoa_r+0x778>
 800673c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	d065      	beq.n	800680e <_dtoa_r+0x80e>
 8006742:	b18e      	cbz	r6, 8006768 <_dtoa_r+0x768>
 8006744:	4639      	mov	r1, r7
 8006746:	4632      	mov	r2, r6
 8006748:	4620      	mov	r0, r4
 800674a:	f000 ff11 	bl	8007570 <__pow5mult>
 800674e:	465a      	mov	r2, fp
 8006750:	4601      	mov	r1, r0
 8006752:	4607      	mov	r7, r0
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fe75 	bl	8007444 <__multiply>
 800675a:	4659      	mov	r1, fp
 800675c:	900a      	str	r0, [sp, #40]	; 0x28
 800675e:	4620      	mov	r0, r4
 8006760:	f000 fd89 	bl	8007276 <_Bfree>
 8006764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006766:	469b      	mov	fp, r3
 8006768:	9b08      	ldr	r3, [sp, #32]
 800676a:	1b9a      	subs	r2, r3, r6
 800676c:	d004      	beq.n	8006778 <_dtoa_r+0x778>
 800676e:	4659      	mov	r1, fp
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fefd 	bl	8007570 <__pow5mult>
 8006776:	4683      	mov	fp, r0
 8006778:	2101      	movs	r1, #1
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fe59 	bl	8007432 <__i2b>
 8006780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006782:	4606      	mov	r6, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 81c6 	beq.w	8006b16 <_dtoa_r+0xb16>
 800678a:	461a      	mov	r2, r3
 800678c:	4601      	mov	r1, r0
 800678e:	4620      	mov	r0, r4
 8006790:	f000 feee 	bl	8007570 <__pow5mult>
 8006794:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006796:	4606      	mov	r6, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	dc3e      	bgt.n	800681a <_dtoa_r+0x81a>
 800679c:	9b02      	ldr	r3, [sp, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d137      	bne.n	8006812 <_dtoa_r+0x812>
 80067a2:	9b03      	ldr	r3, [sp, #12]
 80067a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d134      	bne.n	8006816 <_dtoa_r+0x816>
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067b2:	0d1b      	lsrs	r3, r3, #20
 80067b4:	051b      	lsls	r3, r3, #20
 80067b6:	b12b      	cbz	r3, 80067c4 <_dtoa_r+0x7c4>
 80067b8:	9b07      	ldr	r3, [sp, #28]
 80067ba:	f109 0901 	add.w	r9, r9, #1
 80067be:	3301      	adds	r3, #1
 80067c0:	9307      	str	r3, [sp, #28]
 80067c2:	2301      	movs	r3, #1
 80067c4:	9308      	str	r3, [sp, #32]
 80067c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d128      	bne.n	800681e <_dtoa_r+0x81e>
 80067cc:	2001      	movs	r0, #1
 80067ce:	e02e      	b.n	800682e <_dtoa_r+0x82e>
 80067d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067d6:	e796      	b.n	8006706 <_dtoa_r+0x706>
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	f108 36ff 	add.w	r6, r8, #4294967295
 80067de:	42b3      	cmp	r3, r6
 80067e0:	bfb7      	itett	lt
 80067e2:	9b08      	ldrlt	r3, [sp, #32]
 80067e4:	1b9e      	subge	r6, r3, r6
 80067e6:	1af2      	sublt	r2, r6, r3
 80067e8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80067ea:	bfbf      	itttt	lt
 80067ec:	9608      	strlt	r6, [sp, #32]
 80067ee:	189b      	addlt	r3, r3, r2
 80067f0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80067f2:	2600      	movlt	r6, #0
 80067f4:	f1b8 0f00 	cmp.w	r8, #0
 80067f8:	bfb9      	ittee	lt
 80067fa:	eba9 0508 	sublt.w	r5, r9, r8
 80067fe:	2300      	movlt	r3, #0
 8006800:	464d      	movge	r5, r9
 8006802:	4643      	movge	r3, r8
 8006804:	e781      	b.n	800670a <_dtoa_r+0x70a>
 8006806:	9e08      	ldr	r6, [sp, #32]
 8006808:	464d      	mov	r5, r9
 800680a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800680c:	e786      	b.n	800671c <_dtoa_r+0x71c>
 800680e:	9a08      	ldr	r2, [sp, #32]
 8006810:	e7ad      	b.n	800676e <_dtoa_r+0x76e>
 8006812:	2300      	movs	r3, #0
 8006814:	e7d6      	b.n	80067c4 <_dtoa_r+0x7c4>
 8006816:	9b02      	ldr	r3, [sp, #8]
 8006818:	e7d4      	b.n	80067c4 <_dtoa_r+0x7c4>
 800681a:	2300      	movs	r3, #0
 800681c:	9308      	str	r3, [sp, #32]
 800681e:	6933      	ldr	r3, [r6, #16]
 8006820:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006824:	6918      	ldr	r0, [r3, #16]
 8006826:	f000 fdb6 	bl	8007396 <__hi0bits>
 800682a:	f1c0 0020 	rsb	r0, r0, #32
 800682e:	9b07      	ldr	r3, [sp, #28]
 8006830:	4418      	add	r0, r3
 8006832:	f010 001f 	ands.w	r0, r0, #31
 8006836:	d047      	beq.n	80068c8 <_dtoa_r+0x8c8>
 8006838:	f1c0 0320 	rsb	r3, r0, #32
 800683c:	2b04      	cmp	r3, #4
 800683e:	dd3b      	ble.n	80068b8 <_dtoa_r+0x8b8>
 8006840:	9b07      	ldr	r3, [sp, #28]
 8006842:	f1c0 001c 	rsb	r0, r0, #28
 8006846:	4481      	add	r9, r0
 8006848:	4405      	add	r5, r0
 800684a:	4403      	add	r3, r0
 800684c:	9307      	str	r3, [sp, #28]
 800684e:	f1b9 0f00 	cmp.w	r9, #0
 8006852:	dd05      	ble.n	8006860 <_dtoa_r+0x860>
 8006854:	4659      	mov	r1, fp
 8006856:	464a      	mov	r2, r9
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fed7 	bl	800760c <__lshift>
 800685e:	4683      	mov	fp, r0
 8006860:	9b07      	ldr	r3, [sp, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dd05      	ble.n	8006872 <_dtoa_r+0x872>
 8006866:	4631      	mov	r1, r6
 8006868:	461a      	mov	r2, r3
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fece 	bl	800760c <__lshift>
 8006870:	4606      	mov	r6, r0
 8006872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006874:	b353      	cbz	r3, 80068cc <_dtoa_r+0x8cc>
 8006876:	4631      	mov	r1, r6
 8006878:	4658      	mov	r0, fp
 800687a:	f000 ff1b 	bl	80076b4 <__mcmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	da24      	bge.n	80068cc <_dtoa_r+0x8cc>
 8006882:	2300      	movs	r3, #0
 8006884:	4659      	mov	r1, fp
 8006886:	220a      	movs	r2, #10
 8006888:	4620      	mov	r0, r4
 800688a:	f000 fd0b 	bl	80072a4 <__multadd>
 800688e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006890:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006894:	4683      	mov	fp, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8144 	beq.w	8006b24 <_dtoa_r+0xb24>
 800689c:	2300      	movs	r3, #0
 800689e:	4639      	mov	r1, r7
 80068a0:	220a      	movs	r2, #10
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 fcfe 	bl	80072a4 <__multadd>
 80068a8:	9b04      	ldr	r3, [sp, #16]
 80068aa:	4607      	mov	r7, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dc4d      	bgt.n	800694c <_dtoa_r+0x94c>
 80068b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	dd4a      	ble.n	800694c <_dtoa_r+0x94c>
 80068b6:	e011      	b.n	80068dc <_dtoa_r+0x8dc>
 80068b8:	d0c9      	beq.n	800684e <_dtoa_r+0x84e>
 80068ba:	9a07      	ldr	r2, [sp, #28]
 80068bc:	331c      	adds	r3, #28
 80068be:	441a      	add	r2, r3
 80068c0:	4499      	add	r9, r3
 80068c2:	441d      	add	r5, r3
 80068c4:	4613      	mov	r3, r2
 80068c6:	e7c1      	b.n	800684c <_dtoa_r+0x84c>
 80068c8:	4603      	mov	r3, r0
 80068ca:	e7f6      	b.n	80068ba <_dtoa_r+0x8ba>
 80068cc:	f1b8 0f00 	cmp.w	r8, #0
 80068d0:	dc36      	bgt.n	8006940 <_dtoa_r+0x940>
 80068d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	dd33      	ble.n	8006940 <_dtoa_r+0x940>
 80068d8:	f8cd 8010 	str.w	r8, [sp, #16]
 80068dc:	9b04      	ldr	r3, [sp, #16]
 80068de:	b963      	cbnz	r3, 80068fa <_dtoa_r+0x8fa>
 80068e0:	4631      	mov	r1, r6
 80068e2:	2205      	movs	r2, #5
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 fcdd 	bl	80072a4 <__multadd>
 80068ea:	4601      	mov	r1, r0
 80068ec:	4606      	mov	r6, r0
 80068ee:	4658      	mov	r0, fp
 80068f0:	f000 fee0 	bl	80076b4 <__mcmp>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f73f add3 	bgt.w	80064a0 <_dtoa_r+0x4a0>
 80068fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068fc:	9d06      	ldr	r5, [sp, #24]
 80068fe:	ea6f 0a03 	mvn.w	sl, r3
 8006902:	f04f 0900 	mov.w	r9, #0
 8006906:	4631      	mov	r1, r6
 8006908:	4620      	mov	r0, r4
 800690a:	f000 fcb4 	bl	8007276 <_Bfree>
 800690e:	2f00      	cmp	r7, #0
 8006910:	f43f aebd 	beq.w	800668e <_dtoa_r+0x68e>
 8006914:	f1b9 0f00 	cmp.w	r9, #0
 8006918:	d005      	beq.n	8006926 <_dtoa_r+0x926>
 800691a:	45b9      	cmp	r9, r7
 800691c:	d003      	beq.n	8006926 <_dtoa_r+0x926>
 800691e:	4649      	mov	r1, r9
 8006920:	4620      	mov	r0, r4
 8006922:	f000 fca8 	bl	8007276 <_Bfree>
 8006926:	4639      	mov	r1, r7
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fca4 	bl	8007276 <_Bfree>
 800692e:	e6ae      	b.n	800668e <_dtoa_r+0x68e>
 8006930:	2600      	movs	r6, #0
 8006932:	4637      	mov	r7, r6
 8006934:	e7e1      	b.n	80068fa <_dtoa_r+0x8fa>
 8006936:	46ba      	mov	sl, r7
 8006938:	4637      	mov	r7, r6
 800693a:	e5b1      	b.n	80064a0 <_dtoa_r+0x4a0>
 800693c:	40240000 	.word	0x40240000
 8006940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006942:	f8cd 8010 	str.w	r8, [sp, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80f3 	beq.w	8006b32 <_dtoa_r+0xb32>
 800694c:	2d00      	cmp	r5, #0
 800694e:	dd05      	ble.n	800695c <_dtoa_r+0x95c>
 8006950:	4639      	mov	r1, r7
 8006952:	462a      	mov	r2, r5
 8006954:	4620      	mov	r0, r4
 8006956:	f000 fe59 	bl	800760c <__lshift>
 800695a:	4607      	mov	r7, r0
 800695c:	9b08      	ldr	r3, [sp, #32]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d04c      	beq.n	80069fc <_dtoa_r+0x9fc>
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	4620      	mov	r0, r4
 8006966:	f000 fc52 	bl	800720e <_Balloc>
 800696a:	4605      	mov	r5, r0
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	f107 010c 	add.w	r1, r7, #12
 8006972:	3202      	adds	r2, #2
 8006974:	0092      	lsls	r2, r2, #2
 8006976:	300c      	adds	r0, #12
 8006978:	f000 fc3c 	bl	80071f4 <memcpy>
 800697c:	2201      	movs	r2, #1
 800697e:	4629      	mov	r1, r5
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fe43 	bl	800760c <__lshift>
 8006986:	46b9      	mov	r9, r7
 8006988:	4607      	mov	r7, r0
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	9307      	str	r3, [sp, #28]
 800698e:	9b02      	ldr	r3, [sp, #8]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	9308      	str	r3, [sp, #32]
 8006996:	4631      	mov	r1, r6
 8006998:	4658      	mov	r0, fp
 800699a:	f7ff faa0 	bl	8005ede <quorem>
 800699e:	4649      	mov	r1, r9
 80069a0:	4605      	mov	r5, r0
 80069a2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069a6:	4658      	mov	r0, fp
 80069a8:	f000 fe84 	bl	80076b4 <__mcmp>
 80069ac:	463a      	mov	r2, r7
 80069ae:	9002      	str	r0, [sp, #8]
 80069b0:	4631      	mov	r1, r6
 80069b2:	4620      	mov	r0, r4
 80069b4:	f000 fe98 	bl	80076e8 <__mdiff>
 80069b8:	68c3      	ldr	r3, [r0, #12]
 80069ba:	4602      	mov	r2, r0
 80069bc:	bb03      	cbnz	r3, 8006a00 <_dtoa_r+0xa00>
 80069be:	4601      	mov	r1, r0
 80069c0:	9009      	str	r0, [sp, #36]	; 0x24
 80069c2:	4658      	mov	r0, fp
 80069c4:	f000 fe76 	bl	80076b4 <__mcmp>
 80069c8:	4603      	mov	r3, r0
 80069ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069cc:	4611      	mov	r1, r2
 80069ce:	4620      	mov	r0, r4
 80069d0:	9309      	str	r3, [sp, #36]	; 0x24
 80069d2:	f000 fc50 	bl	8007276 <_Bfree>
 80069d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d8:	b9a3      	cbnz	r3, 8006a04 <_dtoa_r+0xa04>
 80069da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80069dc:	b992      	cbnz	r2, 8006a04 <_dtoa_r+0xa04>
 80069de:	9a08      	ldr	r2, [sp, #32]
 80069e0:	b982      	cbnz	r2, 8006a04 <_dtoa_r+0xa04>
 80069e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069e6:	d029      	beq.n	8006a3c <_dtoa_r+0xa3c>
 80069e8:	9b02      	ldr	r3, [sp, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	dd01      	ble.n	80069f2 <_dtoa_r+0x9f2>
 80069ee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80069f2:	9b07      	ldr	r3, [sp, #28]
 80069f4:	1c5d      	adds	r5, r3, #1
 80069f6:	f883 8000 	strb.w	r8, [r3]
 80069fa:	e784      	b.n	8006906 <_dtoa_r+0x906>
 80069fc:	4638      	mov	r0, r7
 80069fe:	e7c2      	b.n	8006986 <_dtoa_r+0x986>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e7e3      	b.n	80069cc <_dtoa_r+0x9cc>
 8006a04:	9a02      	ldr	r2, [sp, #8]
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	db04      	blt.n	8006a14 <_dtoa_r+0xa14>
 8006a0a:	d123      	bne.n	8006a54 <_dtoa_r+0xa54>
 8006a0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a0e:	bb0a      	cbnz	r2, 8006a54 <_dtoa_r+0xa54>
 8006a10:	9a08      	ldr	r2, [sp, #32]
 8006a12:	b9fa      	cbnz	r2, 8006a54 <_dtoa_r+0xa54>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	ddec      	ble.n	80069f2 <_dtoa_r+0x9f2>
 8006a18:	4659      	mov	r1, fp
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 fdf5 	bl	800760c <__lshift>
 8006a22:	4631      	mov	r1, r6
 8006a24:	4683      	mov	fp, r0
 8006a26:	f000 fe45 	bl	80076b4 <__mcmp>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	dc03      	bgt.n	8006a36 <_dtoa_r+0xa36>
 8006a2e:	d1e0      	bne.n	80069f2 <_dtoa_r+0x9f2>
 8006a30:	f018 0f01 	tst.w	r8, #1
 8006a34:	d0dd      	beq.n	80069f2 <_dtoa_r+0x9f2>
 8006a36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a3a:	d1d8      	bne.n	80069ee <_dtoa_r+0x9ee>
 8006a3c:	9b07      	ldr	r3, [sp, #28]
 8006a3e:	9a07      	ldr	r2, [sp, #28]
 8006a40:	1c5d      	adds	r5, r3, #1
 8006a42:	2339      	movs	r3, #57	; 0x39
 8006a44:	7013      	strb	r3, [r2, #0]
 8006a46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a4a:	1e6a      	subs	r2, r5, #1
 8006a4c:	2b39      	cmp	r3, #57	; 0x39
 8006a4e:	d04d      	beq.n	8006aec <_dtoa_r+0xaec>
 8006a50:	3301      	adds	r3, #1
 8006a52:	e052      	b.n	8006afa <_dtoa_r+0xafa>
 8006a54:	9a07      	ldr	r2, [sp, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f102 0501 	add.w	r5, r2, #1
 8006a5c:	dd06      	ble.n	8006a6c <_dtoa_r+0xa6c>
 8006a5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a62:	d0eb      	beq.n	8006a3c <_dtoa_r+0xa3c>
 8006a64:	f108 0801 	add.w	r8, r8, #1
 8006a68:	9b07      	ldr	r3, [sp, #28]
 8006a6a:	e7c4      	b.n	80069f6 <_dtoa_r+0x9f6>
 8006a6c:	9b06      	ldr	r3, [sp, #24]
 8006a6e:	9a04      	ldr	r2, [sp, #16]
 8006a70:	1aeb      	subs	r3, r5, r3
 8006a72:	4293      	cmp	r3, r2
 8006a74:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006a78:	d021      	beq.n	8006abe <_dtoa_r+0xabe>
 8006a7a:	4659      	mov	r1, fp
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	220a      	movs	r2, #10
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fc0f 	bl	80072a4 <__multadd>
 8006a86:	45b9      	cmp	r9, r7
 8006a88:	4683      	mov	fp, r0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	f04f 020a 	mov.w	r2, #10
 8006a92:	4649      	mov	r1, r9
 8006a94:	4620      	mov	r0, r4
 8006a96:	d105      	bne.n	8006aa4 <_dtoa_r+0xaa4>
 8006a98:	f000 fc04 	bl	80072a4 <__multadd>
 8006a9c:	4681      	mov	r9, r0
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	9507      	str	r5, [sp, #28]
 8006aa2:	e778      	b.n	8006996 <_dtoa_r+0x996>
 8006aa4:	f000 fbfe 	bl	80072a4 <__multadd>
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	4681      	mov	r9, r0
 8006aac:	2300      	movs	r3, #0
 8006aae:	220a      	movs	r2, #10
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 fbf7 	bl	80072a4 <__multadd>
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	e7f2      	b.n	8006aa0 <_dtoa_r+0xaa0>
 8006aba:	f04f 0900 	mov.w	r9, #0
 8006abe:	4659      	mov	r1, fp
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 fda2 	bl	800760c <__lshift>
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4683      	mov	fp, r0
 8006acc:	f000 fdf2 	bl	80076b4 <__mcmp>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	dcb8      	bgt.n	8006a46 <_dtoa_r+0xa46>
 8006ad4:	d102      	bne.n	8006adc <_dtoa_r+0xadc>
 8006ad6:	f018 0f01 	tst.w	r8, #1
 8006ada:	d1b4      	bne.n	8006a46 <_dtoa_r+0xa46>
 8006adc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ae0:	1e6a      	subs	r2, r5, #1
 8006ae2:	2b30      	cmp	r3, #48	; 0x30
 8006ae4:	f47f af0f 	bne.w	8006906 <_dtoa_r+0x906>
 8006ae8:	4615      	mov	r5, r2
 8006aea:	e7f7      	b.n	8006adc <_dtoa_r+0xadc>
 8006aec:	9b06      	ldr	r3, [sp, #24]
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d105      	bne.n	8006afe <_dtoa_r+0xafe>
 8006af2:	2331      	movs	r3, #49	; 0x31
 8006af4:	9a06      	ldr	r2, [sp, #24]
 8006af6:	f10a 0a01 	add.w	sl, sl, #1
 8006afa:	7013      	strb	r3, [r2, #0]
 8006afc:	e703      	b.n	8006906 <_dtoa_r+0x906>
 8006afe:	4615      	mov	r5, r2
 8006b00:	e7a1      	b.n	8006a46 <_dtoa_r+0xa46>
 8006b02:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <_dtoa_r+0xb60>)
 8006b04:	f7ff bae1 	b.w	80060ca <_dtoa_r+0xca>
 8006b08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f47f aabb 	bne.w	8006086 <_dtoa_r+0x86>
 8006b10:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <_dtoa_r+0xb64>)
 8006b12:	f7ff bada 	b.w	80060ca <_dtoa_r+0xca>
 8006b16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f77f ae3f 	ble.w	800679c <_dtoa_r+0x79c>
 8006b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b20:	9308      	str	r3, [sp, #32]
 8006b22:	e653      	b.n	80067cc <_dtoa_r+0x7cc>
 8006b24:	9b04      	ldr	r3, [sp, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	dc03      	bgt.n	8006b32 <_dtoa_r+0xb32>
 8006b2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	f73f aed5 	bgt.w	80068dc <_dtoa_r+0x8dc>
 8006b32:	9d06      	ldr	r5, [sp, #24]
 8006b34:	4631      	mov	r1, r6
 8006b36:	4658      	mov	r0, fp
 8006b38:	f7ff f9d1 	bl	8005ede <quorem>
 8006b3c:	9b06      	ldr	r3, [sp, #24]
 8006b3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b42:	f805 8b01 	strb.w	r8, [r5], #1
 8006b46:	9a04      	ldr	r2, [sp, #16]
 8006b48:	1aeb      	subs	r3, r5, r3
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	ddb5      	ble.n	8006aba <_dtoa_r+0xaba>
 8006b4e:	4659      	mov	r1, fp
 8006b50:	2300      	movs	r3, #0
 8006b52:	220a      	movs	r2, #10
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 fba5 	bl	80072a4 <__multadd>
 8006b5a:	4683      	mov	fp, r0
 8006b5c:	e7ea      	b.n	8006b34 <_dtoa_r+0xb34>
 8006b5e:	bf00      	nop
 8006b60:	08007e16 	.word	0x08007e16
 8006b64:	08007fb6 	.word	0x08007fb6

08006b68 <rshift>:
 8006b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b6a:	6906      	ldr	r6, [r0, #16]
 8006b6c:	114b      	asrs	r3, r1, #5
 8006b6e:	429e      	cmp	r6, r3
 8006b70:	f100 0414 	add.w	r4, r0, #20
 8006b74:	dd31      	ble.n	8006bda <rshift+0x72>
 8006b76:	f011 011f 	ands.w	r1, r1, #31
 8006b7a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006b7e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006b82:	d108      	bne.n	8006b96 <rshift+0x2e>
 8006b84:	4621      	mov	r1, r4
 8006b86:	42b2      	cmp	r2, r6
 8006b88:	460b      	mov	r3, r1
 8006b8a:	d211      	bcs.n	8006bb0 <rshift+0x48>
 8006b8c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006b90:	f841 3b04 	str.w	r3, [r1], #4
 8006b94:	e7f7      	b.n	8006b86 <rshift+0x1e>
 8006b96:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	f1c1 0c20 	rsb	ip, r1, #32
 8006ba0:	40cd      	lsrs	r5, r1
 8006ba2:	3204      	adds	r2, #4
 8006ba4:	42b2      	cmp	r2, r6
 8006ba6:	4617      	mov	r7, r2
 8006ba8:	d30d      	bcc.n	8006bc6 <rshift+0x5e>
 8006baa:	601d      	str	r5, [r3, #0]
 8006bac:	b105      	cbz	r5, 8006bb0 <rshift+0x48>
 8006bae:	3304      	adds	r3, #4
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	eba3 0204 	sub.w	r2, r3, r4
 8006bb6:	bf08      	it	eq
 8006bb8:	2300      	moveq	r3, #0
 8006bba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006bbe:	6102      	str	r2, [r0, #16]
 8006bc0:	bf08      	it	eq
 8006bc2:	6143      	streq	r3, [r0, #20]
 8006bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bc6:	683f      	ldr	r7, [r7, #0]
 8006bc8:	fa07 f70c 	lsl.w	r7, r7, ip
 8006bcc:	433d      	orrs	r5, r7
 8006bce:	f843 5b04 	str.w	r5, [r3], #4
 8006bd2:	f852 5b04 	ldr.w	r5, [r2], #4
 8006bd6:	40cd      	lsrs	r5, r1
 8006bd8:	e7e4      	b.n	8006ba4 <rshift+0x3c>
 8006bda:	4623      	mov	r3, r4
 8006bdc:	e7e8      	b.n	8006bb0 <rshift+0x48>

08006bde <__hexdig_fun>:
 8006bde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006be2:	2b09      	cmp	r3, #9
 8006be4:	d802      	bhi.n	8006bec <__hexdig_fun+0xe>
 8006be6:	3820      	subs	r0, #32
 8006be8:	b2c0      	uxtb	r0, r0
 8006bea:	4770      	bx	lr
 8006bec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006bf0:	2b05      	cmp	r3, #5
 8006bf2:	d801      	bhi.n	8006bf8 <__hexdig_fun+0x1a>
 8006bf4:	3847      	subs	r0, #71	; 0x47
 8006bf6:	e7f7      	b.n	8006be8 <__hexdig_fun+0xa>
 8006bf8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	d801      	bhi.n	8006c04 <__hexdig_fun+0x26>
 8006c00:	3827      	subs	r0, #39	; 0x27
 8006c02:	e7f1      	b.n	8006be8 <__hexdig_fun+0xa>
 8006c04:	2000      	movs	r0, #0
 8006c06:	4770      	bx	lr

08006c08 <__gethex>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	b08b      	sub	sp, #44	; 0x2c
 8006c0e:	9002      	str	r0, [sp, #8]
 8006c10:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006c12:	468a      	mov	sl, r1
 8006c14:	4690      	mov	r8, r2
 8006c16:	9306      	str	r3, [sp, #24]
 8006c18:	f000 face 	bl	80071b8 <__localeconv_l>
 8006c1c:	6803      	ldr	r3, [r0, #0]
 8006c1e:	f04f 0b00 	mov.w	fp, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	9303      	str	r3, [sp, #12]
 8006c26:	f7f9 fa93 	bl	8000150 <strlen>
 8006c2a:	9b03      	ldr	r3, [sp, #12]
 8006c2c:	9001      	str	r0, [sp, #4]
 8006c2e:	4403      	add	r3, r0
 8006c30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006c34:	9307      	str	r3, [sp, #28]
 8006c36:	f8da 3000 	ldr.w	r3, [sl]
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	461f      	mov	r7, r3
 8006c3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c42:	2830      	cmp	r0, #48	; 0x30
 8006c44:	d06c      	beq.n	8006d20 <__gethex+0x118>
 8006c46:	f7ff ffca 	bl	8006bde <__hexdig_fun>
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d16a      	bne.n	8006d26 <__gethex+0x11e>
 8006c50:	9a01      	ldr	r2, [sp, #4]
 8006c52:	9903      	ldr	r1, [sp, #12]
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7fe f9f0 	bl	800503a <strncmp>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d166      	bne.n	8006d2c <__gethex+0x124>
 8006c5e:	9b01      	ldr	r3, [sp, #4]
 8006c60:	5cf8      	ldrb	r0, [r7, r3]
 8006c62:	18fe      	adds	r6, r7, r3
 8006c64:	f7ff ffbb 	bl	8006bde <__hexdig_fun>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d062      	beq.n	8006d32 <__gethex+0x12a>
 8006c6c:	4633      	mov	r3, r6
 8006c6e:	7818      	ldrb	r0, [r3, #0]
 8006c70:	461f      	mov	r7, r3
 8006c72:	2830      	cmp	r0, #48	; 0x30
 8006c74:	f103 0301 	add.w	r3, r3, #1
 8006c78:	d0f9      	beq.n	8006c6e <__gethex+0x66>
 8006c7a:	f7ff ffb0 	bl	8006bde <__hexdig_fun>
 8006c7e:	fab0 f580 	clz	r5, r0
 8006c82:	4634      	mov	r4, r6
 8006c84:	f04f 0b01 	mov.w	fp, #1
 8006c88:	096d      	lsrs	r5, r5, #5
 8006c8a:	463a      	mov	r2, r7
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	7830      	ldrb	r0, [r6, #0]
 8006c90:	3201      	adds	r2, #1
 8006c92:	f7ff ffa4 	bl	8006bde <__hexdig_fun>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d1f8      	bne.n	8006c8c <__gethex+0x84>
 8006c9a:	9a01      	ldr	r2, [sp, #4]
 8006c9c:	9903      	ldr	r1, [sp, #12]
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	f7fe f9cb 	bl	800503a <strncmp>
 8006ca4:	b950      	cbnz	r0, 8006cbc <__gethex+0xb4>
 8006ca6:	b954      	cbnz	r4, 8006cbe <__gethex+0xb6>
 8006ca8:	9b01      	ldr	r3, [sp, #4]
 8006caa:	18f4      	adds	r4, r6, r3
 8006cac:	4622      	mov	r2, r4
 8006cae:	4616      	mov	r6, r2
 8006cb0:	7830      	ldrb	r0, [r6, #0]
 8006cb2:	3201      	adds	r2, #1
 8006cb4:	f7ff ff93 	bl	8006bde <__hexdig_fun>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d1f8      	bne.n	8006cae <__gethex+0xa6>
 8006cbc:	b10c      	cbz	r4, 8006cc2 <__gethex+0xba>
 8006cbe:	1ba4      	subs	r4, r4, r6
 8006cc0:	00a4      	lsls	r4, r4, #2
 8006cc2:	7833      	ldrb	r3, [r6, #0]
 8006cc4:	2b50      	cmp	r3, #80	; 0x50
 8006cc6:	d001      	beq.n	8006ccc <__gethex+0xc4>
 8006cc8:	2b70      	cmp	r3, #112	; 0x70
 8006cca:	d140      	bne.n	8006d4e <__gethex+0x146>
 8006ccc:	7873      	ldrb	r3, [r6, #1]
 8006cce:	2b2b      	cmp	r3, #43	; 0x2b
 8006cd0:	d031      	beq.n	8006d36 <__gethex+0x12e>
 8006cd2:	2b2d      	cmp	r3, #45	; 0x2d
 8006cd4:	d033      	beq.n	8006d3e <__gethex+0x136>
 8006cd6:	f04f 0900 	mov.w	r9, #0
 8006cda:	1c71      	adds	r1, r6, #1
 8006cdc:	7808      	ldrb	r0, [r1, #0]
 8006cde:	f7ff ff7e 	bl	8006bde <__hexdig_fun>
 8006ce2:	1e43      	subs	r3, r0, #1
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b18      	cmp	r3, #24
 8006ce8:	d831      	bhi.n	8006d4e <__gethex+0x146>
 8006cea:	f1a0 0210 	sub.w	r2, r0, #16
 8006cee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006cf2:	f7ff ff74 	bl	8006bde <__hexdig_fun>
 8006cf6:	1e43      	subs	r3, r0, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b18      	cmp	r3, #24
 8006cfc:	d922      	bls.n	8006d44 <__gethex+0x13c>
 8006cfe:	f1b9 0f00 	cmp.w	r9, #0
 8006d02:	d000      	beq.n	8006d06 <__gethex+0xfe>
 8006d04:	4252      	negs	r2, r2
 8006d06:	4414      	add	r4, r2
 8006d08:	f8ca 1000 	str.w	r1, [sl]
 8006d0c:	b30d      	cbz	r5, 8006d52 <__gethex+0x14a>
 8006d0e:	f1bb 0f00 	cmp.w	fp, #0
 8006d12:	bf0c      	ite	eq
 8006d14:	2706      	moveq	r7, #6
 8006d16:	2700      	movne	r7, #0
 8006d18:	4638      	mov	r0, r7
 8006d1a:	b00b      	add	sp, #44	; 0x2c
 8006d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d20:	f10b 0b01 	add.w	fp, fp, #1
 8006d24:	e78a      	b.n	8006c3c <__gethex+0x34>
 8006d26:	2500      	movs	r5, #0
 8006d28:	462c      	mov	r4, r5
 8006d2a:	e7ae      	b.n	8006c8a <__gethex+0x82>
 8006d2c:	463e      	mov	r6, r7
 8006d2e:	2501      	movs	r5, #1
 8006d30:	e7c7      	b.n	8006cc2 <__gethex+0xba>
 8006d32:	4604      	mov	r4, r0
 8006d34:	e7fb      	b.n	8006d2e <__gethex+0x126>
 8006d36:	f04f 0900 	mov.w	r9, #0
 8006d3a:	1cb1      	adds	r1, r6, #2
 8006d3c:	e7ce      	b.n	8006cdc <__gethex+0xd4>
 8006d3e:	f04f 0901 	mov.w	r9, #1
 8006d42:	e7fa      	b.n	8006d3a <__gethex+0x132>
 8006d44:	230a      	movs	r3, #10
 8006d46:	fb03 0202 	mla	r2, r3, r2, r0
 8006d4a:	3a10      	subs	r2, #16
 8006d4c:	e7cf      	b.n	8006cee <__gethex+0xe6>
 8006d4e:	4631      	mov	r1, r6
 8006d50:	e7da      	b.n	8006d08 <__gethex+0x100>
 8006d52:	4629      	mov	r1, r5
 8006d54:	1bf3      	subs	r3, r6, r7
 8006d56:	3b01      	subs	r3, #1
 8006d58:	2b07      	cmp	r3, #7
 8006d5a:	dc49      	bgt.n	8006df0 <__gethex+0x1e8>
 8006d5c:	9802      	ldr	r0, [sp, #8]
 8006d5e:	f000 fa56 	bl	800720e <_Balloc>
 8006d62:	f04f 0b00 	mov.w	fp, #0
 8006d66:	4605      	mov	r5, r0
 8006d68:	46da      	mov	sl, fp
 8006d6a:	9b01      	ldr	r3, [sp, #4]
 8006d6c:	f100 0914 	add.w	r9, r0, #20
 8006d70:	f1c3 0301 	rsb	r3, r3, #1
 8006d74:	f8cd 9010 	str.w	r9, [sp, #16]
 8006d78:	9308      	str	r3, [sp, #32]
 8006d7a:	42b7      	cmp	r7, r6
 8006d7c:	d33b      	bcc.n	8006df6 <__gethex+0x1ee>
 8006d7e:	9804      	ldr	r0, [sp, #16]
 8006d80:	f840 ab04 	str.w	sl, [r0], #4
 8006d84:	eba0 0009 	sub.w	r0, r0, r9
 8006d88:	1080      	asrs	r0, r0, #2
 8006d8a:	6128      	str	r0, [r5, #16]
 8006d8c:	0147      	lsls	r7, r0, #5
 8006d8e:	4650      	mov	r0, sl
 8006d90:	f000 fb01 	bl	8007396 <__hi0bits>
 8006d94:	f8d8 6000 	ldr.w	r6, [r8]
 8006d98:	1a3f      	subs	r7, r7, r0
 8006d9a:	42b7      	cmp	r7, r6
 8006d9c:	dd64      	ble.n	8006e68 <__gethex+0x260>
 8006d9e:	1bbf      	subs	r7, r7, r6
 8006da0:	4639      	mov	r1, r7
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 fe0b 	bl	80079be <__any_on>
 8006da8:	4682      	mov	sl, r0
 8006daa:	b178      	cbz	r0, 8006dcc <__gethex+0x1c4>
 8006dac:	f04f 0a01 	mov.w	sl, #1
 8006db0:	1e7b      	subs	r3, r7, #1
 8006db2:	1159      	asrs	r1, r3, #5
 8006db4:	f003 021f 	and.w	r2, r3, #31
 8006db8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006dbc:	fa0a f202 	lsl.w	r2, sl, r2
 8006dc0:	420a      	tst	r2, r1
 8006dc2:	d003      	beq.n	8006dcc <__gethex+0x1c4>
 8006dc4:	4553      	cmp	r3, sl
 8006dc6:	dc46      	bgt.n	8006e56 <__gethex+0x24e>
 8006dc8:	f04f 0a02 	mov.w	sl, #2
 8006dcc:	4639      	mov	r1, r7
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f7ff feca 	bl	8006b68 <rshift>
 8006dd4:	443c      	add	r4, r7
 8006dd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dda:	42a3      	cmp	r3, r4
 8006ddc:	da52      	bge.n	8006e84 <__gethex+0x27c>
 8006dde:	4629      	mov	r1, r5
 8006de0:	9802      	ldr	r0, [sp, #8]
 8006de2:	f000 fa48 	bl	8007276 <_Bfree>
 8006de6:	2300      	movs	r3, #0
 8006de8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006dea:	27a3      	movs	r7, #163	; 0xa3
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	e793      	b.n	8006d18 <__gethex+0x110>
 8006df0:	3101      	adds	r1, #1
 8006df2:	105b      	asrs	r3, r3, #1
 8006df4:	e7b0      	b.n	8006d58 <__gethex+0x150>
 8006df6:	1e73      	subs	r3, r6, #1
 8006df8:	9305      	str	r3, [sp, #20]
 8006dfa:	9a07      	ldr	r2, [sp, #28]
 8006dfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <__gethex+0x22e>
 8006e04:	f1bb 0f20 	cmp.w	fp, #32
 8006e08:	d107      	bne.n	8006e1a <__gethex+0x212>
 8006e0a:	9b04      	ldr	r3, [sp, #16]
 8006e0c:	f8c3 a000 	str.w	sl, [r3]
 8006e10:	f04f 0a00 	mov.w	sl, #0
 8006e14:	46d3      	mov	fp, sl
 8006e16:	3304      	adds	r3, #4
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e1e:	f7ff fede 	bl	8006bde <__hexdig_fun>
 8006e22:	f000 000f 	and.w	r0, r0, #15
 8006e26:	fa00 f00b 	lsl.w	r0, r0, fp
 8006e2a:	ea4a 0a00 	orr.w	sl, sl, r0
 8006e2e:	f10b 0b04 	add.w	fp, fp, #4
 8006e32:	9b05      	ldr	r3, [sp, #20]
 8006e34:	e00d      	b.n	8006e52 <__gethex+0x24a>
 8006e36:	9b05      	ldr	r3, [sp, #20]
 8006e38:	9a08      	ldr	r2, [sp, #32]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	42bb      	cmp	r3, r7
 8006e3e:	d3e1      	bcc.n	8006e04 <__gethex+0x1fc>
 8006e40:	4618      	mov	r0, r3
 8006e42:	9a01      	ldr	r2, [sp, #4]
 8006e44:	9903      	ldr	r1, [sp, #12]
 8006e46:	9309      	str	r3, [sp, #36]	; 0x24
 8006e48:	f7fe f8f7 	bl	800503a <strncmp>
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d1d8      	bne.n	8006e04 <__gethex+0x1fc>
 8006e52:	461e      	mov	r6, r3
 8006e54:	e791      	b.n	8006d7a <__gethex+0x172>
 8006e56:	1eb9      	subs	r1, r7, #2
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 fdb0 	bl	80079be <__any_on>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d0b2      	beq.n	8006dc8 <__gethex+0x1c0>
 8006e62:	f04f 0a03 	mov.w	sl, #3
 8006e66:	e7b1      	b.n	8006dcc <__gethex+0x1c4>
 8006e68:	da09      	bge.n	8006e7e <__gethex+0x276>
 8006e6a:	1bf7      	subs	r7, r6, r7
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	463a      	mov	r2, r7
 8006e70:	9802      	ldr	r0, [sp, #8]
 8006e72:	f000 fbcb 	bl	800760c <__lshift>
 8006e76:	4605      	mov	r5, r0
 8006e78:	1be4      	subs	r4, r4, r7
 8006e7a:	f100 0914 	add.w	r9, r0, #20
 8006e7e:	f04f 0a00 	mov.w	sl, #0
 8006e82:	e7a8      	b.n	8006dd6 <__gethex+0x1ce>
 8006e84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006e88:	42a0      	cmp	r0, r4
 8006e8a:	dd6b      	ble.n	8006f64 <__gethex+0x35c>
 8006e8c:	1b04      	subs	r4, r0, r4
 8006e8e:	42a6      	cmp	r6, r4
 8006e90:	dc2e      	bgt.n	8006ef0 <__gethex+0x2e8>
 8006e92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d022      	beq.n	8006ee0 <__gethex+0x2d8>
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d024      	beq.n	8006ee8 <__gethex+0x2e0>
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d115      	bne.n	8006ece <__gethex+0x2c6>
 8006ea2:	42a6      	cmp	r6, r4
 8006ea4:	d113      	bne.n	8006ece <__gethex+0x2c6>
 8006ea6:	2e01      	cmp	r6, #1
 8006ea8:	dc0b      	bgt.n	8006ec2 <__gethex+0x2ba>
 8006eaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006eae:	9a06      	ldr	r2, [sp, #24]
 8006eb0:	2762      	movs	r7, #98	; 0x62
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	612b      	str	r3, [r5, #16]
 8006eb8:	f8c9 3000 	str.w	r3, [r9]
 8006ebc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ebe:	601d      	str	r5, [r3, #0]
 8006ec0:	e72a      	b.n	8006d18 <__gethex+0x110>
 8006ec2:	1e71      	subs	r1, r6, #1
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f000 fd7a 	bl	80079be <__any_on>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d1ed      	bne.n	8006eaa <__gethex+0x2a2>
 8006ece:	4629      	mov	r1, r5
 8006ed0:	9802      	ldr	r0, [sp, #8]
 8006ed2:	f000 f9d0 	bl	8007276 <_Bfree>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006eda:	2750      	movs	r7, #80	; 0x50
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	e71b      	b.n	8006d18 <__gethex+0x110>
 8006ee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0e1      	beq.n	8006eaa <__gethex+0x2a2>
 8006ee6:	e7f2      	b.n	8006ece <__gethex+0x2c6>
 8006ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1dd      	bne.n	8006eaa <__gethex+0x2a2>
 8006eee:	e7ee      	b.n	8006ece <__gethex+0x2c6>
 8006ef0:	1e67      	subs	r7, r4, #1
 8006ef2:	f1ba 0f00 	cmp.w	sl, #0
 8006ef6:	d132      	bne.n	8006f5e <__gethex+0x356>
 8006ef8:	b127      	cbz	r7, 8006f04 <__gethex+0x2fc>
 8006efa:	4639      	mov	r1, r7
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 fd5e 	bl	80079be <__any_on>
 8006f02:	4682      	mov	sl, r0
 8006f04:	2301      	movs	r3, #1
 8006f06:	117a      	asrs	r2, r7, #5
 8006f08:	f007 071f 	and.w	r7, r7, #31
 8006f0c:	fa03 f707 	lsl.w	r7, r3, r7
 8006f10:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006f14:	4621      	mov	r1, r4
 8006f16:	421f      	tst	r7, r3
 8006f18:	f04f 0702 	mov.w	r7, #2
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	bf18      	it	ne
 8006f20:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f24:	1b36      	subs	r6, r6, r4
 8006f26:	f7ff fe1f 	bl	8006b68 <rshift>
 8006f2a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006f2e:	f1ba 0f00 	cmp.w	sl, #0
 8006f32:	d048      	beq.n	8006fc6 <__gethex+0x3be>
 8006f34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d015      	beq.n	8006f68 <__gethex+0x360>
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d017      	beq.n	8006f70 <__gethex+0x368>
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d109      	bne.n	8006f58 <__gethex+0x350>
 8006f44:	f01a 0f02 	tst.w	sl, #2
 8006f48:	d006      	beq.n	8006f58 <__gethex+0x350>
 8006f4a:	f8d9 3000 	ldr.w	r3, [r9]
 8006f4e:	ea4a 0a03 	orr.w	sl, sl, r3
 8006f52:	f01a 0f01 	tst.w	sl, #1
 8006f56:	d10e      	bne.n	8006f76 <__gethex+0x36e>
 8006f58:	f047 0710 	orr.w	r7, r7, #16
 8006f5c:	e033      	b.n	8006fc6 <__gethex+0x3be>
 8006f5e:	f04f 0a01 	mov.w	sl, #1
 8006f62:	e7cf      	b.n	8006f04 <__gethex+0x2fc>
 8006f64:	2701      	movs	r7, #1
 8006f66:	e7e2      	b.n	8006f2e <__gethex+0x326>
 8006f68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f6a:	f1c3 0301 	rsb	r3, r3, #1
 8006f6e:	9315      	str	r3, [sp, #84]	; 0x54
 8006f70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0f0      	beq.n	8006f58 <__gethex+0x350>
 8006f76:	f04f 0c00 	mov.w	ip, #0
 8006f7a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006f7e:	f105 0314 	add.w	r3, r5, #20
 8006f82:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006f86:	eb03 010a 	add.w	r1, r3, sl
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f90:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f94:	d01c      	beq.n	8006fd0 <__gethex+0x3c8>
 8006f96:	3201      	adds	r2, #1
 8006f98:	6002      	str	r2, [r0, #0]
 8006f9a:	2f02      	cmp	r7, #2
 8006f9c:	f105 0314 	add.w	r3, r5, #20
 8006fa0:	d138      	bne.n	8007014 <__gethex+0x40c>
 8006fa2:	f8d8 2000 	ldr.w	r2, [r8]
 8006fa6:	3a01      	subs	r2, #1
 8006fa8:	42b2      	cmp	r2, r6
 8006faa:	d10a      	bne.n	8006fc2 <__gethex+0x3ba>
 8006fac:	2201      	movs	r2, #1
 8006fae:	1171      	asrs	r1, r6, #5
 8006fb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fb4:	f006 061f 	and.w	r6, r6, #31
 8006fb8:	fa02 f606 	lsl.w	r6, r2, r6
 8006fbc:	421e      	tst	r6, r3
 8006fbe:	bf18      	it	ne
 8006fc0:	4617      	movne	r7, r2
 8006fc2:	f047 0720 	orr.w	r7, r7, #32
 8006fc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fc8:	601d      	str	r5, [r3, #0]
 8006fca:	9b06      	ldr	r3, [sp, #24]
 8006fcc:	601c      	str	r4, [r3, #0]
 8006fce:	e6a3      	b.n	8006d18 <__gethex+0x110>
 8006fd0:	4299      	cmp	r1, r3
 8006fd2:	f843 cc04 	str.w	ip, [r3, #-4]
 8006fd6:	d8d8      	bhi.n	8006f8a <__gethex+0x382>
 8006fd8:	68ab      	ldr	r3, [r5, #8]
 8006fda:	4599      	cmp	r9, r3
 8006fdc:	db12      	blt.n	8007004 <__gethex+0x3fc>
 8006fde:	6869      	ldr	r1, [r5, #4]
 8006fe0:	9802      	ldr	r0, [sp, #8]
 8006fe2:	3101      	adds	r1, #1
 8006fe4:	f000 f913 	bl	800720e <_Balloc>
 8006fe8:	4683      	mov	fp, r0
 8006fea:	692a      	ldr	r2, [r5, #16]
 8006fec:	f105 010c 	add.w	r1, r5, #12
 8006ff0:	3202      	adds	r2, #2
 8006ff2:	0092      	lsls	r2, r2, #2
 8006ff4:	300c      	adds	r0, #12
 8006ff6:	f000 f8fd 	bl	80071f4 <memcpy>
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	9802      	ldr	r0, [sp, #8]
 8006ffe:	f000 f93a 	bl	8007276 <_Bfree>
 8007002:	465d      	mov	r5, fp
 8007004:	692b      	ldr	r3, [r5, #16]
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	612a      	str	r2, [r5, #16]
 800700a:	2201      	movs	r2, #1
 800700c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007010:	615a      	str	r2, [r3, #20]
 8007012:	e7c2      	b.n	8006f9a <__gethex+0x392>
 8007014:	692a      	ldr	r2, [r5, #16]
 8007016:	454a      	cmp	r2, r9
 8007018:	dd0b      	ble.n	8007032 <__gethex+0x42a>
 800701a:	2101      	movs	r1, #1
 800701c:	4628      	mov	r0, r5
 800701e:	f7ff fda3 	bl	8006b68 <rshift>
 8007022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007026:	3401      	adds	r4, #1
 8007028:	42a3      	cmp	r3, r4
 800702a:	f6ff aed8 	blt.w	8006dde <__gethex+0x1d6>
 800702e:	2701      	movs	r7, #1
 8007030:	e7c7      	b.n	8006fc2 <__gethex+0x3ba>
 8007032:	f016 061f 	ands.w	r6, r6, #31
 8007036:	d0fa      	beq.n	800702e <__gethex+0x426>
 8007038:	449a      	add	sl, r3
 800703a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800703e:	f000 f9aa 	bl	8007396 <__hi0bits>
 8007042:	f1c6 0620 	rsb	r6, r6, #32
 8007046:	42b0      	cmp	r0, r6
 8007048:	dbe7      	blt.n	800701a <__gethex+0x412>
 800704a:	e7f0      	b.n	800702e <__gethex+0x426>

0800704c <L_shift>:
 800704c:	f1c2 0208 	rsb	r2, r2, #8
 8007050:	0092      	lsls	r2, r2, #2
 8007052:	b570      	push	{r4, r5, r6, lr}
 8007054:	f1c2 0620 	rsb	r6, r2, #32
 8007058:	6843      	ldr	r3, [r0, #4]
 800705a:	6804      	ldr	r4, [r0, #0]
 800705c:	fa03 f506 	lsl.w	r5, r3, r6
 8007060:	432c      	orrs	r4, r5
 8007062:	40d3      	lsrs	r3, r2
 8007064:	6004      	str	r4, [r0, #0]
 8007066:	f840 3f04 	str.w	r3, [r0, #4]!
 800706a:	4288      	cmp	r0, r1
 800706c:	d3f4      	bcc.n	8007058 <L_shift+0xc>
 800706e:	bd70      	pop	{r4, r5, r6, pc}

08007070 <__match>:
 8007070:	b530      	push	{r4, r5, lr}
 8007072:	6803      	ldr	r3, [r0, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800707a:	b914      	cbnz	r4, 8007082 <__match+0x12>
 800707c:	6003      	str	r3, [r0, #0]
 800707e:	2001      	movs	r0, #1
 8007080:	bd30      	pop	{r4, r5, pc}
 8007082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007086:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800708a:	2d19      	cmp	r5, #25
 800708c:	bf98      	it	ls
 800708e:	3220      	addls	r2, #32
 8007090:	42a2      	cmp	r2, r4
 8007092:	d0f0      	beq.n	8007076 <__match+0x6>
 8007094:	2000      	movs	r0, #0
 8007096:	e7f3      	b.n	8007080 <__match+0x10>

08007098 <__hexnan>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	2500      	movs	r5, #0
 800709e:	680b      	ldr	r3, [r1, #0]
 80070a0:	4682      	mov	sl, r0
 80070a2:	115f      	asrs	r7, r3, #5
 80070a4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80070a8:	f013 031f 	ands.w	r3, r3, #31
 80070ac:	bf18      	it	ne
 80070ae:	3704      	addne	r7, #4
 80070b0:	1f3e      	subs	r6, r7, #4
 80070b2:	4690      	mov	r8, r2
 80070b4:	46b1      	mov	r9, r6
 80070b6:	4634      	mov	r4, r6
 80070b8:	46ab      	mov	fp, r5
 80070ba:	b087      	sub	sp, #28
 80070bc:	6801      	ldr	r1, [r0, #0]
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	f847 5c04 	str.w	r5, [r7, #-4]
 80070c4:	9502      	str	r5, [sp, #8]
 80070c6:	784a      	ldrb	r2, [r1, #1]
 80070c8:	1c4b      	adds	r3, r1, #1
 80070ca:	9303      	str	r3, [sp, #12]
 80070cc:	b342      	cbz	r2, 8007120 <__hexnan+0x88>
 80070ce:	4610      	mov	r0, r2
 80070d0:	9105      	str	r1, [sp, #20]
 80070d2:	9204      	str	r2, [sp, #16]
 80070d4:	f7ff fd83 	bl	8006bde <__hexdig_fun>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d143      	bne.n	8007164 <__hexnan+0xcc>
 80070dc:	9a04      	ldr	r2, [sp, #16]
 80070de:	9905      	ldr	r1, [sp, #20]
 80070e0:	2a20      	cmp	r2, #32
 80070e2:	d818      	bhi.n	8007116 <__hexnan+0x7e>
 80070e4:	9b02      	ldr	r3, [sp, #8]
 80070e6:	459b      	cmp	fp, r3
 80070e8:	dd13      	ble.n	8007112 <__hexnan+0x7a>
 80070ea:	454c      	cmp	r4, r9
 80070ec:	d206      	bcs.n	80070fc <__hexnan+0x64>
 80070ee:	2d07      	cmp	r5, #7
 80070f0:	dc04      	bgt.n	80070fc <__hexnan+0x64>
 80070f2:	462a      	mov	r2, r5
 80070f4:	4649      	mov	r1, r9
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff ffa8 	bl	800704c <L_shift>
 80070fc:	4544      	cmp	r4, r8
 80070fe:	d944      	bls.n	800718a <__hexnan+0xf2>
 8007100:	2300      	movs	r3, #0
 8007102:	f1a4 0904 	sub.w	r9, r4, #4
 8007106:	f844 3c04 	str.w	r3, [r4, #-4]
 800710a:	461d      	mov	r5, r3
 800710c:	464c      	mov	r4, r9
 800710e:	f8cd b008 	str.w	fp, [sp, #8]
 8007112:	9903      	ldr	r1, [sp, #12]
 8007114:	e7d7      	b.n	80070c6 <__hexnan+0x2e>
 8007116:	2a29      	cmp	r2, #41	; 0x29
 8007118:	d14a      	bne.n	80071b0 <__hexnan+0x118>
 800711a:	3102      	adds	r1, #2
 800711c:	f8ca 1000 	str.w	r1, [sl]
 8007120:	f1bb 0f00 	cmp.w	fp, #0
 8007124:	d044      	beq.n	80071b0 <__hexnan+0x118>
 8007126:	454c      	cmp	r4, r9
 8007128:	d206      	bcs.n	8007138 <__hexnan+0xa0>
 800712a:	2d07      	cmp	r5, #7
 800712c:	dc04      	bgt.n	8007138 <__hexnan+0xa0>
 800712e:	462a      	mov	r2, r5
 8007130:	4649      	mov	r1, r9
 8007132:	4620      	mov	r0, r4
 8007134:	f7ff ff8a 	bl	800704c <L_shift>
 8007138:	4544      	cmp	r4, r8
 800713a:	d928      	bls.n	800718e <__hexnan+0xf6>
 800713c:	4643      	mov	r3, r8
 800713e:	f854 2b04 	ldr.w	r2, [r4], #4
 8007142:	42a6      	cmp	r6, r4
 8007144:	f843 2b04 	str.w	r2, [r3], #4
 8007148:	d2f9      	bcs.n	800713e <__hexnan+0xa6>
 800714a:	2200      	movs	r2, #0
 800714c:	f843 2b04 	str.w	r2, [r3], #4
 8007150:	429e      	cmp	r6, r3
 8007152:	d2fb      	bcs.n	800714c <__hexnan+0xb4>
 8007154:	6833      	ldr	r3, [r6, #0]
 8007156:	b91b      	cbnz	r3, 8007160 <__hexnan+0xc8>
 8007158:	4546      	cmp	r6, r8
 800715a:	d127      	bne.n	80071ac <__hexnan+0x114>
 800715c:	2301      	movs	r3, #1
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	2005      	movs	r0, #5
 8007162:	e026      	b.n	80071b2 <__hexnan+0x11a>
 8007164:	3501      	adds	r5, #1
 8007166:	2d08      	cmp	r5, #8
 8007168:	f10b 0b01 	add.w	fp, fp, #1
 800716c:	dd06      	ble.n	800717c <__hexnan+0xe4>
 800716e:	4544      	cmp	r4, r8
 8007170:	d9cf      	bls.n	8007112 <__hexnan+0x7a>
 8007172:	2300      	movs	r3, #0
 8007174:	2501      	movs	r5, #1
 8007176:	f844 3c04 	str.w	r3, [r4, #-4]
 800717a:	3c04      	subs	r4, #4
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	f000 000f 	and.w	r0, r0, #15
 8007182:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007186:	6020      	str	r0, [r4, #0]
 8007188:	e7c3      	b.n	8007112 <__hexnan+0x7a>
 800718a:	2508      	movs	r5, #8
 800718c:	e7c1      	b.n	8007112 <__hexnan+0x7a>
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0df      	beq.n	8007154 <__hexnan+0xbc>
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	f1c3 0320 	rsb	r3, r3, #32
 800719c:	fa22 f303 	lsr.w	r3, r2, r3
 80071a0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80071a4:	401a      	ands	r2, r3
 80071a6:	f847 2c04 	str.w	r2, [r7, #-4]
 80071aa:	e7d3      	b.n	8007154 <__hexnan+0xbc>
 80071ac:	3e04      	subs	r6, #4
 80071ae:	e7d1      	b.n	8007154 <__hexnan+0xbc>
 80071b0:	2004      	movs	r0, #4
 80071b2:	b007      	add	sp, #28
 80071b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071b8 <__localeconv_l>:
 80071b8:	30f0      	adds	r0, #240	; 0xf0
 80071ba:	4770      	bx	lr

080071bc <_localeconv_r>:
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <_localeconv_r+0x14>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a18      	ldr	r0, [r3, #32]
 80071c2:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <_localeconv_r+0x18>)
 80071c4:	2800      	cmp	r0, #0
 80071c6:	bf08      	it	eq
 80071c8:	4618      	moveq	r0, r3
 80071ca:	30f0      	adds	r0, #240	; 0xf0
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	2000000c 	.word	0x2000000c
 80071d4:	20000070 	.word	0x20000070

080071d8 <memchr>:
 80071d8:	b510      	push	{r4, lr}
 80071da:	b2c9      	uxtb	r1, r1
 80071dc:	4402      	add	r2, r0
 80071de:	4290      	cmp	r0, r2
 80071e0:	4603      	mov	r3, r0
 80071e2:	d101      	bne.n	80071e8 <memchr+0x10>
 80071e4:	2300      	movs	r3, #0
 80071e6:	e003      	b.n	80071f0 <memchr+0x18>
 80071e8:	781c      	ldrb	r4, [r3, #0]
 80071ea:	3001      	adds	r0, #1
 80071ec:	428c      	cmp	r4, r1
 80071ee:	d1f6      	bne.n	80071de <memchr+0x6>
 80071f0:	4618      	mov	r0, r3
 80071f2:	bd10      	pop	{r4, pc}

080071f4 <memcpy>:
 80071f4:	b510      	push	{r4, lr}
 80071f6:	1e43      	subs	r3, r0, #1
 80071f8:	440a      	add	r2, r1
 80071fa:	4291      	cmp	r1, r2
 80071fc:	d100      	bne.n	8007200 <memcpy+0xc>
 80071fe:	bd10      	pop	{r4, pc}
 8007200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007208:	e7f7      	b.n	80071fa <memcpy+0x6>

0800720a <__malloc_lock>:
 800720a:	4770      	bx	lr

0800720c <__malloc_unlock>:
 800720c:	4770      	bx	lr

0800720e <_Balloc>:
 800720e:	b570      	push	{r4, r5, r6, lr}
 8007210:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007212:	4604      	mov	r4, r0
 8007214:	460e      	mov	r6, r1
 8007216:	b93d      	cbnz	r5, 8007228 <_Balloc+0x1a>
 8007218:	2010      	movs	r0, #16
 800721a:	f7fd f9b1 	bl	8004580 <malloc>
 800721e:	6260      	str	r0, [r4, #36]	; 0x24
 8007220:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007224:	6005      	str	r5, [r0, #0]
 8007226:	60c5      	str	r5, [r0, #12]
 8007228:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800722a:	68eb      	ldr	r3, [r5, #12]
 800722c:	b183      	cbz	r3, 8007250 <_Balloc+0x42>
 800722e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007236:	b9b8      	cbnz	r0, 8007268 <_Balloc+0x5a>
 8007238:	2101      	movs	r1, #1
 800723a:	fa01 f506 	lsl.w	r5, r1, r6
 800723e:	1d6a      	adds	r2, r5, #5
 8007240:	0092      	lsls	r2, r2, #2
 8007242:	4620      	mov	r0, r4
 8007244:	f000 fbdc 	bl	8007a00 <_calloc_r>
 8007248:	b160      	cbz	r0, 8007264 <_Balloc+0x56>
 800724a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800724e:	e00e      	b.n	800726e <_Balloc+0x60>
 8007250:	2221      	movs	r2, #33	; 0x21
 8007252:	2104      	movs	r1, #4
 8007254:	4620      	mov	r0, r4
 8007256:	f000 fbd3 	bl	8007a00 <_calloc_r>
 800725a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800725c:	60e8      	str	r0, [r5, #12]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e4      	bne.n	800722e <_Balloc+0x20>
 8007264:	2000      	movs	r0, #0
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	6802      	ldr	r2, [r0, #0]
 800726a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800726e:	2300      	movs	r3, #0
 8007270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007274:	e7f7      	b.n	8007266 <_Balloc+0x58>

08007276 <_Bfree>:
 8007276:	b570      	push	{r4, r5, r6, lr}
 8007278:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800727a:	4606      	mov	r6, r0
 800727c:	460d      	mov	r5, r1
 800727e:	b93c      	cbnz	r4, 8007290 <_Bfree+0x1a>
 8007280:	2010      	movs	r0, #16
 8007282:	f7fd f97d 	bl	8004580 <malloc>
 8007286:	6270      	str	r0, [r6, #36]	; 0x24
 8007288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800728c:	6004      	str	r4, [r0, #0]
 800728e:	60c4      	str	r4, [r0, #12]
 8007290:	b13d      	cbz	r5, 80072a2 <_Bfree+0x2c>
 8007292:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007294:	686a      	ldr	r2, [r5, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800729c:	6029      	str	r1, [r5, #0]
 800729e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80072a2:	bd70      	pop	{r4, r5, r6, pc}

080072a4 <__multadd>:
 80072a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a8:	461f      	mov	r7, r3
 80072aa:	4606      	mov	r6, r0
 80072ac:	460c      	mov	r4, r1
 80072ae:	2300      	movs	r3, #0
 80072b0:	690d      	ldr	r5, [r1, #16]
 80072b2:	f101 0c14 	add.w	ip, r1, #20
 80072b6:	f8dc 0000 	ldr.w	r0, [ip]
 80072ba:	3301      	adds	r3, #1
 80072bc:	b281      	uxth	r1, r0
 80072be:	fb02 7101 	mla	r1, r2, r1, r7
 80072c2:	0c00      	lsrs	r0, r0, #16
 80072c4:	0c0f      	lsrs	r7, r1, #16
 80072c6:	fb02 7000 	mla	r0, r2, r0, r7
 80072ca:	b289      	uxth	r1, r1
 80072cc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80072d0:	429d      	cmp	r5, r3
 80072d2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80072d6:	f84c 1b04 	str.w	r1, [ip], #4
 80072da:	dcec      	bgt.n	80072b6 <__multadd+0x12>
 80072dc:	b1d7      	cbz	r7, 8007314 <__multadd+0x70>
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	dc12      	bgt.n	800730a <__multadd+0x66>
 80072e4:	6861      	ldr	r1, [r4, #4]
 80072e6:	4630      	mov	r0, r6
 80072e8:	3101      	adds	r1, #1
 80072ea:	f7ff ff90 	bl	800720e <_Balloc>
 80072ee:	4680      	mov	r8, r0
 80072f0:	6922      	ldr	r2, [r4, #16]
 80072f2:	f104 010c 	add.w	r1, r4, #12
 80072f6:	3202      	adds	r2, #2
 80072f8:	0092      	lsls	r2, r2, #2
 80072fa:	300c      	adds	r0, #12
 80072fc:	f7ff ff7a 	bl	80071f4 <memcpy>
 8007300:	4621      	mov	r1, r4
 8007302:	4630      	mov	r0, r6
 8007304:	f7ff ffb7 	bl	8007276 <_Bfree>
 8007308:	4644      	mov	r4, r8
 800730a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800730e:	3501      	adds	r5, #1
 8007310:	615f      	str	r7, [r3, #20]
 8007312:	6125      	str	r5, [r4, #16]
 8007314:	4620      	mov	r0, r4
 8007316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800731a <__s2b>:
 800731a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800731e:	4615      	mov	r5, r2
 8007320:	2209      	movs	r2, #9
 8007322:	461f      	mov	r7, r3
 8007324:	3308      	adds	r3, #8
 8007326:	460c      	mov	r4, r1
 8007328:	fb93 f3f2 	sdiv	r3, r3, r2
 800732c:	4606      	mov	r6, r0
 800732e:	2201      	movs	r2, #1
 8007330:	2100      	movs	r1, #0
 8007332:	429a      	cmp	r2, r3
 8007334:	db20      	blt.n	8007378 <__s2b+0x5e>
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff ff69 	bl	800720e <_Balloc>
 800733c:	9b08      	ldr	r3, [sp, #32]
 800733e:	2d09      	cmp	r5, #9
 8007340:	6143      	str	r3, [r0, #20]
 8007342:	f04f 0301 	mov.w	r3, #1
 8007346:	6103      	str	r3, [r0, #16]
 8007348:	dd19      	ble.n	800737e <__s2b+0x64>
 800734a:	f104 0809 	add.w	r8, r4, #9
 800734e:	46c1      	mov	r9, r8
 8007350:	442c      	add	r4, r5
 8007352:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007356:	4601      	mov	r1, r0
 8007358:	3b30      	subs	r3, #48	; 0x30
 800735a:	220a      	movs	r2, #10
 800735c:	4630      	mov	r0, r6
 800735e:	f7ff ffa1 	bl	80072a4 <__multadd>
 8007362:	45a1      	cmp	r9, r4
 8007364:	d1f5      	bne.n	8007352 <__s2b+0x38>
 8007366:	eb08 0405 	add.w	r4, r8, r5
 800736a:	3c08      	subs	r4, #8
 800736c:	1b2d      	subs	r5, r5, r4
 800736e:	1963      	adds	r3, r4, r5
 8007370:	42bb      	cmp	r3, r7
 8007372:	db07      	blt.n	8007384 <__s2b+0x6a>
 8007374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007378:	0052      	lsls	r2, r2, #1
 800737a:	3101      	adds	r1, #1
 800737c:	e7d9      	b.n	8007332 <__s2b+0x18>
 800737e:	340a      	adds	r4, #10
 8007380:	2509      	movs	r5, #9
 8007382:	e7f3      	b.n	800736c <__s2b+0x52>
 8007384:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007388:	4601      	mov	r1, r0
 800738a:	3b30      	subs	r3, #48	; 0x30
 800738c:	220a      	movs	r2, #10
 800738e:	4630      	mov	r0, r6
 8007390:	f7ff ff88 	bl	80072a4 <__multadd>
 8007394:	e7eb      	b.n	800736e <__s2b+0x54>

08007396 <__hi0bits>:
 8007396:	0c02      	lsrs	r2, r0, #16
 8007398:	0412      	lsls	r2, r2, #16
 800739a:	4603      	mov	r3, r0
 800739c:	b9b2      	cbnz	r2, 80073cc <__hi0bits+0x36>
 800739e:	0403      	lsls	r3, r0, #16
 80073a0:	2010      	movs	r0, #16
 80073a2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80073a6:	bf04      	itt	eq
 80073a8:	021b      	lsleq	r3, r3, #8
 80073aa:	3008      	addeq	r0, #8
 80073ac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073b0:	bf04      	itt	eq
 80073b2:	011b      	lsleq	r3, r3, #4
 80073b4:	3004      	addeq	r0, #4
 80073b6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80073ba:	bf04      	itt	eq
 80073bc:	009b      	lsleq	r3, r3, #2
 80073be:	3002      	addeq	r0, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	db06      	blt.n	80073d2 <__hi0bits+0x3c>
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	d503      	bpl.n	80073d0 <__hi0bits+0x3a>
 80073c8:	3001      	adds	r0, #1
 80073ca:	4770      	bx	lr
 80073cc:	2000      	movs	r0, #0
 80073ce:	e7e8      	b.n	80073a2 <__hi0bits+0xc>
 80073d0:	2020      	movs	r0, #32
 80073d2:	4770      	bx	lr

080073d4 <__lo0bits>:
 80073d4:	6803      	ldr	r3, [r0, #0]
 80073d6:	4601      	mov	r1, r0
 80073d8:	f013 0207 	ands.w	r2, r3, #7
 80073dc:	d00b      	beq.n	80073f6 <__lo0bits+0x22>
 80073de:	07da      	lsls	r2, r3, #31
 80073e0:	d423      	bmi.n	800742a <__lo0bits+0x56>
 80073e2:	0798      	lsls	r0, r3, #30
 80073e4:	bf49      	itett	mi
 80073e6:	085b      	lsrmi	r3, r3, #1
 80073e8:	089b      	lsrpl	r3, r3, #2
 80073ea:	2001      	movmi	r0, #1
 80073ec:	600b      	strmi	r3, [r1, #0]
 80073ee:	bf5c      	itt	pl
 80073f0:	600b      	strpl	r3, [r1, #0]
 80073f2:	2002      	movpl	r0, #2
 80073f4:	4770      	bx	lr
 80073f6:	b298      	uxth	r0, r3
 80073f8:	b9a8      	cbnz	r0, 8007426 <__lo0bits+0x52>
 80073fa:	2010      	movs	r0, #16
 80073fc:	0c1b      	lsrs	r3, r3, #16
 80073fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007402:	bf04      	itt	eq
 8007404:	0a1b      	lsreq	r3, r3, #8
 8007406:	3008      	addeq	r0, #8
 8007408:	071a      	lsls	r2, r3, #28
 800740a:	bf04      	itt	eq
 800740c:	091b      	lsreq	r3, r3, #4
 800740e:	3004      	addeq	r0, #4
 8007410:	079a      	lsls	r2, r3, #30
 8007412:	bf04      	itt	eq
 8007414:	089b      	lsreq	r3, r3, #2
 8007416:	3002      	addeq	r0, #2
 8007418:	07da      	lsls	r2, r3, #31
 800741a:	d402      	bmi.n	8007422 <__lo0bits+0x4e>
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	d006      	beq.n	800742e <__lo0bits+0x5a>
 8007420:	3001      	adds	r0, #1
 8007422:	600b      	str	r3, [r1, #0]
 8007424:	4770      	bx	lr
 8007426:	4610      	mov	r0, r2
 8007428:	e7e9      	b.n	80073fe <__lo0bits+0x2a>
 800742a:	2000      	movs	r0, #0
 800742c:	4770      	bx	lr
 800742e:	2020      	movs	r0, #32
 8007430:	4770      	bx	lr

08007432 <__i2b>:
 8007432:	b510      	push	{r4, lr}
 8007434:	460c      	mov	r4, r1
 8007436:	2101      	movs	r1, #1
 8007438:	f7ff fee9 	bl	800720e <_Balloc>
 800743c:	2201      	movs	r2, #1
 800743e:	6144      	str	r4, [r0, #20]
 8007440:	6102      	str	r2, [r0, #16]
 8007442:	bd10      	pop	{r4, pc}

08007444 <__multiply>:
 8007444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007448:	4614      	mov	r4, r2
 800744a:	690a      	ldr	r2, [r1, #16]
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	4688      	mov	r8, r1
 8007450:	429a      	cmp	r2, r3
 8007452:	bfbe      	ittt	lt
 8007454:	460b      	movlt	r3, r1
 8007456:	46a0      	movlt	r8, r4
 8007458:	461c      	movlt	r4, r3
 800745a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800745e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007466:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800746a:	eb07 0609 	add.w	r6, r7, r9
 800746e:	42b3      	cmp	r3, r6
 8007470:	bfb8      	it	lt
 8007472:	3101      	addlt	r1, #1
 8007474:	f7ff fecb 	bl	800720e <_Balloc>
 8007478:	f100 0514 	add.w	r5, r0, #20
 800747c:	462b      	mov	r3, r5
 800747e:	2200      	movs	r2, #0
 8007480:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007484:	4573      	cmp	r3, lr
 8007486:	d316      	bcc.n	80074b6 <__multiply+0x72>
 8007488:	f104 0214 	add.w	r2, r4, #20
 800748c:	f108 0114 	add.w	r1, r8, #20
 8007490:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007494:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	9b00      	ldr	r3, [sp, #0]
 800749c:	9201      	str	r2, [sp, #4]
 800749e:	4293      	cmp	r3, r2
 80074a0:	d80c      	bhi.n	80074bc <__multiply+0x78>
 80074a2:	2e00      	cmp	r6, #0
 80074a4:	dd03      	ble.n	80074ae <__multiply+0x6a>
 80074a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d05d      	beq.n	800756a <__multiply+0x126>
 80074ae:	6106      	str	r6, [r0, #16]
 80074b0:	b003      	add	sp, #12
 80074b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b6:	f843 2b04 	str.w	r2, [r3], #4
 80074ba:	e7e3      	b.n	8007484 <__multiply+0x40>
 80074bc:	f8b2 b000 	ldrh.w	fp, [r2]
 80074c0:	f1bb 0f00 	cmp.w	fp, #0
 80074c4:	d023      	beq.n	800750e <__multiply+0xca>
 80074c6:	4689      	mov	r9, r1
 80074c8:	46ac      	mov	ip, r5
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	f859 4b04 	ldr.w	r4, [r9], #4
 80074d2:	f8dc a000 	ldr.w	sl, [ip]
 80074d6:	b2a3      	uxth	r3, r4
 80074d8:	fa1f fa8a 	uxth.w	sl, sl
 80074dc:	fb0b a303 	mla	r3, fp, r3, sl
 80074e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074e4:	f8dc 4000 	ldr.w	r4, [ip]
 80074e8:	4443      	add	r3, r8
 80074ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80074ee:	fb0b 840a 	mla	r4, fp, sl, r8
 80074f2:	46e2      	mov	sl, ip
 80074f4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074fe:	454f      	cmp	r7, r9
 8007500:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007504:	f84a 3b04 	str.w	r3, [sl], #4
 8007508:	d82b      	bhi.n	8007562 <__multiply+0x11e>
 800750a:	f8cc 8004 	str.w	r8, [ip, #4]
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	3204      	adds	r2, #4
 8007512:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007516:	f1ba 0f00 	cmp.w	sl, #0
 800751a:	d020      	beq.n	800755e <__multiply+0x11a>
 800751c:	4689      	mov	r9, r1
 800751e:	46a8      	mov	r8, r5
 8007520:	f04f 0b00 	mov.w	fp, #0
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	f8b9 c000 	ldrh.w	ip, [r9]
 800752a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800752e:	b29b      	uxth	r3, r3
 8007530:	fb0a 440c 	mla	r4, sl, ip, r4
 8007534:	46c4      	mov	ip, r8
 8007536:	445c      	add	r4, fp
 8007538:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800753c:	f84c 3b04 	str.w	r3, [ip], #4
 8007540:	f859 3b04 	ldr.w	r3, [r9], #4
 8007544:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	fb0a b303 	mla	r3, sl, r3, fp
 800754e:	454f      	cmp	r7, r9
 8007550:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007554:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007558:	d805      	bhi.n	8007566 <__multiply+0x122>
 800755a:	f8c8 3004 	str.w	r3, [r8, #4]
 800755e:	3504      	adds	r5, #4
 8007560:	e79b      	b.n	800749a <__multiply+0x56>
 8007562:	46d4      	mov	ip, sl
 8007564:	e7b3      	b.n	80074ce <__multiply+0x8a>
 8007566:	46e0      	mov	r8, ip
 8007568:	e7dd      	b.n	8007526 <__multiply+0xe2>
 800756a:	3e01      	subs	r6, #1
 800756c:	e799      	b.n	80074a2 <__multiply+0x5e>
	...

08007570 <__pow5mult>:
 8007570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007574:	4615      	mov	r5, r2
 8007576:	f012 0203 	ands.w	r2, r2, #3
 800757a:	4606      	mov	r6, r0
 800757c:	460f      	mov	r7, r1
 800757e:	d007      	beq.n	8007590 <__pow5mult+0x20>
 8007580:	4c21      	ldr	r4, [pc, #132]	; (8007608 <__pow5mult+0x98>)
 8007582:	3a01      	subs	r2, #1
 8007584:	2300      	movs	r3, #0
 8007586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800758a:	f7ff fe8b 	bl	80072a4 <__multadd>
 800758e:	4607      	mov	r7, r0
 8007590:	10ad      	asrs	r5, r5, #2
 8007592:	d035      	beq.n	8007600 <__pow5mult+0x90>
 8007594:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007596:	b93c      	cbnz	r4, 80075a8 <__pow5mult+0x38>
 8007598:	2010      	movs	r0, #16
 800759a:	f7fc fff1 	bl	8004580 <malloc>
 800759e:	6270      	str	r0, [r6, #36]	; 0x24
 80075a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075a4:	6004      	str	r4, [r0, #0]
 80075a6:	60c4      	str	r4, [r0, #12]
 80075a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075b0:	b94c      	cbnz	r4, 80075c6 <__pow5mult+0x56>
 80075b2:	f240 2171 	movw	r1, #625	; 0x271
 80075b6:	4630      	mov	r0, r6
 80075b8:	f7ff ff3b 	bl	8007432 <__i2b>
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80075c4:	6003      	str	r3, [r0, #0]
 80075c6:	f04f 0800 	mov.w	r8, #0
 80075ca:	07eb      	lsls	r3, r5, #31
 80075cc:	d50a      	bpl.n	80075e4 <__pow5mult+0x74>
 80075ce:	4639      	mov	r1, r7
 80075d0:	4622      	mov	r2, r4
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7ff ff36 	bl	8007444 <__multiply>
 80075d8:	4681      	mov	r9, r0
 80075da:	4639      	mov	r1, r7
 80075dc:	4630      	mov	r0, r6
 80075de:	f7ff fe4a 	bl	8007276 <_Bfree>
 80075e2:	464f      	mov	r7, r9
 80075e4:	106d      	asrs	r5, r5, #1
 80075e6:	d00b      	beq.n	8007600 <__pow5mult+0x90>
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	b938      	cbnz	r0, 80075fc <__pow5mult+0x8c>
 80075ec:	4622      	mov	r2, r4
 80075ee:	4621      	mov	r1, r4
 80075f0:	4630      	mov	r0, r6
 80075f2:	f7ff ff27 	bl	8007444 <__multiply>
 80075f6:	6020      	str	r0, [r4, #0]
 80075f8:	f8c0 8000 	str.w	r8, [r0]
 80075fc:	4604      	mov	r4, r0
 80075fe:	e7e4      	b.n	80075ca <__pow5mult+0x5a>
 8007600:	4638      	mov	r0, r7
 8007602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007606:	bf00      	nop
 8007608:	080080b8 	.word	0x080080b8

0800760c <__lshift>:
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	460c      	mov	r4, r1
 8007612:	4607      	mov	r7, r0
 8007614:	4616      	mov	r6, r2
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800761c:	eb0a 0903 	add.w	r9, sl, r3
 8007620:	6849      	ldr	r1, [r1, #4]
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	f109 0501 	add.w	r5, r9, #1
 8007628:	42ab      	cmp	r3, r5
 800762a:	db32      	blt.n	8007692 <__lshift+0x86>
 800762c:	4638      	mov	r0, r7
 800762e:	f7ff fdee 	bl	800720e <_Balloc>
 8007632:	2300      	movs	r3, #0
 8007634:	4680      	mov	r8, r0
 8007636:	461a      	mov	r2, r3
 8007638:	f100 0114 	add.w	r1, r0, #20
 800763c:	4553      	cmp	r3, sl
 800763e:	db2b      	blt.n	8007698 <__lshift+0x8c>
 8007640:	6920      	ldr	r0, [r4, #16]
 8007642:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007646:	f104 0314 	add.w	r3, r4, #20
 800764a:	f016 021f 	ands.w	r2, r6, #31
 800764e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007652:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007656:	d025      	beq.n	80076a4 <__lshift+0x98>
 8007658:	2000      	movs	r0, #0
 800765a:	f1c2 0e20 	rsb	lr, r2, #32
 800765e:	468a      	mov	sl, r1
 8007660:	681e      	ldr	r6, [r3, #0]
 8007662:	4096      	lsls	r6, r2
 8007664:	4330      	orrs	r0, r6
 8007666:	f84a 0b04 	str.w	r0, [sl], #4
 800766a:	f853 0b04 	ldr.w	r0, [r3], #4
 800766e:	459c      	cmp	ip, r3
 8007670:	fa20 f00e 	lsr.w	r0, r0, lr
 8007674:	d814      	bhi.n	80076a0 <__lshift+0x94>
 8007676:	6048      	str	r0, [r1, #4]
 8007678:	b108      	cbz	r0, 800767e <__lshift+0x72>
 800767a:	f109 0502 	add.w	r5, r9, #2
 800767e:	3d01      	subs	r5, #1
 8007680:	4638      	mov	r0, r7
 8007682:	f8c8 5010 	str.w	r5, [r8, #16]
 8007686:	4621      	mov	r1, r4
 8007688:	f7ff fdf5 	bl	8007276 <_Bfree>
 800768c:	4640      	mov	r0, r8
 800768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007692:	3101      	adds	r1, #1
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	e7c7      	b.n	8007628 <__lshift+0x1c>
 8007698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800769c:	3301      	adds	r3, #1
 800769e:	e7cd      	b.n	800763c <__lshift+0x30>
 80076a0:	4651      	mov	r1, sl
 80076a2:	e7dc      	b.n	800765e <__lshift+0x52>
 80076a4:	3904      	subs	r1, #4
 80076a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076aa:	459c      	cmp	ip, r3
 80076ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80076b0:	d8f9      	bhi.n	80076a6 <__lshift+0x9a>
 80076b2:	e7e4      	b.n	800767e <__lshift+0x72>

080076b4 <__mcmp>:
 80076b4:	6903      	ldr	r3, [r0, #16]
 80076b6:	690a      	ldr	r2, [r1, #16]
 80076b8:	b530      	push	{r4, r5, lr}
 80076ba:	1a9b      	subs	r3, r3, r2
 80076bc:	d10c      	bne.n	80076d8 <__mcmp+0x24>
 80076be:	0092      	lsls	r2, r2, #2
 80076c0:	3014      	adds	r0, #20
 80076c2:	3114      	adds	r1, #20
 80076c4:	1884      	adds	r4, r0, r2
 80076c6:	4411      	add	r1, r2
 80076c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076d0:	4295      	cmp	r5, r2
 80076d2:	d003      	beq.n	80076dc <__mcmp+0x28>
 80076d4:	d305      	bcc.n	80076e2 <__mcmp+0x2e>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4618      	mov	r0, r3
 80076da:	bd30      	pop	{r4, r5, pc}
 80076dc:	42a0      	cmp	r0, r4
 80076de:	d3f3      	bcc.n	80076c8 <__mcmp+0x14>
 80076e0:	e7fa      	b.n	80076d8 <__mcmp+0x24>
 80076e2:	f04f 33ff 	mov.w	r3, #4294967295
 80076e6:	e7f7      	b.n	80076d8 <__mcmp+0x24>

080076e8 <__mdiff>:
 80076e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	460d      	mov	r5, r1
 80076ee:	4607      	mov	r7, r0
 80076f0:	4611      	mov	r1, r2
 80076f2:	4628      	mov	r0, r5
 80076f4:	4614      	mov	r4, r2
 80076f6:	f7ff ffdd 	bl	80076b4 <__mcmp>
 80076fa:	1e06      	subs	r6, r0, #0
 80076fc:	d108      	bne.n	8007710 <__mdiff+0x28>
 80076fe:	4631      	mov	r1, r6
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff fd84 	bl	800720e <_Balloc>
 8007706:	2301      	movs	r3, #1
 8007708:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	bfa4      	itt	ge
 8007712:	4623      	movge	r3, r4
 8007714:	462c      	movge	r4, r5
 8007716:	4638      	mov	r0, r7
 8007718:	6861      	ldr	r1, [r4, #4]
 800771a:	bfa6      	itte	ge
 800771c:	461d      	movge	r5, r3
 800771e:	2600      	movge	r6, #0
 8007720:	2601      	movlt	r6, #1
 8007722:	f7ff fd74 	bl	800720e <_Balloc>
 8007726:	f04f 0e00 	mov.w	lr, #0
 800772a:	60c6      	str	r6, [r0, #12]
 800772c:	692b      	ldr	r3, [r5, #16]
 800772e:	6926      	ldr	r6, [r4, #16]
 8007730:	f104 0214 	add.w	r2, r4, #20
 8007734:	f105 0914 	add.w	r9, r5, #20
 8007738:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800773c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007740:	f100 0114 	add.w	r1, r0, #20
 8007744:	f852 ab04 	ldr.w	sl, [r2], #4
 8007748:	f859 5b04 	ldr.w	r5, [r9], #4
 800774c:	fa1f f38a 	uxth.w	r3, sl
 8007750:	4473      	add	r3, lr
 8007752:	b2ac      	uxth	r4, r5
 8007754:	1b1b      	subs	r3, r3, r4
 8007756:	0c2c      	lsrs	r4, r5, #16
 8007758:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800775c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007760:	b29b      	uxth	r3, r3
 8007762:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007766:	45c8      	cmp	r8, r9
 8007768:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800776c:	4694      	mov	ip, r2
 800776e:	f841 4b04 	str.w	r4, [r1], #4
 8007772:	d8e7      	bhi.n	8007744 <__mdiff+0x5c>
 8007774:	45bc      	cmp	ip, r7
 8007776:	d304      	bcc.n	8007782 <__mdiff+0x9a>
 8007778:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800777c:	b183      	cbz	r3, 80077a0 <__mdiff+0xb8>
 800777e:	6106      	str	r6, [r0, #16]
 8007780:	e7c4      	b.n	800770c <__mdiff+0x24>
 8007782:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007786:	b2a2      	uxth	r2, r4
 8007788:	4472      	add	r2, lr
 800778a:	1413      	asrs	r3, r2, #16
 800778c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007790:	b292      	uxth	r2, r2
 8007792:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007796:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800779a:	f841 2b04 	str.w	r2, [r1], #4
 800779e:	e7e9      	b.n	8007774 <__mdiff+0x8c>
 80077a0:	3e01      	subs	r6, #1
 80077a2:	e7e9      	b.n	8007778 <__mdiff+0x90>

080077a4 <__ulp>:
 80077a4:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <__ulp+0x44>)
 80077a6:	400b      	ands	r3, r1
 80077a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	dd02      	ble.n	80077b6 <__ulp+0x12>
 80077b0:	2000      	movs	r0, #0
 80077b2:	4619      	mov	r1, r3
 80077b4:	4770      	bx	lr
 80077b6:	425b      	negs	r3, r3
 80077b8:	151b      	asrs	r3, r3, #20
 80077ba:	2b13      	cmp	r3, #19
 80077bc:	f04f 0000 	mov.w	r0, #0
 80077c0:	f04f 0100 	mov.w	r1, #0
 80077c4:	dc04      	bgt.n	80077d0 <__ulp+0x2c>
 80077c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80077ca:	fa42 f103 	asr.w	r1, r2, r3
 80077ce:	4770      	bx	lr
 80077d0:	2201      	movs	r2, #1
 80077d2:	3b14      	subs	r3, #20
 80077d4:	2b1e      	cmp	r3, #30
 80077d6:	bfce      	itee	gt
 80077d8:	4613      	movgt	r3, r2
 80077da:	f1c3 031f 	rsble	r3, r3, #31
 80077de:	fa02 f303 	lslle.w	r3, r2, r3
 80077e2:	4618      	mov	r0, r3
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	7ff00000 	.word	0x7ff00000

080077ec <__b2d>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	6907      	ldr	r7, [r0, #16]
 80077f2:	f100 0914 	add.w	r9, r0, #20
 80077f6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80077fa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80077fe:	f1a7 0804 	sub.w	r8, r7, #4
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff fdc7 	bl	8007396 <__hi0bits>
 8007808:	f1c0 0320 	rsb	r3, r0, #32
 800780c:	280a      	cmp	r0, #10
 800780e:	600b      	str	r3, [r1, #0]
 8007810:	491e      	ldr	r1, [pc, #120]	; (800788c <__b2d+0xa0>)
 8007812:	dc17      	bgt.n	8007844 <__b2d+0x58>
 8007814:	45c1      	cmp	r9, r8
 8007816:	bf28      	it	cs
 8007818:	2200      	movcs	r2, #0
 800781a:	f1c0 0c0b 	rsb	ip, r0, #11
 800781e:	fa26 f30c 	lsr.w	r3, r6, ip
 8007822:	bf38      	it	cc
 8007824:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007828:	ea43 0501 	orr.w	r5, r3, r1
 800782c:	f100 0315 	add.w	r3, r0, #21
 8007830:	fa06 f303 	lsl.w	r3, r6, r3
 8007834:	fa22 f20c 	lsr.w	r2, r2, ip
 8007838:	ea43 0402 	orr.w	r4, r3, r2
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007844:	45c1      	cmp	r9, r8
 8007846:	bf3a      	itte	cc
 8007848:	f1a7 0808 	subcc.w	r8, r7, #8
 800784c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007850:	2200      	movcs	r2, #0
 8007852:	f1b0 030b 	subs.w	r3, r0, #11
 8007856:	d015      	beq.n	8007884 <__b2d+0x98>
 8007858:	409e      	lsls	r6, r3
 800785a:	f1c3 0720 	rsb	r7, r3, #32
 800785e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007862:	fa22 f107 	lsr.w	r1, r2, r7
 8007866:	45c8      	cmp	r8, r9
 8007868:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800786c:	ea46 0501 	orr.w	r5, r6, r1
 8007870:	bf94      	ite	ls
 8007872:	2100      	movls	r1, #0
 8007874:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007878:	fa02 f003 	lsl.w	r0, r2, r3
 800787c:	40f9      	lsrs	r1, r7
 800787e:	ea40 0401 	orr.w	r4, r0, r1
 8007882:	e7db      	b.n	800783c <__b2d+0x50>
 8007884:	ea46 0501 	orr.w	r5, r6, r1
 8007888:	4614      	mov	r4, r2
 800788a:	e7d7      	b.n	800783c <__b2d+0x50>
 800788c:	3ff00000 	.word	0x3ff00000

08007890 <__d2b>:
 8007890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007894:	461c      	mov	r4, r3
 8007896:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800789a:	2101      	movs	r1, #1
 800789c:	4690      	mov	r8, r2
 800789e:	f7ff fcb6 	bl	800720e <_Balloc>
 80078a2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80078a6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80078aa:	4607      	mov	r7, r0
 80078ac:	bb34      	cbnz	r4, 80078fc <__d2b+0x6c>
 80078ae:	9201      	str	r2, [sp, #4]
 80078b0:	f1b8 0200 	subs.w	r2, r8, #0
 80078b4:	d027      	beq.n	8007906 <__d2b+0x76>
 80078b6:	a802      	add	r0, sp, #8
 80078b8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80078bc:	f7ff fd8a 	bl	80073d4 <__lo0bits>
 80078c0:	9900      	ldr	r1, [sp, #0]
 80078c2:	b1f0      	cbz	r0, 8007902 <__d2b+0x72>
 80078c4:	9a01      	ldr	r2, [sp, #4]
 80078c6:	f1c0 0320 	rsb	r3, r0, #32
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	430b      	orrs	r3, r1
 80078d0:	40c2      	lsrs	r2, r0
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	9201      	str	r2, [sp, #4]
 80078d6:	9b01      	ldr	r3, [sp, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bf14      	ite	ne
 80078dc:	2102      	movne	r1, #2
 80078de:	2101      	moveq	r1, #1
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	6139      	str	r1, [r7, #16]
 80078e4:	b1c4      	cbz	r4, 8007918 <__d2b+0x88>
 80078e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80078ea:	4404      	add	r4, r0
 80078ec:	6034      	str	r4, [r6, #0]
 80078ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078f2:	6028      	str	r0, [r5, #0]
 80078f4:	4638      	mov	r0, r7
 80078f6:	b002      	add	sp, #8
 80078f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007900:	e7d5      	b.n	80078ae <__d2b+0x1e>
 8007902:	6179      	str	r1, [r7, #20]
 8007904:	e7e7      	b.n	80078d6 <__d2b+0x46>
 8007906:	a801      	add	r0, sp, #4
 8007908:	f7ff fd64 	bl	80073d4 <__lo0bits>
 800790c:	2101      	movs	r1, #1
 800790e:	9b01      	ldr	r3, [sp, #4]
 8007910:	6139      	str	r1, [r7, #16]
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	3020      	adds	r0, #32
 8007916:	e7e5      	b.n	80078e4 <__d2b+0x54>
 8007918:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800791c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007920:	6030      	str	r0, [r6, #0]
 8007922:	6918      	ldr	r0, [r3, #16]
 8007924:	f7ff fd37 	bl	8007396 <__hi0bits>
 8007928:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800792c:	e7e1      	b.n	80078f2 <__d2b+0x62>

0800792e <__ratio>:
 800792e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007932:	4688      	mov	r8, r1
 8007934:	4669      	mov	r1, sp
 8007936:	4681      	mov	r9, r0
 8007938:	f7ff ff58 	bl	80077ec <__b2d>
 800793c:	468b      	mov	fp, r1
 800793e:	4606      	mov	r6, r0
 8007940:	460f      	mov	r7, r1
 8007942:	4640      	mov	r0, r8
 8007944:	a901      	add	r1, sp, #4
 8007946:	f7ff ff51 	bl	80077ec <__b2d>
 800794a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800794e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007952:	460d      	mov	r5, r1
 8007954:	eba3 0c02 	sub.w	ip, r3, r2
 8007958:	e9dd 3200 	ldrd	r3, r2, [sp]
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfd5      	itete	le
 8007966:	460a      	movle	r2, r1
 8007968:	463a      	movgt	r2, r7
 800796a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800796e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007972:	bfd8      	it	le
 8007974:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007978:	462b      	mov	r3, r5
 800797a:	4602      	mov	r2, r0
 800797c:	4659      	mov	r1, fp
 800797e:	4630      	mov	r0, r6
 8007980:	f7f8 fed4 	bl	800072c <__aeabi_ddiv>
 8007984:	b003      	add	sp, #12
 8007986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800798a <__copybits>:
 800798a:	3901      	subs	r1, #1
 800798c:	b510      	push	{r4, lr}
 800798e:	1149      	asrs	r1, r1, #5
 8007990:	6914      	ldr	r4, [r2, #16]
 8007992:	3101      	adds	r1, #1
 8007994:	f102 0314 	add.w	r3, r2, #20
 8007998:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800799c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80079a0:	42a3      	cmp	r3, r4
 80079a2:	4602      	mov	r2, r0
 80079a4:	d303      	bcc.n	80079ae <__copybits+0x24>
 80079a6:	2300      	movs	r3, #0
 80079a8:	428a      	cmp	r2, r1
 80079aa:	d305      	bcc.n	80079b8 <__copybits+0x2e>
 80079ac:	bd10      	pop	{r4, pc}
 80079ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b2:	f840 2b04 	str.w	r2, [r0], #4
 80079b6:	e7f3      	b.n	80079a0 <__copybits+0x16>
 80079b8:	f842 3b04 	str.w	r3, [r2], #4
 80079bc:	e7f4      	b.n	80079a8 <__copybits+0x1e>

080079be <__any_on>:
 80079be:	f100 0214 	add.w	r2, r0, #20
 80079c2:	6900      	ldr	r0, [r0, #16]
 80079c4:	114b      	asrs	r3, r1, #5
 80079c6:	4298      	cmp	r0, r3
 80079c8:	b510      	push	{r4, lr}
 80079ca:	db11      	blt.n	80079f0 <__any_on+0x32>
 80079cc:	dd0a      	ble.n	80079e4 <__any_on+0x26>
 80079ce:	f011 011f 	ands.w	r1, r1, #31
 80079d2:	d007      	beq.n	80079e4 <__any_on+0x26>
 80079d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80079d8:	fa24 f001 	lsr.w	r0, r4, r1
 80079dc:	fa00 f101 	lsl.w	r1, r0, r1
 80079e0:	428c      	cmp	r4, r1
 80079e2:	d10b      	bne.n	80079fc <__any_on+0x3e>
 80079e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d803      	bhi.n	80079f4 <__any_on+0x36>
 80079ec:	2000      	movs	r0, #0
 80079ee:	bd10      	pop	{r4, pc}
 80079f0:	4603      	mov	r3, r0
 80079f2:	e7f7      	b.n	80079e4 <__any_on+0x26>
 80079f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079f8:	2900      	cmp	r1, #0
 80079fa:	d0f5      	beq.n	80079e8 <__any_on+0x2a>
 80079fc:	2001      	movs	r0, #1
 80079fe:	e7f6      	b.n	80079ee <__any_on+0x30>

08007a00 <_calloc_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	fb02 f401 	mul.w	r4, r2, r1
 8007a06:	4621      	mov	r1, r4
 8007a08:	f7fc fe28 	bl	800465c <_malloc_r>
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	b118      	cbz	r0, 8007a18 <_calloc_r+0x18>
 8007a10:	4622      	mov	r2, r4
 8007a12:	2100      	movs	r1, #0
 8007a14:	f7fc fdce 	bl	80045b4 <memset>
 8007a18:	4628      	mov	r0, r5
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}

08007a1c <__ssputs_r>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	688e      	ldr	r6, [r1, #8]
 8007a22:	4682      	mov	sl, r0
 8007a24:	429e      	cmp	r6, r3
 8007a26:	460c      	mov	r4, r1
 8007a28:	4690      	mov	r8, r2
 8007a2a:	4699      	mov	r9, r3
 8007a2c:	d837      	bhi.n	8007a9e <__ssputs_r+0x82>
 8007a2e:	898a      	ldrh	r2, [r1, #12]
 8007a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a34:	d031      	beq.n	8007a9a <__ssputs_r+0x7e>
 8007a36:	2302      	movs	r3, #2
 8007a38:	6825      	ldr	r5, [r4, #0]
 8007a3a:	6909      	ldr	r1, [r1, #16]
 8007a3c:	1a6f      	subs	r7, r5, r1
 8007a3e:	6965      	ldr	r5, [r4, #20]
 8007a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a44:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a48:	f109 0301 	add.w	r3, r9, #1
 8007a4c:	443b      	add	r3, r7
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	bf38      	it	cc
 8007a52:	461d      	movcc	r5, r3
 8007a54:	0553      	lsls	r3, r2, #21
 8007a56:	d530      	bpl.n	8007aba <__ssputs_r+0x9e>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f7fc fdff 	bl	800465c <_malloc_r>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	b950      	cbnz	r0, 8007a78 <__ssputs_r+0x5c>
 8007a62:	230c      	movs	r3, #12
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	f8ca 3000 	str.w	r3, [sl]
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	463a      	mov	r2, r7
 8007a7a:	6921      	ldr	r1, [r4, #16]
 8007a7c:	f7ff fbba 	bl	80071f4 <memcpy>
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	6126      	str	r6, [r4, #16]
 8007a8e:	443e      	add	r6, r7
 8007a90:	6026      	str	r6, [r4, #0]
 8007a92:	464e      	mov	r6, r9
 8007a94:	6165      	str	r5, [r4, #20]
 8007a96:	1bed      	subs	r5, r5, r7
 8007a98:	60a5      	str	r5, [r4, #8]
 8007a9a:	454e      	cmp	r6, r9
 8007a9c:	d900      	bls.n	8007aa0 <__ssputs_r+0x84>
 8007a9e:	464e      	mov	r6, r9
 8007aa0:	4632      	mov	r2, r6
 8007aa2:	4641      	mov	r1, r8
 8007aa4:	6820      	ldr	r0, [r4, #0]
 8007aa6:	f000 f90b 	bl	8007cc0 <memmove>
 8007aaa:	68a3      	ldr	r3, [r4, #8]
 8007aac:	2000      	movs	r0, #0
 8007aae:	1b9b      	subs	r3, r3, r6
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	441e      	add	r6, r3
 8007ab6:	6026      	str	r6, [r4, #0]
 8007ab8:	e7dc      	b.n	8007a74 <__ssputs_r+0x58>
 8007aba:	462a      	mov	r2, r5
 8007abc:	f000 f919 	bl	8007cf2 <_realloc_r>
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d1e2      	bne.n	8007a8c <__ssputs_r+0x70>
 8007ac6:	6921      	ldr	r1, [r4, #16]
 8007ac8:	4650      	mov	r0, sl
 8007aca:	f7fc fd7b 	bl	80045c4 <_free_r>
 8007ace:	e7c8      	b.n	8007a62 <__ssputs_r+0x46>

08007ad0 <_svfiprintf_r>:
 8007ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	461d      	mov	r5, r3
 8007ad6:	898b      	ldrh	r3, [r1, #12]
 8007ad8:	b09d      	sub	sp, #116	; 0x74
 8007ada:	061f      	lsls	r7, r3, #24
 8007adc:	4680      	mov	r8, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	4616      	mov	r6, r2
 8007ae2:	d50f      	bpl.n	8007b04 <_svfiprintf_r+0x34>
 8007ae4:	690b      	ldr	r3, [r1, #16]
 8007ae6:	b96b      	cbnz	r3, 8007b04 <_svfiprintf_r+0x34>
 8007ae8:	2140      	movs	r1, #64	; 0x40
 8007aea:	f7fc fdb7 	bl	800465c <_malloc_r>
 8007aee:	6020      	str	r0, [r4, #0]
 8007af0:	6120      	str	r0, [r4, #16]
 8007af2:	b928      	cbnz	r0, 8007b00 <_svfiprintf_r+0x30>
 8007af4:	230c      	movs	r3, #12
 8007af6:	f8c8 3000 	str.w	r3, [r8]
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295
 8007afe:	e0c8      	b.n	8007c92 <_svfiprintf_r+0x1c2>
 8007b00:	2340      	movs	r3, #64	; 0x40
 8007b02:	6163      	str	r3, [r4, #20]
 8007b04:	2300      	movs	r3, #0
 8007b06:	9309      	str	r3, [sp, #36]	; 0x24
 8007b08:	2320      	movs	r3, #32
 8007b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b0e:	2330      	movs	r3, #48	; 0x30
 8007b10:	f04f 0b01 	mov.w	fp, #1
 8007b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b18:	9503      	str	r5, [sp, #12]
 8007b1a:	4637      	mov	r7, r6
 8007b1c:	463d      	mov	r5, r7
 8007b1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b22:	b10b      	cbz	r3, 8007b28 <_svfiprintf_r+0x58>
 8007b24:	2b25      	cmp	r3, #37	; 0x25
 8007b26:	d13e      	bne.n	8007ba6 <_svfiprintf_r+0xd6>
 8007b28:	ebb7 0a06 	subs.w	sl, r7, r6
 8007b2c:	d00b      	beq.n	8007b46 <_svfiprintf_r+0x76>
 8007b2e:	4653      	mov	r3, sl
 8007b30:	4632      	mov	r2, r6
 8007b32:	4621      	mov	r1, r4
 8007b34:	4640      	mov	r0, r8
 8007b36:	f7ff ff71 	bl	8007a1c <__ssputs_r>
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	f000 80a4 	beq.w	8007c88 <_svfiprintf_r+0x1b8>
 8007b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b42:	4453      	add	r3, sl
 8007b44:	9309      	str	r3, [sp, #36]	; 0x24
 8007b46:	783b      	ldrb	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 809d 	beq.w	8007c88 <_svfiprintf_r+0x1b8>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f04f 32ff 	mov.w	r2, #4294967295
 8007b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b58:	9304      	str	r3, [sp, #16]
 8007b5a:	9307      	str	r3, [sp, #28]
 8007b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b60:	931a      	str	r3, [sp, #104]	; 0x68
 8007b62:	462f      	mov	r7, r5
 8007b64:	2205      	movs	r2, #5
 8007b66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b6a:	4850      	ldr	r0, [pc, #320]	; (8007cac <_svfiprintf_r+0x1dc>)
 8007b6c:	f7ff fb34 	bl	80071d8 <memchr>
 8007b70:	9b04      	ldr	r3, [sp, #16]
 8007b72:	b9d0      	cbnz	r0, 8007baa <_svfiprintf_r+0xda>
 8007b74:	06d9      	lsls	r1, r3, #27
 8007b76:	bf44      	itt	mi
 8007b78:	2220      	movmi	r2, #32
 8007b7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b7e:	071a      	lsls	r2, r3, #28
 8007b80:	bf44      	itt	mi
 8007b82:	222b      	movmi	r2, #43	; 0x2b
 8007b84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b88:	782a      	ldrb	r2, [r5, #0]
 8007b8a:	2a2a      	cmp	r2, #42	; 0x2a
 8007b8c:	d015      	beq.n	8007bba <_svfiprintf_r+0xea>
 8007b8e:	462f      	mov	r7, r5
 8007b90:	2000      	movs	r0, #0
 8007b92:	250a      	movs	r5, #10
 8007b94:	9a07      	ldr	r2, [sp, #28]
 8007b96:	4639      	mov	r1, r7
 8007b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b9c:	3b30      	subs	r3, #48	; 0x30
 8007b9e:	2b09      	cmp	r3, #9
 8007ba0:	d94d      	bls.n	8007c3e <_svfiprintf_r+0x16e>
 8007ba2:	b1b8      	cbz	r0, 8007bd4 <_svfiprintf_r+0x104>
 8007ba4:	e00f      	b.n	8007bc6 <_svfiprintf_r+0xf6>
 8007ba6:	462f      	mov	r7, r5
 8007ba8:	e7b8      	b.n	8007b1c <_svfiprintf_r+0x4c>
 8007baa:	4a40      	ldr	r2, [pc, #256]	; (8007cac <_svfiprintf_r+0x1dc>)
 8007bac:	463d      	mov	r5, r7
 8007bae:	1a80      	subs	r0, r0, r2
 8007bb0:	fa0b f000 	lsl.w	r0, fp, r0
 8007bb4:	4318      	orrs	r0, r3
 8007bb6:	9004      	str	r0, [sp, #16]
 8007bb8:	e7d3      	b.n	8007b62 <_svfiprintf_r+0x92>
 8007bba:	9a03      	ldr	r2, [sp, #12]
 8007bbc:	1d11      	adds	r1, r2, #4
 8007bbe:	6812      	ldr	r2, [r2, #0]
 8007bc0:	9103      	str	r1, [sp, #12]
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	db01      	blt.n	8007bca <_svfiprintf_r+0xfa>
 8007bc6:	9207      	str	r2, [sp, #28]
 8007bc8:	e004      	b.n	8007bd4 <_svfiprintf_r+0x104>
 8007bca:	4252      	negs	r2, r2
 8007bcc:	f043 0302 	orr.w	r3, r3, #2
 8007bd0:	9207      	str	r2, [sp, #28]
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	783b      	ldrb	r3, [r7, #0]
 8007bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8007bd8:	d10c      	bne.n	8007bf4 <_svfiprintf_r+0x124>
 8007bda:	787b      	ldrb	r3, [r7, #1]
 8007bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8007bde:	d133      	bne.n	8007c48 <_svfiprintf_r+0x178>
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	3702      	adds	r7, #2
 8007be4:	1d1a      	adds	r2, r3, #4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	9203      	str	r2, [sp, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bfb8      	it	lt
 8007bee:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	4d2e      	ldr	r5, [pc, #184]	; (8007cb0 <_svfiprintf_r+0x1e0>)
 8007bf6:	2203      	movs	r2, #3
 8007bf8:	7839      	ldrb	r1, [r7, #0]
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f7ff faec 	bl	80071d8 <memchr>
 8007c00:	b138      	cbz	r0, 8007c12 <_svfiprintf_r+0x142>
 8007c02:	2340      	movs	r3, #64	; 0x40
 8007c04:	1b40      	subs	r0, r0, r5
 8007c06:	fa03 f000 	lsl.w	r0, r3, r0
 8007c0a:	9b04      	ldr	r3, [sp, #16]
 8007c0c:	3701      	adds	r7, #1
 8007c0e:	4303      	orrs	r3, r0
 8007c10:	9304      	str	r3, [sp, #16]
 8007c12:	7839      	ldrb	r1, [r7, #0]
 8007c14:	2206      	movs	r2, #6
 8007c16:	4827      	ldr	r0, [pc, #156]	; (8007cb4 <_svfiprintf_r+0x1e4>)
 8007c18:	1c7e      	adds	r6, r7, #1
 8007c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c1e:	f7ff fadb 	bl	80071d8 <memchr>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d038      	beq.n	8007c98 <_svfiprintf_r+0x1c8>
 8007c26:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <_svfiprintf_r+0x1e8>)
 8007c28:	bb13      	cbnz	r3, 8007c70 <_svfiprintf_r+0x1a0>
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	3307      	adds	r3, #7
 8007c2e:	f023 0307 	bic.w	r3, r3, #7
 8007c32:	3308      	adds	r3, #8
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c38:	444b      	add	r3, r9
 8007c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3c:	e76d      	b.n	8007b1a <_svfiprintf_r+0x4a>
 8007c3e:	fb05 3202 	mla	r2, r5, r2, r3
 8007c42:	2001      	movs	r0, #1
 8007c44:	460f      	mov	r7, r1
 8007c46:	e7a6      	b.n	8007b96 <_svfiprintf_r+0xc6>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	250a      	movs	r5, #10
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	3701      	adds	r7, #1
 8007c50:	9305      	str	r3, [sp, #20]
 8007c52:	4638      	mov	r0, r7
 8007c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c58:	3a30      	subs	r2, #48	; 0x30
 8007c5a:	2a09      	cmp	r2, #9
 8007c5c:	d903      	bls.n	8007c66 <_svfiprintf_r+0x196>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0c8      	beq.n	8007bf4 <_svfiprintf_r+0x124>
 8007c62:	9105      	str	r1, [sp, #20]
 8007c64:	e7c6      	b.n	8007bf4 <_svfiprintf_r+0x124>
 8007c66:	fb05 2101 	mla	r1, r5, r1, r2
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	e7f0      	b.n	8007c52 <_svfiprintf_r+0x182>
 8007c70:	ab03      	add	r3, sp, #12
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	4622      	mov	r2, r4
 8007c76:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <_svfiprintf_r+0x1ec>)
 8007c78:	a904      	add	r1, sp, #16
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f7fc fdda 	bl	8004834 <_printf_float>
 8007c80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c84:	4681      	mov	r9, r0
 8007c86:	d1d6      	bne.n	8007c36 <_svfiprintf_r+0x166>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	065b      	lsls	r3, r3, #25
 8007c8c:	f53f af35 	bmi.w	8007afa <_svfiprintf_r+0x2a>
 8007c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c92:	b01d      	add	sp, #116	; 0x74
 8007c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c98:	ab03      	add	r3, sp, #12
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	4622      	mov	r2, r4
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <_svfiprintf_r+0x1ec>)
 8007ca0:	a904      	add	r1, sp, #16
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7fd f872 	bl	8004d8c <_printf_i>
 8007ca8:	e7ea      	b.n	8007c80 <_svfiprintf_r+0x1b0>
 8007caa:	bf00      	nop
 8007cac:	080080c4 	.word	0x080080c4
 8007cb0:	080080ca 	.word	0x080080ca
 8007cb4:	080080ce 	.word	0x080080ce
 8007cb8:	08004835 	.word	0x08004835
 8007cbc:	08007a1d 	.word	0x08007a1d

08007cc0 <memmove>:
 8007cc0:	4288      	cmp	r0, r1
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	eb01 0302 	add.w	r3, r1, r2
 8007cc8:	d807      	bhi.n	8007cda <memmove+0x1a>
 8007cca:	1e42      	subs	r2, r0, #1
 8007ccc:	4299      	cmp	r1, r3
 8007cce:	d00a      	beq.n	8007ce6 <memmove+0x26>
 8007cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007cd8:	e7f8      	b.n	8007ccc <memmove+0xc>
 8007cda:	4283      	cmp	r3, r0
 8007cdc:	d9f5      	bls.n	8007cca <memmove+0xa>
 8007cde:	1881      	adds	r1, r0, r2
 8007ce0:	1ad2      	subs	r2, r2, r3
 8007ce2:	42d3      	cmn	r3, r2
 8007ce4:	d100      	bne.n	8007ce8 <memmove+0x28>
 8007ce6:	bd10      	pop	{r4, pc}
 8007ce8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007cf0:	e7f7      	b.n	8007ce2 <memmove+0x22>

08007cf2 <_realloc_r>:
 8007cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	4614      	mov	r4, r2
 8007cf8:	460e      	mov	r6, r1
 8007cfa:	b921      	cbnz	r1, 8007d06 <_realloc_r+0x14>
 8007cfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d00:	4611      	mov	r1, r2
 8007d02:	f7fc bcab 	b.w	800465c <_malloc_r>
 8007d06:	b922      	cbnz	r2, 8007d12 <_realloc_r+0x20>
 8007d08:	f7fc fc5c 	bl	80045c4 <_free_r>
 8007d0c:	4625      	mov	r5, r4
 8007d0e:	4628      	mov	r0, r5
 8007d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d12:	f000 f814 	bl	8007d3e <_malloc_usable_size_r>
 8007d16:	42a0      	cmp	r0, r4
 8007d18:	d20f      	bcs.n	8007d3a <_realloc_r+0x48>
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	f7fc fc9d 	bl	800465c <_malloc_r>
 8007d22:	4605      	mov	r5, r0
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d0f2      	beq.n	8007d0e <_realloc_r+0x1c>
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	f7ff fa62 	bl	80071f4 <memcpy>
 8007d30:	4631      	mov	r1, r6
 8007d32:	4638      	mov	r0, r7
 8007d34:	f7fc fc46 	bl	80045c4 <_free_r>
 8007d38:	e7e9      	b.n	8007d0e <_realloc_r+0x1c>
 8007d3a:	4635      	mov	r5, r6
 8007d3c:	e7e7      	b.n	8007d0e <_realloc_r+0x1c>

08007d3e <_malloc_usable_size_r>:
 8007d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d42:	1f18      	subs	r0, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bfbc      	itt	lt
 8007d48:	580b      	ldrlt	r3, [r1, r0]
 8007d4a:	18c0      	addlt	r0, r0, r3
 8007d4c:	4770      	bx	lr
	...

08007d50 <_init>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr

08007d5c <_fini>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr
