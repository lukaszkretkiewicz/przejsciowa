
praca_przejsciowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d40  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08007e50  08007e50  00017e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081c0  080081c0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080081c0  080081c0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081c0  080081c0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080081c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  200001e0  080083a4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  080083a4  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e278  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002313  00000000  00000000  0002e47d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  00030790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c93  00000000  00000000  00032118  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0f4  00000000  00000000  0004adab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b447  00000000  00000000  00056e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e22e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004424  00000000  00000000  000e2364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e38 	.word	0x08007e38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007e38 	.word	0x08007e38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_DMA_Init+0x68>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <MX_DMA_Init+0x68>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_DMA_Init+0x68>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	200c      	movs	r0, #12
 8000aec:	f001 f8ff 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000af0:	200c      	movs	r0, #12
 8000af2:	f001 f918 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	200d      	movs	r0, #13
 8000afc:	f001 f8f7 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b00:	200d      	movs	r0, #13
 8000b02:	f001 f910 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2010      	movs	r0, #16
 8000b0c:	f001 f8ef 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b10:	2010      	movs	r0, #16
 8000b12:	f001 f908 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2011      	movs	r0, #17
 8000b1c:	f001 f8e7 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b20:	2011      	movs	r0, #17
 8000b22:	f001 f900 	bl	8001d26 <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a36      	ldr	r2, [pc, #216]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_GPIO_Init+0xf4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2120      	movs	r1, #32
 8000bac:	481f      	ldr	r0, [pc, #124]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bae:	f001 fcaa 	bl	8002506 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pompka_Pin|Grzalka_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2138      	movs	r1, #56	; 0x38
 8000bb6:	481e      	ldr	r0, [pc, #120]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000bb8:	f001 fca5 	bl	8002506 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_GPIO_Init+0x100>)
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4819      	ldr	r0, [pc, #100]	; (8000c38 <MX_GPIO_Init+0x104>)
 8000bd2:	f001 fb27 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd6:	2320      	movs	r3, #32
 8000bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	4619      	mov	r1, r3
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <MX_GPIO_Init+0xf8>)
 8000bee:	f001 fb19 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Pompka_Pin|Grzalka_Pin|DS18B20_Pin;
 8000bf2:	2338      	movs	r3, #56	; 0x38
 8000bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4619      	mov	r1, r3
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000c0a:	f001 fb0b 	bl	8002224 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2028      	movs	r0, #40	; 0x28
 8000c14:	f001 f86b 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c18:	2028      	movs	r0, #40	; 0x28
 8000c1a:	f001 f884 	bl	8001d26 <HAL_NVIC_EnableIRQ>

}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	10110000 	.word	0x10110000
 8000c38:	40011000 	.word	0x40011000

08000c3c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b0b7      	sub	sp, #220	; 0xdc
 8000c40:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c42:	f000 fef9 	bl	8001a38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c46:	f000 f909 	bl	8000e5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c4a:	f7ff ff73 	bl	8000b34 <MX_GPIO_Init>
	MX_DMA_Init();
 8000c4e:	f7ff ff3b 	bl	8000ac8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000c52:	f000 fbcb 	bl	80013ec <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000c56:	f000 fad3 	bl	8001200 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000c5a:	f000 fb23 	bl	80012a4 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8000c5e:	f000 fbef 	bl	8001440 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 8000c62:	223c      	movs	r2, #60	; 0x3c
 8000c64:	496c      	ldr	r1, [pc, #432]	; (8000e18 <main+0x1dc>)
 8000c66:	486d      	ldr	r0, [pc, #436]	; (8000e1c <main+0x1e0>)
 8000c68:	f002 fd64 	bl	8003734 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart3, odebranaWiadomosc2, SIZE_OF_MSG);
 8000c6c:	223c      	movs	r2, #60	; 0x3c
 8000c6e:	496c      	ldr	r1, [pc, #432]	; (8000e20 <main+0x1e4>)
 8000c70:	486c      	ldr	r0, [pc, #432]	; (8000e24 <main+0x1e8>)
 8000c72:	f002 fd5f 	bl	8003734 <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c76:	486c      	ldr	r0, [pc, #432]	; (8000e28 <main+0x1ec>)
 8000c78:	f002 f904 	bl	8002e84 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000c7c:	486b      	ldr	r0, [pc, #428]	; (8000e2c <main+0x1f0>)
 8000c7e:	f002 f901 	bl	8002e84 <HAL_TIM_Base_Start_IT>
	subroutine_Init(&kociol);
 8000c82:	486b      	ldr	r0, [pc, #428]	; (8000e30 <main+0x1f4>)
 8000c84:	f003 fa3c 	bl	8004100 <subroutine_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (startMeasure) {
 8000c88:	4b6a      	ldr	r3, [pc, #424]	; (8000e34 <main+0x1f8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 8091 	beq.w	8000db6 <main+0x17a>
			DS18B20_Full(&measuredTemperature);
 8000c94:	4868      	ldr	r0, [pc, #416]	; (8000e38 <main+0x1fc>)
 8000c96:	f000 fe6f 	bl	8001978 <DS18B20_Full>
			startMeasure = 0;
 8000c9a:	4b66      	ldr	r3, [pc, #408]	; (8000e34 <main+0x1f8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
			if (measuredTemperature > 1.0) {
 8000ca0:	4b65      	ldr	r3, [pc, #404]	; (8000e38 <main+0x1fc>)
 8000ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca6:	f04f 0200 	mov.w	r2, #0
 8000caa:	4b64      	ldr	r3, [pc, #400]	; (8000e3c <main+0x200>)
 8000cac:	f7ff fea4 	bl	80009f8 <__aeabi_dcmpgt>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d07f      	beq.n	8000db6 <main+0x17a>
				uint8_t msg[100];
				uint8_t msg2[100];
				uint8_t x = 255;
 8000cb6:	23ff      	movs	r3, #255	; 0xff
 8000cb8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				sprintf(msg,
 8000cbc:	4b5e      	ldr	r3, [pc, #376]	; (8000e38 <main+0x1fc>)
 8000cbe:	cb18      	ldmia	r3, {r3, r4}
 8000cc0:	1d38      	adds	r0, r7, #4
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4623      	mov	r3, r4
 8000cc6:	495e      	ldr	r1, [pc, #376]	; (8000e40 <main+0x204>)
 8000cc8:	f004 f9f6 	bl	80050b8 <siprintf>
						(const char*) "Wartosc temperatury wynosi %.1lf\n\r",
						measuredTemperature);
				HAL_UART_Transmit_DMA(&huart2, msg, strlen(msg));
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa3e 	bl	8000150 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	484f      	ldr	r0, [pc, #316]	; (8000e1c <main+0x1e0>)
 8000cde:	f002 fcbd 	bl	800365c <HAL_UART_Transmit_DMA>
				HAL_Delay(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 ff0a 	bl	8001afc <HAL_Delay>
				sprintf(msg2,
 8000ce8:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <main+0x1fc>)
 8000cea:	cb18      	ldmia	r3, {r3, r4}
						(const char*) textConversion(measuredTemperature,
 8000cec:	4a55      	ldr	r2, [pc, #340]	; (8000e44 <main+0x208>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	4621      	mov	r1, r4
 8000cf2:	f003 fc0f 	bl	8004514 <textConversion>
 8000cf6:	4602      	mov	r2, r0
				sprintf(msg2,
 8000cf8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f004 f9da 	bl	80050b8 <siprintf>
								"t_aktualna"));
				HAL_UART_Transmit_DMA(&huart2, msg2, strlen(msg2));
 8000d04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa21 	bl	8000150 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d16:	4619      	mov	r1, r3
 8000d18:	4840      	ldr	r0, [pc, #256]	; (8000e1c <main+0x1e0>)
 8000d1a:	f002 fc9f 	bl	800365c <HAL_UART_Transmit_DMA>
				HAL_Delay(1);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 feec 	bl	8001afc <HAL_Delay>
				HAL_UART_Transmit_DMA(&huart2, &x, sizeof(x));
 8000d24:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	483b      	ldr	r0, [pc, #236]	; (8000e1c <main+0x1e0>)
 8000d2e:	f002 fc95 	bl	800365c <HAL_UART_Transmit_DMA>
				HAL_Delay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 fee2 	bl	8001afc <HAL_Delay>
				HAL_UART_Transmit_DMA(&huart2, &x, sizeof(x));
 8000d38:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4836      	ldr	r0, [pc, #216]	; (8000e1c <main+0x1e0>)
 8000d42:	f002 fc8b 	bl	800365c <HAL_UART_Transmit_DMA>
				HAL_Delay(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 fed8 	bl	8001afc <HAL_Delay>
				HAL_UART_Transmit_DMA(&huart2, &x, sizeof(x));
 8000d4c:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 8000d50:	2201      	movs	r2, #1
 8000d52:	4619      	mov	r1, r3
 8000d54:	4831      	ldr	r0, [pc, #196]	; (8000e1c <main+0x1e0>)
 8000d56:	f002 fc81 	bl	800365c <HAL_UART_Transmit_DMA>
				HAL_Delay(1);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f000 fece 	bl	8001afc <HAL_Delay>
				HAL_UART_Transmit_DMA(&huart3, msg2, strlen(msg2));
 8000d60:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff f9f3 	bl	8000150 <strlen>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d72:	4619      	mov	r1, r3
 8000d74:	482b      	ldr	r0, [pc, #172]	; (8000e24 <main+0x1e8>)
 8000d76:	f002 fc71 	bl	800365c <HAL_UART_Transmit_DMA>
				HAL_Delay(1);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f000 febe 	bl	8001afc <HAL_Delay>
				HAL_UART_Transmit_DMA(&huart3, &x, sizeof(x));
 8000d80:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 8000d84:	2201      	movs	r2, #1
 8000d86:	4619      	mov	r1, r3
 8000d88:	4826      	ldr	r0, [pc, #152]	; (8000e24 <main+0x1e8>)
 8000d8a:	f002 fc67 	bl	800365c <HAL_UART_Transmit_DMA>
				HAL_Delay(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 feb4 	bl	8001afc <HAL_Delay>
				HAL_UART_Transmit_DMA(&huart3, &x, sizeof(x));
 8000d94:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4821      	ldr	r0, [pc, #132]	; (8000e24 <main+0x1e8>)
 8000d9e:	f002 fc5d 	bl	800365c <HAL_UART_Transmit_DMA>
				HAL_Delay(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 feaa 	bl	8001afc <HAL_Delay>
				HAL_UART_Transmit_DMA(&huart3, &x, sizeof(x));
 8000da8:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 8000dac:	2201      	movs	r2, #1
 8000dae:	4619      	mov	r1, r3
 8000db0:	481c      	ldr	r0, [pc, #112]	; (8000e24 <main+0x1e8>)
 8000db2:	f002 fc53 	bl	800365c <HAL_UART_Transmit_DMA>
			}
		}
		if (startBangBang) {
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <main+0x20c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d017      	beq.n	8000df0 <main+0x1b4>
			static uint8_t numberOfCycle = 0;
			grzanieRegDwustawna(kociol.heatingCycle[numberOfCycle][0],
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <main+0x210>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <main+0x1f4>)
 8000dc8:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <main+0x210>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <main+0x1f4>)
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	7859      	ldrb	r1, [r3, #1]
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <main+0x1f4>)
 8000dda:	f103 0410 	add.w	r4, r3, #16
 8000dde:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000de2:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <main+0x210>)
 8000de4:	9200      	str	r2, [sp, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4623      	mov	r3, r4
 8000dea:	f003 f9f1 	bl	80041d0 <grzanieRegDwustawna>
 8000dee:	e74b      	b.n	8000c88 <main+0x4c>
					kociol.heatingCycle[numberOfCycle][1], kociol.hist,
					&numberOfCycle);
		} else if (startPIDReg) {
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <main+0x214>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f47f af46 	bne.w	8000c88 <main+0x4c>

		} else if (startPumping) {
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <main+0x218>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d005      	beq.n	8000e12 <main+0x1d6>
			pumping(kociol.pumpingTime);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <main+0x1f4>)
 8000e08:	7a9b      	ldrb	r3, [r3, #10]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 f9b8 	bl	8004180 <pumping>
 8000e10:	e73a      	b.n	8000c88 <main+0x4c>
		} else if (startPumpingWithoutTime) {
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <main+0x21c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
		if (startMeasure) {
 8000e16:	e737      	b.n	8000c88 <main+0x4c>
 8000e18:	200002c8 	.word	0x200002c8
 8000e1c:	20000524 	.word	0x20000524
 8000e20:	2000022c 	.word	0x2000022c
 8000e24:	2000045c 	.word	0x2000045c
 8000e28:	2000038c 	.word	0x2000038c
 8000e2c:	20000344 	.word	0x20000344
 8000e30:	200002b0 	.word	0x200002b0
 8000e34:	20000229 	.word	0x20000229
 8000e38:	200002a0 	.word	0x200002a0
 8000e3c:	3ff00000 	.word	0x3ff00000
 8000e40:	08007e50 	.word	0x08007e50
 8000e44:	08007e74 	.word	0x08007e74
 8000e48:	2000029b 	.word	0x2000029b
 8000e4c:	2000020d 	.word	0x2000020d
 8000e50:	2000029d 	.word	0x2000029d
 8000e54:	20000341 	.word	0x20000341
 8000e58:	20000228 	.word	0x20000228

08000e5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b090      	sub	sp, #64	; 0x40
 8000e60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	2228      	movs	r2, #40	; 0x28
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fc16 	bl	800469c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e82:	2301      	movs	r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e86:	2310      	movs	r3, #16
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e92:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fb85 	bl	80025ac <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x50>
		Error_Handler();
 8000ea8:	f000 f896 	bl	8000fd8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ebc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fdf0 	bl	8002aac <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x7a>
		Error_Handler();
 8000ed2:	f000 f881 	bl	8000fd8 <Error_Handler>
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	3740      	adds	r7, #64	; 0x40
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_TIM_PeriodElapsedCallback>:
/*void USART_Send(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size) {
	HAL_UART_IRQHandler(huart); // Should reset gState to HAL_UART_STATE_READY
	HAL_UART_Transmit_DMA(huart, pData, Size);
}
‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d11e      	bne.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x50>

		//przerwanie co 1 sekundę
		startCounterTime++;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000efa:	6013      	str	r3, [r2, #0]
		CounterPump++;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]
		CounterHeating++;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f0e:	6013      	str	r3, [r2, #0]
		CounterMeasure++;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f1a:	701a      	strb	r2, [r3, #0]
		//pomiar co 3s
		if (CounterMeasure >= 3) {
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d905      	bls.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x50>
			CounterMeasure = 0;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			startMeasure = 1;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40012c00 	.word	0x40012c00
 8000f40:	20000200 	.word	0x20000200
 8000f44:	20000204 	.word	0x20000204
 8000f48:	20000208 	.word	0x20000208
 8000f4c:	2000020c 	.word	0x2000020c
 8000f50:	20000229 	.word	0x20000229

08000f54 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <HAL_UART_RxCpltCallback+0x64>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10c      	bne.n	8000f80 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 8000f66:	223c      	movs	r2, #60	; 0x3c
 8000f68:	4914      	ldr	r1, [pc, #80]	; (8000fbc <HAL_UART_RxCpltCallback+0x68>)
 8000f6a:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <HAL_UART_RxCpltCallback+0x6c>)
 8000f6c:	f002 fbe2 	bl	8003734 <HAL_UART_Receive_DMA>

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f70:	2120      	movs	r1, #32
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <HAL_UART_RxCpltCallback+0x70>)
 8000f74:	f001 fadf 	bl	8002536 <HAL_GPIO_TogglePin>
		setProgram(odebranaWiadomosc, &kociol);
 8000f78:	4913      	ldr	r1, [pc, #76]	; (8000fc8 <HAL_UART_RxCpltCallback+0x74>)
 8000f7a:	4810      	ldr	r0, [pc, #64]	; (8000fbc <HAL_UART_RxCpltCallback+0x68>)
 8000f7c:	f002 fffc 	bl	8003f78 <setProgram>
		//convertToStucture(odebranaWiadomosc, &head);

	}
	if (huart->Instance == USART3) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_UART_RxCpltCallback+0x78>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d111      	bne.n	8000fae <HAL_UART_RxCpltCallback+0x5a>
		HAL_UART_Receive_DMA(&huart3, odebranaWiadomosc2, SIZE_OF_MSG);
 8000f8a:	223c      	movs	r2, #60	; 0x3c
 8000f8c:	4910      	ldr	r1, [pc, #64]	; (8000fd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <HAL_UART_RxCpltCallback+0x80>)
 8000f90:	f002 fbd0 	bl	8003734 <HAL_UART_Receive_DMA>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f94:	2120      	movs	r1, #32
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <HAL_UART_RxCpltCallback+0x70>)
 8000f98:	f001 facd 	bl	8002536 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit_DMA(&huart2, odebranaWiadomosc2,
 8000f9c:	226e      	movs	r2, #110	; 0x6e
 8000f9e:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <HAL_UART_RxCpltCallback+0x6c>)
 8000fa2:	f002 fb5b 	bl	800365c <HAL_UART_Transmit_DMA>
				sizeof(odebranaWiadomosc2));
		setProgram(odebranaWiadomosc2, &kociol);
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <HAL_UART_RxCpltCallback+0x74>)
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000faa:	f002 ffe5 	bl	8003f78 <setProgram>

	}
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40004400 	.word	0x40004400
 8000fbc:	200002c8 	.word	0x200002c8
 8000fc0:	20000524 	.word	0x20000524
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	200002b0 	.word	0x200002b0
 8000fcc:	40004800 	.word	0x40004800
 8000fd0:	2000022c 	.word	0x2000022c
 8000fd4:	2000045c 	.word	0x2000045c

08000fd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_MspInit+0x5c>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_MspInit+0x5c>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_MspInit+0x5c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_MspInit+0x5c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <HAL_MspInit+0x5c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <HAL_MspInit+0x5c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_MspInit+0x60>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_MspInit+0x60>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <HardFault_Handler+0x4>

0800105a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <MemManage_Handler+0x4>

08001060 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <BusFault_Handler+0x4>

08001066 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 fd16 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DMA1_Channel2_IRQHandler+0x10>)
 80010a2:	f000 ff8b 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000049c 	.word	0x2000049c

080010b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <DMA1_Channel3_IRQHandler+0x10>)
 80010b6:	f000 ff81 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000418 	.word	0x20000418

080010c4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <DMA1_Channel6_IRQHandler+0x10>)
 80010ca:	f000 ff77 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200003d4 	.word	0x200003d4

080010d8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DMA1_Channel7_IRQHandler+0x10>)
 80010de:	f000 ff6d 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200004e0 	.word	0x200004e0

080010ec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM1_BRK_IRQHandler+0x10>)
 80010f2:	f001 ff19 	bl	8002f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000344 	.word	0x20000344

08001100 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM1_UP_IRQHandler+0x10>)
 8001106:	f001 ff0f 	bl	8002f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000344 	.word	0x20000344

08001114 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM1_TRG_COM_IRQHandler+0x10>)
 800111a:	f001 ff05 	bl	8002f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000344 	.word	0x20000344

08001128 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <TIM1_CC_IRQHandler+0x10>)
 800112e:	f001 fefb 	bl	8002f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000344 	.word	0x20000344

0800113c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <TIM2_IRQHandler+0x10>)
 8001142:	f001 fef1 	bl	8002f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000038c 	.word	0x2000038c

08001150 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <USART2_IRQHandler+0x10>)
 8001156:	f002 fb6d 	bl	8003834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000524 	.word	0x20000524

08001164 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <USART3_IRQHandler+0x10>)
 800116a:	f002 fb63 	bl	8003834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000045c 	.word	0x2000045c

08001178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800117c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001180:	f001 f9f2 	bl	8002568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f003 fa00 	bl	80045bc <__errno>
 80011bc:	4602      	mov	r2, r0
 80011be:	230c      	movs	r3, #12
 80011c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20005000 	.word	0x20005000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	20000210 	.word	0x20000210
 80011f0:	20000570 	.word	0x20000570

080011f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_TIM1_Init+0x9c>)
 800121e:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <MX_TIM1_Init+0xa0>)
 8001220:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_TIM1_Init+0x9c>)
 8001224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001228:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_TIM1_Init+0x9c>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_TIM1_Init+0x9c>)
 8001232:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001236:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_TIM1_Init+0x9c>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_TIM1_Init+0x9c>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM1_Init+0x9c>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800124a:	4814      	ldr	r0, [pc, #80]	; (800129c <MX_TIM1_Init+0x9c>)
 800124c:	f001 fdca 	bl	8002de4 <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001256:	f7ff febf 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_TIM1_Init+0x9c>)
 8001268:	f001 ff66 	bl	8003138 <HAL_TIM_ConfigClockSource>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001272:	f7ff feb1 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_TIM1_Init+0x9c>)
 8001284:	f002 f92c 	bl	80034e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800128e:	f7ff fea3 	bl	8000fd8 <Error_Handler>
  }

}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000344 	.word	0x20000344
 80012a0:	40012c00 	.word	0x40012c00

080012a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_TIM2_Init+0x94>)
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <MX_TIM2_Init+0x94>)
 80012ca:	223f      	movs	r2, #63	; 0x3f
 80012cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_TIM2_Init+0x94>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_TIM2_Init+0x94>)
 80012d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_TIM2_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <MX_TIM2_Init+0x94>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e8:	4813      	ldr	r0, [pc, #76]	; (8001338 <MX_TIM2_Init+0x94>)
 80012ea:	f001 fd7b 	bl	8002de4 <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012f4:	f7ff fe70 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <MX_TIM2_Init+0x94>)
 8001306:	f001 ff17 	bl	8003138 <HAL_TIM_ConfigClockSource>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001310:	f7ff fe62 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_TIM2_Init+0x94>)
 8001322:	f002 f8dd 	bl	80034e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800132c:	f7ff fe54 	bl	8000fd8 <Error_Handler>
  }

}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000038c 	.word	0x2000038c

0800133c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a26      	ldr	r2, [pc, #152]	; (80013e4 <HAL_TIM_Base_MspInit+0xa8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12c      	bne.n	80013a8 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_TIM_Base_MspInit+0xac>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <HAL_TIM_Base_MspInit+0xac>)
 8001354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_TIM_Base_MspInit+0xac>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2018      	movs	r0, #24
 800136c:	f000 fcbf 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001370:	2018      	movs	r0, #24
 8001372:	f000 fcd8 	bl	8001d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2019      	movs	r0, #25
 800137c:	f000 fcb7 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001380:	2019      	movs	r0, #25
 8001382:	f000 fcd0 	bl	8001d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	201a      	movs	r0, #26
 800138c:	f000 fcaf 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001390:	201a      	movs	r0, #26
 8001392:	f000 fcc8 	bl	8001d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	201b      	movs	r0, #27
 800139c:	f000 fca7 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013a0:	201b      	movs	r0, #27
 80013a2:	f000 fcc0 	bl	8001d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013a6:	e018      	b.n	80013da <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b0:	d113      	bne.n	80013da <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_TIM_Base_MspInit+0xac>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <HAL_TIM_Base_MspInit+0xac>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_TIM_Base_MspInit+0xac>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	201c      	movs	r0, #28
 80013d0:	f000 fc8d 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d4:	201c      	movs	r0, #28
 80013d6:	f000 fca6 	bl	8001d26 <HAL_NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	40021000 	.word	0x40021000

080013ec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <MX_USART2_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001404:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001414:	220c      	movs	r2, #12
 8001416:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001426:	f002 f8cb 	bl	80035c0 <HAL_UART_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001430:	f7ff fdd2 	bl	8000fd8 <Error_Handler>
  }

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000524 	.word	0x20000524
 800143c:	40004400 	.word	0x40004400

08001440 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_USART3_UART_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_USART3_UART_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_USART3_UART_Init+0x4c>)
 800144c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001450:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_USART3_UART_Init+0x4c>)
 8001454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001458:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_USART3_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_USART3_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_USART3_UART_Init+0x4c>)
 8001468:	220c      	movs	r2, #12
 800146a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MX_USART3_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_USART3_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_USART3_UART_Init+0x4c>)
 800147a:	f002 f8a1 	bl	80035c0 <HAL_UART_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8001484:	f7ff fda8 	bl	8000fd8 <Error_Handler>
  }

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000045c 	.word	0x2000045c
 8001490:	40004800 	.word	0x40004800

08001494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	; 0x30
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a8f      	ldr	r2, [pc, #572]	; (80016ec <HAL_UART_MspInit+0x258>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d178      	bne.n	80015a6 <HAL_UART_MspInit+0x112>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b4:	4b8e      	ldr	r3, [pc, #568]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a8d      	ldr	r2, [pc, #564]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80014ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014be:	61d3      	str	r3, [r2, #28]
 80014c0:	4b8b      	ldr	r3, [pc, #556]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a87      	ldr	r2, [pc, #540]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014e4:	230c      	movs	r3, #12
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2302      	movs	r3, #2
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	487f      	ldr	r0, [pc, #508]	; (80016f4 <HAL_UART_MspInit+0x260>)
 80014f8:	f000 fe94 	bl	8002224 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80014fc:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <HAL_UART_MspInit+0x264>)
 80014fe:	4a7f      	ldr	r2, [pc, #508]	; (80016fc <HAL_UART_MspInit+0x268>)
 8001500:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001502:	4b7d      	ldr	r3, [pc, #500]	; (80016f8 <HAL_UART_MspInit+0x264>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	4b7b      	ldr	r3, [pc, #492]	; (80016f8 <HAL_UART_MspInit+0x264>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	4b7a      	ldr	r3, [pc, #488]	; (80016f8 <HAL_UART_MspInit+0x264>)
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001514:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <HAL_UART_MspInit+0x264>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151a:	4b77      	ldr	r3, [pc, #476]	; (80016f8 <HAL_UART_MspInit+0x264>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001520:	4b75      	ldr	r3, [pc, #468]	; (80016f8 <HAL_UART_MspInit+0x264>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001526:	4b74      	ldr	r3, [pc, #464]	; (80016f8 <HAL_UART_MspInit+0x264>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800152c:	4872      	ldr	r0, [pc, #456]	; (80016f8 <HAL_UART_MspInit+0x264>)
 800152e:	f000 fc15 	bl	8001d5c <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8001538:	f7ff fd4e 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a6e      	ldr	r2, [pc, #440]	; (80016f8 <HAL_UART_MspInit+0x264>)
 8001540:	635a      	str	r2, [r3, #52]	; 0x34
 8001542:	4a6d      	ldr	r2, [pc, #436]	; (80016f8 <HAL_UART_MspInit+0x264>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001548:	4b6d      	ldr	r3, [pc, #436]	; (8001700 <HAL_UART_MspInit+0x26c>)
 800154a:	4a6e      	ldr	r2, [pc, #440]	; (8001704 <HAL_UART_MspInit+0x270>)
 800154c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800154e:	4b6c      	ldr	r3, [pc, #432]	; (8001700 <HAL_UART_MspInit+0x26c>)
 8001550:	2210      	movs	r2, #16
 8001552:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001554:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <HAL_UART_MspInit+0x26c>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155a:	4b69      	ldr	r3, [pc, #420]	; (8001700 <HAL_UART_MspInit+0x26c>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001560:	4b67      	ldr	r3, [pc, #412]	; (8001700 <HAL_UART_MspInit+0x26c>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001566:	4b66      	ldr	r3, [pc, #408]	; (8001700 <HAL_UART_MspInit+0x26c>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800156c:	4b64      	ldr	r3, [pc, #400]	; (8001700 <HAL_UART_MspInit+0x26c>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001572:	4b63      	ldr	r3, [pc, #396]	; (8001700 <HAL_UART_MspInit+0x26c>)
 8001574:	2200      	movs	r2, #0
 8001576:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001578:	4861      	ldr	r0, [pc, #388]	; (8001700 <HAL_UART_MspInit+0x26c>)
 800157a:	f000 fbef 	bl	8001d5c <HAL_DMA_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001584:	f7ff fd28 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a5d      	ldr	r2, [pc, #372]	; (8001700 <HAL_UART_MspInit+0x26c>)
 800158c:	631a      	str	r2, [r3, #48]	; 0x30
 800158e:	4a5c      	ldr	r2, [pc, #368]	; (8001700 <HAL_UART_MspInit+0x26c>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2026      	movs	r0, #38	; 0x26
 800159a:	f000 fba8 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159e:	2026      	movs	r0, #38	; 0x26
 80015a0:	f000 fbc1 	bl	8001d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015a4:	e09d      	b.n	80016e2 <HAL_UART_MspInit+0x24e>
  else if(uartHandle->Instance==USART3)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a57      	ldr	r2, [pc, #348]	; (8001708 <HAL_UART_MspInit+0x274>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	f040 8098 	bne.w	80016e2 <HAL_UART_MspInit+0x24e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b2:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <HAL_UART_MspInit+0x25c>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4845      	ldr	r0, [pc, #276]	; (800170c <HAL_UART_MspInit+0x278>)
 80015f8:	f000 fe14 	bl	8002224 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	483e      	ldr	r0, [pc, #248]	; (800170c <HAL_UART_MspInit+0x278>)
 8001612:	f000 fe07 	bl	8002224 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001616:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <HAL_UART_MspInit+0x27c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001626:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001634:	4a36      	ldr	r2, [pc, #216]	; (8001710 <HAL_UART_MspInit+0x27c>)
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_UART_MspInit+0x280>)
 800163c:	4a36      	ldr	r2, [pc, #216]	; (8001718 <HAL_UART_MspInit+0x284>)
 800163e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001640:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_UART_MspInit+0x280>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <HAL_UART_MspInit+0x280>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_UART_MspInit+0x280>)
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_UART_MspInit+0x280>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_UART_MspInit+0x280>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_UART_MspInit+0x280>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_UART_MspInit+0x280>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800166a:	482a      	ldr	r0, [pc, #168]	; (8001714 <HAL_UART_MspInit+0x280>)
 800166c:	f000 fb76 	bl	8001d5c <HAL_DMA_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_UART_MspInit+0x1e6>
      Error_Handler();
 8001676:	f7ff fcaf 	bl	8000fd8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a25      	ldr	r2, [pc, #148]	; (8001714 <HAL_UART_MspInit+0x280>)
 800167e:	635a      	str	r2, [r3, #52]	; 0x34
 8001680:	4a24      	ldr	r2, [pc, #144]	; (8001714 <HAL_UART_MspInit+0x280>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <HAL_UART_MspInit+0x288>)
 8001688:	4a25      	ldr	r2, [pc, #148]	; (8001720 <HAL_UART_MspInit+0x28c>)
 800168a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_UART_MspInit+0x288>)
 800168e:	2210      	movs	r2, #16
 8001690:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_UART_MspInit+0x288>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_UART_MspInit+0x288>)
 800169a:	2280      	movs	r2, #128	; 0x80
 800169c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_UART_MspInit+0x288>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_UART_MspInit+0x288>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_UART_MspInit+0x288>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_UART_MspInit+0x288>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80016b6:	4819      	ldr	r0, [pc, #100]	; (800171c <HAL_UART_MspInit+0x288>)
 80016b8:	f000 fb50 	bl	8001d5c <HAL_DMA_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_UART_MspInit+0x232>
      Error_Handler();
 80016c2:	f7ff fc89 	bl	8000fd8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <HAL_UART_MspInit+0x288>)
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <HAL_UART_MspInit+0x288>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2027      	movs	r0, #39	; 0x27
 80016d8:	f000 fb09 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016dc:	2027      	movs	r0, #39	; 0x27
 80016de:	f000 fb22 	bl	8001d26 <HAL_NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3730      	adds	r7, #48	; 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40004400 	.word	0x40004400
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	200003d4 	.word	0x200003d4
 80016fc:	4002006c 	.word	0x4002006c
 8001700:	200004e0 	.word	0x200004e0
 8001704:	40020080 	.word	0x40020080
 8001708:	40004800 	.word	0x40004800
 800170c:	40011000 	.word	0x40011000
 8001710:	40010000 	.word	0x40010000
 8001714:	20000418 	.word	0x20000418
 8001718:	40020030 	.word	0x40020030
 800171c:	2000049c 	.word	0x2000049c
 8001720:	4002001c 	.word	0x4002001c

08001724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001724:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001726:	e003      	b.n	8001730 <LoopCopyDataInit>

08001728 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800172a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800172c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800172e:	3104      	adds	r1, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001734:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001736:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001738:	d3f6      	bcc.n	8001728 <CopyDataInit>
  ldr r2, =_sbss
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800173c:	e002      	b.n	8001744 <LoopFillZerobss>

0800173e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001740:	f842 3b04 	str.w	r3, [r2], #4

08001744 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001746:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001748:	d3f9      	bcc.n	800173e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800174a:	f7ff fd53 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174e:	f002 ff3b 	bl	80045c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001752:	f7ff fa73 	bl	8000c3c <main>
  bx lr
 8001756:	4770      	bx	lr
  ldr r3, =_sidata
 8001758:	080081c8 	.word	0x080081c8
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001760:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001764:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001768:	2000056c 	.word	0x2000056c

0800176c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC1_2_IRQHandler>
	...

08001770 <delay>:
 *      Author: Łukasz
 */
#include"DS18B20.h"
#include"tim.h"
void delay (uint16_t time)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <delay+0x2c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8001782:	bf00      	nop
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <delay+0x2c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	429a      	cmp	r2, r3
 800178e:	d3f9      	bcc.n	8001784 <delay+0x14>
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000038c 	.word	0x2000038c

080017a0 <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2302      	movs	r3, #2
 80017c4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fd29 	bl	8002224 <HAL_GPIO_Init>
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fd0c 	bl	8002224 <HAL_GPIO_Init>
}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800181e:	2120      	movs	r1, #32
 8001820:	4813      	ldr	r0, [pc, #76]	; (8001870 <DS18B20_Start+0x5c>)
 8001822:	f7ff ffbd 	bl	80017a0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8001826:	2200      	movs	r2, #0
 8001828:	2120      	movs	r1, #32
 800182a:	4811      	ldr	r0, [pc, #68]	; (8001870 <DS18B20_Start+0x5c>)
 800182c:	f000 fe6b 	bl	8002506 <HAL_GPIO_WritePin>
	delay (500);   // delay according to datasheet
 8001830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001834:	f7ff ff9c 	bl	8001770 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001838:	2120      	movs	r1, #32
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <DS18B20_Start+0x5c>)
 800183c:	f7ff ffcd 	bl	80017da <Set_Pin_Input>
	delay (100);    // delay according to datasheet
 8001840:	2064      	movs	r0, #100	; 0x64
 8001842:	f7ff ff95 	bl	8001770 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8001846:	2120      	movs	r1, #32
 8001848:	4809      	ldr	r0, [pc, #36]	; (8001870 <DS18B20_Start+0x5c>)
 800184a:	f000 fe45 	bl	80024d8 <HAL_GPIO_ReadPin>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <DS18B20_Start+0x46>
 8001854:	2301      	movs	r3, #1
 8001856:	71fb      	strb	r3, [r7, #7]
 8001858:	e001      	b.n	800185e <DS18B20_Start+0x4a>
	else Response = -1;
 800185a:	23ff      	movs	r3, #255	; 0xff
 800185c:	71fb      	strb	r3, [r7, #7]

	delay (500); // 480 us delay totally.
 800185e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001862:	f7ff ff85 	bl	8001770 <delay>

	return Response;
 8001866:	79fb      	ldrb	r3, [r7, #7]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40010c00 	.word	0x40010c00

08001874 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800187e:	2120      	movs	r1, #32
 8001880:	481d      	ldr	r0, [pc, #116]	; (80018f8 <DS18B20_Write+0x84>)
 8001882:	f7ff ff8d 	bl	80017a0 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	e02e      	b.n	80018ea <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800188c:	79fa      	ldrb	r2, [r7, #7]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	fa42 f303 	asr.w	r3, r2, r3
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800189c:	2120      	movs	r1, #32
 800189e:	4816      	ldr	r0, [pc, #88]	; (80018f8 <DS18B20_Write+0x84>)
 80018a0:	f7ff ff7e 	bl	80017a0 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80018a4:	2200      	movs	r2, #0
 80018a6:	2120      	movs	r1, #32
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <DS18B20_Write+0x84>)
 80018aa:	f000 fe2c 	bl	8002506 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff ff5e 	bl	8001770 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80018b4:	2120      	movs	r1, #32
 80018b6:	4810      	ldr	r0, [pc, #64]	; (80018f8 <DS18B20_Write+0x84>)
 80018b8:	f7ff ff8f 	bl	80017da <Set_Pin_Input>
			delay (60);  // wait for 60 us
 80018bc:	203c      	movs	r0, #60	; 0x3c
 80018be:	f7ff ff57 	bl	8001770 <delay>
 80018c2:	e00f      	b.n	80018e4 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80018c4:	2120      	movs	r1, #32
 80018c6:	480c      	ldr	r0, [pc, #48]	; (80018f8 <DS18B20_Write+0x84>)
 80018c8:	f7ff ff6a 	bl	80017a0 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80018cc:	2200      	movs	r2, #0
 80018ce:	2120      	movs	r1, #32
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <DS18B20_Write+0x84>)
 80018d2:	f000 fe18 	bl	8002506 <HAL_GPIO_WritePin>
			delay (60);  // wait for 60 us
 80018d6:	203c      	movs	r0, #60	; 0x3c
 80018d8:	f7ff ff4a 	bl	8001770 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80018dc:	2120      	movs	r1, #32
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <DS18B20_Write+0x84>)
 80018e0:	f7ff ff7b 	bl	80017da <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b07      	cmp	r3, #7
 80018ee:	ddcd      	ble.n	800188c <DS18B20_Write+0x18>
		}
	}
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40010c00 	.word	0x40010c00

080018fc <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001902:	2300      	movs	r3, #0
 8001904:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001906:	2120      	movs	r1, #32
 8001908:	481a      	ldr	r0, [pc, #104]	; (8001974 <DS18B20_Read+0x78>)
 800190a:	f7ff ff66 	bl	80017da <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	e026      	b.n	8001962 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001914:	2120      	movs	r1, #32
 8001916:	4817      	ldr	r0, [pc, #92]	; (8001974 <DS18B20_Read+0x78>)
 8001918:	f7ff ff42 	bl	80017a0 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 800191c:	2200      	movs	r2, #0
 800191e:	2120      	movs	r1, #32
 8001920:	4814      	ldr	r0, [pc, #80]	; (8001974 <DS18B20_Read+0x78>)
 8001922:	f000 fdf0 	bl	8002506 <HAL_GPIO_WritePin>
		delay (5);  // wait for > 1us
 8001926:	2005      	movs	r0, #5
 8001928:	f7ff ff22 	bl	8001770 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800192c:	2120      	movs	r1, #32
 800192e:	4811      	ldr	r0, [pc, #68]	; (8001974 <DS18B20_Read+0x78>)
 8001930:	f7ff ff53 	bl	80017da <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001934:	2120      	movs	r1, #32
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <DS18B20_Read+0x78>)
 8001938:	f000 fdce 	bl	80024d8 <HAL_GPIO_ReadPin>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8001942:	2201      	movs	r2, #1
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	b25a      	sxtb	r2, r3
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4313      	orrs	r3, r2
 8001952:	b25b      	sxtb	r3, r3
 8001954:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);  // wait for 60 us
 8001956:	203c      	movs	r0, #60	; 0x3c
 8001958:	f7ff ff0a 	bl	8001770 <delay>
	for (int i=0;i<8;i++)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b07      	cmp	r3, #7
 8001966:	ddd5      	ble.n	8001914 <DS18B20_Read+0x18>
	}
	return value;
 8001968:	79fb      	ldrb	r3, [r7, #7]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40010c00 	.word	0x40010c00

08001978 <DS18B20_Full>:
void DS18B20_Full(double *Temperature){
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	static uint8_t Presence = 0;
	static uint8_t  Temp_byte1, Temp_byte2;
	static uint16_t TEMP;
		  Presence = DS18B20_Start ();
 8001980:	f7ff ff48 	bl	8001814 <DS18B20_Start>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <DS18B20_Full+0xac>)
 800198a:	701a      	strb	r2, [r3, #0]
		  	  HAL_Delay (1);
 800198c:	2001      	movs	r0, #1
 800198e:	f000 f8b5 	bl	8001afc <HAL_Delay>
		  	  DS18B20_Write (0xCC);  // skip ROM
 8001992:	20cc      	movs	r0, #204	; 0xcc
 8001994:	f7ff ff6e 	bl	8001874 <DS18B20_Write>
		  	  DS18B20_Write (0x44);  // convert t
 8001998:	2044      	movs	r0, #68	; 0x44
 800199a:	f7ff ff6b 	bl	8001874 <DS18B20_Write>
		  	  HAL_Delay (800);
 800199e:	f44f 7048 	mov.w	r0, #800	; 0x320
 80019a2:	f000 f8ab 	bl	8001afc <HAL_Delay>

		  	  Presence = DS18B20_Start ();
 80019a6:	f7ff ff35 	bl	8001814 <DS18B20_Start>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <DS18B20_Full+0xac>)
 80019b0:	701a      	strb	r2, [r3, #0]
		        HAL_Delay(1);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f000 f8a2 	bl	8001afc <HAL_Delay>
		        DS18B20_Write (0xCC);  // skip ROM
 80019b8:	20cc      	movs	r0, #204	; 0xcc
 80019ba:	f7ff ff5b 	bl	8001874 <DS18B20_Write>
		        DS18B20_Write (0xBE);  // Read Scratch-pad
 80019be:	20be      	movs	r0, #190	; 0xbe
 80019c0:	f7ff ff58 	bl	8001874 <DS18B20_Write>

		        Temp_byte1 = DS18B20_Read();
 80019c4:	f7ff ff9a 	bl	80018fc <DS18B20_Read>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <DS18B20_Full+0xb0>)
 80019ce:	701a      	strb	r2, [r3, #0]
		  	  Temp_byte2 = DS18B20_Read();
 80019d0:	f7ff ff94 	bl	80018fc <DS18B20_Read>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <DS18B20_Full+0xb4>)
 80019da:	701a      	strb	r2, [r3, #0]
		  	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <DS18B20_Full+0xb4>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <DS18B20_Full+0xb0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <DS18B20_Full+0xb8>)
 80019f2:	801a      	strh	r2, [r3, #0]
		  	  *Temperature = (double)TEMP/16;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <DS18B20_Full+0xb8>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fcf3 	bl	80003e4 <__aeabi_ui2d>
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <DS18B20_Full+0xbc>)
 8001a04:	f7fe fe92 	bl	800072c <__aeabi_ddiv>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	e9c2 3400 	strd	r3, r4, [r2]


		  	  HAL_Delay(1000);
 8001a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a16:	f000 f871 	bl	8001afc <HAL_Delay>
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000214 	.word	0x20000214
 8001a28:	20000215 	.word	0x20000215
 8001a2c:	20000216 	.word	0x20000216
 8001a30:	20000218 	.word	0x20000218
 8001a34:	40300000 	.word	0x40300000

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_Init+0x28>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_Init+0x28>)
 8001a42:	f043 0310 	orr.w	r3, r3, #16
 8001a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 f945 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fac6 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40022000 	.word	0x40022000

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f95d 	bl	8001d42 <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 f925 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_IncTick+0x1c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_IncTick+0x20>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <HAL_IncTick+0x20>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000564 	.word	0x20000564

08001ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <HAL_GetTick+0x10>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000564 	.word	0x20000564

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff fff0 	bl	8001ae8 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d005      	beq.n	8001b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_Delay+0x40>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b22:	bf00      	nop
 8001b24:	f7ff ffe0 	bl	8001ae8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d8f7      	bhi.n	8001b24 <HAL_Delay+0x28>
  {
  }
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000008 	.word	0x20000008

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4906      	ldr	r1, [pc, #24]	; (8001bd8 <__NVIC_EnableIRQ+0x34>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	; (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff90 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff2d 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff42 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff90 	bl	8001c30 <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5f 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff35 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffa2 	bl	8001c94 <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e043      	b.n	8001dfa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_DMA_Init+0xa8>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_DMA_Init+0xac>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_DMA_Init+0xb0>)
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001da6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	bffdfff8 	.word	0xbffdfff8
 8001e08:	cccccccd 	.word	0xcccccccd
 8001e0c:	40020000 	.word	0x40020000

08001e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_DMA_Start_IT+0x20>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e04a      	b.n	8001ec6 <HAL_DMA_Start_IT+0xb6>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d13a      	bne.n	8001eb8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f9ae 	bl	80021c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 020e 	orr.w	r2, r2, #14
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e00f      	b.n	8001ea6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0204 	bic.w	r2, r2, #4
 8001e94:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 020a 	orr.w	r2, r2, #10
 8001ea4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e005      	b.n	8001ec4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d005      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e051      	b.n	8001f96 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 020e 	bic.w	r2, r2, #14
 8001f00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <HAL_DMA_Abort_IT+0xd0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d029      	beq.n	8001f70 <HAL_DMA_Abort_IT+0xa0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a20      	ldr	r2, [pc, #128]	; (8001fa4 <HAL_DMA_Abort_IT+0xd4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d022      	beq.n	8001f6c <HAL_DMA_Abort_IT+0x9c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_DMA_Abort_IT+0xd8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01a      	beq.n	8001f66 <HAL_DMA_Abort_IT+0x96>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_DMA_Abort_IT+0xdc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d012      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x90>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_DMA_Abort_IT+0xe0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00a      	beq.n	8001f5a <HAL_DMA_Abort_IT+0x8a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <HAL_DMA_Abort_IT+0xe4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d102      	bne.n	8001f54 <HAL_DMA_Abort_IT+0x84>
 8001f4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f52:	e00e      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f58:	e00b      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5e:	e008      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f64:	e005      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6a:	e002      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	e000      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f70:	2301      	movs	r3, #1
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_DMA_Abort_IT+0xe8>)
 8001f74:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	4798      	blx	r3
    } 
  }
  return status;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40020008 	.word	0x40020008
 8001fa4:	4002001c 	.word	0x4002001c
 8001fa8:	40020030 	.word	0x40020030
 8001fac:	40020044 	.word	0x40020044
 8001fb0:	40020058 	.word	0x40020058
 8001fb4:	4002006c 	.word	0x4002006c
 8001fb8:	40020000 	.word	0x40020000

08001fbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	2204      	movs	r2, #4
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d04f      	beq.n	8002084 <HAL_DMA_IRQHandler+0xc8>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d04a      	beq.n	8002084 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0204 	bic.w	r2, r2, #4
 800200a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a66      	ldr	r2, [pc, #408]	; (80021ac <HAL_DMA_IRQHandler+0x1f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d029      	beq.n	800206a <HAL_DMA_IRQHandler+0xae>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a65      	ldr	r2, [pc, #404]	; (80021b0 <HAL_DMA_IRQHandler+0x1f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_IRQHandler+0xaa>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a63      	ldr	r2, [pc, #396]	; (80021b4 <HAL_DMA_IRQHandler+0x1f8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01a      	beq.n	8002060 <HAL_DMA_IRQHandler+0xa4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a62      	ldr	r2, [pc, #392]	; (80021b8 <HAL_DMA_IRQHandler+0x1fc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d012      	beq.n	800205a <HAL_DMA_IRQHandler+0x9e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a60      	ldr	r2, [pc, #384]	; (80021bc <HAL_DMA_IRQHandler+0x200>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00a      	beq.n	8002054 <HAL_DMA_IRQHandler+0x98>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a5f      	ldr	r2, [pc, #380]	; (80021c0 <HAL_DMA_IRQHandler+0x204>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d102      	bne.n	800204e <HAL_DMA_IRQHandler+0x92>
 8002048:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800204c:	e00e      	b.n	800206c <HAL_DMA_IRQHandler+0xb0>
 800204e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002052:	e00b      	b.n	800206c <HAL_DMA_IRQHandler+0xb0>
 8002054:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002058:	e008      	b.n	800206c <HAL_DMA_IRQHandler+0xb0>
 800205a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800205e:	e005      	b.n	800206c <HAL_DMA_IRQHandler+0xb0>
 8002060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002064:	e002      	b.n	800206c <HAL_DMA_IRQHandler+0xb0>
 8002066:	2340      	movs	r3, #64	; 0x40
 8002068:	e000      	b.n	800206c <HAL_DMA_IRQHandler+0xb0>
 800206a:	2304      	movs	r3, #4
 800206c:	4a55      	ldr	r2, [pc, #340]	; (80021c4 <HAL_DMA_IRQHandler+0x208>)
 800206e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8094 	beq.w	80021a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002082:	e08e      	b.n	80021a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	2202      	movs	r2, #2
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d056      	beq.n	8002142 <HAL_DMA_IRQHandler+0x186>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d051      	beq.n	8002142 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 020a 	bic.w	r2, r2, #10
 80020ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a38      	ldr	r2, [pc, #224]	; (80021ac <HAL_DMA_IRQHandler+0x1f0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d029      	beq.n	8002122 <HAL_DMA_IRQHandler+0x166>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a37      	ldr	r2, [pc, #220]	; (80021b0 <HAL_DMA_IRQHandler+0x1f4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d022      	beq.n	800211e <HAL_DMA_IRQHandler+0x162>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a35      	ldr	r2, [pc, #212]	; (80021b4 <HAL_DMA_IRQHandler+0x1f8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01a      	beq.n	8002118 <HAL_DMA_IRQHandler+0x15c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a34      	ldr	r2, [pc, #208]	; (80021b8 <HAL_DMA_IRQHandler+0x1fc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d012      	beq.n	8002112 <HAL_DMA_IRQHandler+0x156>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a32      	ldr	r2, [pc, #200]	; (80021bc <HAL_DMA_IRQHandler+0x200>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00a      	beq.n	800210c <HAL_DMA_IRQHandler+0x150>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <HAL_DMA_IRQHandler+0x204>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d102      	bne.n	8002106 <HAL_DMA_IRQHandler+0x14a>
 8002100:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002104:	e00e      	b.n	8002124 <HAL_DMA_IRQHandler+0x168>
 8002106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210a:	e00b      	b.n	8002124 <HAL_DMA_IRQHandler+0x168>
 800210c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002110:	e008      	b.n	8002124 <HAL_DMA_IRQHandler+0x168>
 8002112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002116:	e005      	b.n	8002124 <HAL_DMA_IRQHandler+0x168>
 8002118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800211c:	e002      	b.n	8002124 <HAL_DMA_IRQHandler+0x168>
 800211e:	2320      	movs	r3, #32
 8002120:	e000      	b.n	8002124 <HAL_DMA_IRQHandler+0x168>
 8002122:	2302      	movs	r3, #2
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_DMA_IRQHandler+0x208>)
 8002126:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d034      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002140:	e02f      	b.n	80021a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2208      	movs	r2, #8
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d028      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x1e8>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d023      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 020e 	bic.w	r2, r2, #14
 800216a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	2101      	movs	r1, #1
 8002176:	fa01 f202 	lsl.w	r2, r1, r2
 800217a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	4798      	blx	r3
    }
  }
  return;
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
}
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40020008 	.word	0x40020008
 80021b0:	4002001c 	.word	0x4002001c
 80021b4:	40020030 	.word	0x40020030
 80021b8:	40020044 	.word	0x40020044
 80021bc:	40020058 	.word	0x40020058
 80021c0:	4002006c 	.word	0x4002006c
 80021c4:	40020000 	.word	0x40020000

080021c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d108      	bne.n	8002208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002206:	e007      	b.n	8002218 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
	...

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002236:	e127      	b.n	8002488 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002238:	2201      	movs	r2, #1
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	429a      	cmp	r2, r3
 8002252:	f040 8116 	bne.w	8002482 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b12      	cmp	r3, #18
 800225c:	d034      	beq.n	80022c8 <HAL_GPIO_Init+0xa4>
 800225e:	2b12      	cmp	r3, #18
 8002260:	d80d      	bhi.n	800227e <HAL_GPIO_Init+0x5a>
 8002262:	2b02      	cmp	r3, #2
 8002264:	d02b      	beq.n	80022be <HAL_GPIO_Init+0x9a>
 8002266:	2b02      	cmp	r3, #2
 8002268:	d804      	bhi.n	8002274 <HAL_GPIO_Init+0x50>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d031      	beq.n	80022d2 <HAL_GPIO_Init+0xae>
 800226e:	2b01      	cmp	r3, #1
 8002270:	d01c      	beq.n	80022ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002272:	e048      	b.n	8002306 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002274:	2b03      	cmp	r3, #3
 8002276:	d043      	beq.n	8002300 <HAL_GPIO_Init+0xdc>
 8002278:	2b11      	cmp	r3, #17
 800227a:	d01b      	beq.n	80022b4 <HAL_GPIO_Init+0x90>
          break;
 800227c:	e043      	b.n	8002306 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800227e:	4a89      	ldr	r2, [pc, #548]	; (80024a4 <HAL_GPIO_Init+0x280>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d026      	beq.n	80022d2 <HAL_GPIO_Init+0xae>
 8002284:	4a87      	ldr	r2, [pc, #540]	; (80024a4 <HAL_GPIO_Init+0x280>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d806      	bhi.n	8002298 <HAL_GPIO_Init+0x74>
 800228a:	4a87      	ldr	r2, [pc, #540]	; (80024a8 <HAL_GPIO_Init+0x284>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d020      	beq.n	80022d2 <HAL_GPIO_Init+0xae>
 8002290:	4a86      	ldr	r2, [pc, #536]	; (80024ac <HAL_GPIO_Init+0x288>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01d      	beq.n	80022d2 <HAL_GPIO_Init+0xae>
          break;
 8002296:	e036      	b.n	8002306 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002298:	4a85      	ldr	r2, [pc, #532]	; (80024b0 <HAL_GPIO_Init+0x28c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0xae>
 800229e:	4a85      	ldr	r2, [pc, #532]	; (80024b4 <HAL_GPIO_Init+0x290>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d016      	beq.n	80022d2 <HAL_GPIO_Init+0xae>
 80022a4:	4a84      	ldr	r2, [pc, #528]	; (80024b8 <HAL_GPIO_Init+0x294>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0xae>
          break;
 80022aa:	e02c      	b.n	8002306 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	623b      	str	r3, [r7, #32]
          break;
 80022b2:	e028      	b.n	8002306 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	3304      	adds	r3, #4
 80022ba:	623b      	str	r3, [r7, #32]
          break;
 80022bc:	e023      	b.n	8002306 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	3308      	adds	r3, #8
 80022c4:	623b      	str	r3, [r7, #32]
          break;
 80022c6:	e01e      	b.n	8002306 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	330c      	adds	r3, #12
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e019      	b.n	8002306 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022da:	2304      	movs	r3, #4
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e012      	b.n	8002306 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e8:	2308      	movs	r3, #8
 80022ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	611a      	str	r2, [r3, #16]
          break;
 80022f2:	e008      	b.n	8002306 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f4:	2308      	movs	r3, #8
 80022f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	615a      	str	r2, [r3, #20]
          break;
 80022fe:	e002      	b.n	8002306 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
          break;
 8002304:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2bff      	cmp	r3, #255	; 0xff
 800230a:	d801      	bhi.n	8002310 <HAL_GPIO_Init+0xec>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	e001      	b.n	8002314 <HAL_GPIO_Init+0xf0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2bff      	cmp	r3, #255	; 0xff
 800231a:	d802      	bhi.n	8002322 <HAL_GPIO_Init+0xfe>
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	e002      	b.n	8002328 <HAL_GPIO_Init+0x104>
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	3b08      	subs	r3, #8
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	210f      	movs	r1, #15
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	401a      	ands	r2, r3
 800233a:	6a39      	ldr	r1, [r7, #32]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	431a      	orrs	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8096 	beq.w	8002482 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002356:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_GPIO_Init+0x298>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_GPIO_Init+0x298>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6193      	str	r3, [r2, #24]
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_GPIO_Init+0x298>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800236e:	4a54      	ldr	r2, [pc, #336]	; (80024c0 <HAL_GPIO_Init+0x29c>)
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4013      	ands	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_GPIO_Init+0x2a0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0x19e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4a      	ldr	r2, [pc, #296]	; (80024c8 <HAL_GPIO_Init+0x2a4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_GPIO_Init+0x19a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a49      	ldr	r2, [pc, #292]	; (80024cc <HAL_GPIO_Init+0x2a8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x196>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a48      	ldr	r2, [pc, #288]	; (80024d0 <HAL_GPIO_Init+0x2ac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_GPIO_Init+0x192>
 80023b2:	2303      	movs	r3, #3
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x1a0>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x1a0>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x1a0>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x1a0>
 80023c2:	2300      	movs	r3, #0
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023d4:	493a      	ldr	r1, [pc, #232]	; (80024c0 <HAL_GPIO_Init+0x29c>)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d006      	beq.n	80023fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4938      	ldr	r1, [pc, #224]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
 80023fa:	e006      	b.n	800240a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	43db      	mvns	r3, r3
 8002404:	4933      	ldr	r1, [pc, #204]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002406:	4013      	ands	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d006      	beq.n	8002424 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002416:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	492e      	ldr	r1, [pc, #184]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
 8002422:	e006      	b.n	8002432 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	43db      	mvns	r3, r3
 800242c:	4929      	ldr	r1, [pc, #164]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 800242e:	4013      	ands	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800243e:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	4924      	ldr	r1, [pc, #144]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
 800244a:	e006      	b.n	800245a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	43db      	mvns	r3, r3
 8002454:	491f      	ldr	r1, [pc, #124]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002456:	4013      	ands	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	491a      	ldr	r1, [pc, #104]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	60cb      	str	r3, [r1, #12]
 8002472:	e006      	b.n	8002482 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002474:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	43db      	mvns	r3, r3
 800247c:	4915      	ldr	r1, [pc, #84]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 800247e:	4013      	ands	r3, r2
 8002480:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	3301      	adds	r3, #1
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	f47f aed0 	bne.w	8002238 <HAL_GPIO_Init+0x14>
  }
}
 8002498:	bf00      	nop
 800249a:	372c      	adds	r7, #44	; 0x2c
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	10210000 	.word	0x10210000
 80024a8:	10110000 	.word	0x10110000
 80024ac:	10120000 	.word	0x10120000
 80024b0:	10310000 	.word	0x10310000
 80024b4:	10320000 	.word	0x10320000
 80024b8:	10220000 	.word	0x10220000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40010800 	.word	0x40010800
 80024c8:	40010c00 	.word	0x40010c00
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40011400 	.word	0x40011400
 80024d4:	40010400 	.word	0x40010400

080024d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e001      	b.n	80024fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	807b      	strh	r3, [r7, #2]
 8002512:	4613      	mov	r3, r2
 8002514:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002516:	787b      	ldrb	r3, [r7, #1]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251c:	887a      	ldrh	r2, [r7, #2]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002522:	e003      	b.n	800252c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	041a      	lsls	r2, r3, #16
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	611a      	str	r2, [r3, #16]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002548:	887a      	ldrh	r2, [r7, #2]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4013      	ands	r3, r2
 800254e:	041a      	lsls	r2, r3, #16
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43d9      	mvns	r1, r3
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	400b      	ands	r3, r1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f806 	bl	8002598 <HAL_GPIO_EXTI_Callback>
  }
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40010400 	.word	0x40010400

08002598 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e26c      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8087 	beq.w	80026da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025cc:	4b92      	ldr	r3, [pc, #584]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d00c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d8:	4b8f      	ldr	r3, [pc, #572]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d112      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
 80025e4:	4b8c      	ldr	r3, [pc, #560]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d10b      	bne.n	800260a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d06c      	beq.n	80026d8 <HAL_RCC_OscConfig+0x12c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d168      	bne.n	80026d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e246      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x76>
 8002614:	4b80      	ldr	r3, [pc, #512]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7f      	ldr	r2, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e02e      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x98>
 800262a:	4b7b      	ldr	r3, [pc, #492]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a7a      	ldr	r2, [pc, #488]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b78      	ldr	r3, [pc, #480]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a77      	ldr	r2, [pc, #476]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800263c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e01d      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0xbc>
 800264e:	4b72      	ldr	r3, [pc, #456]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a71      	ldr	r2, [pc, #452]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b6f      	ldr	r3, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0xd4>
 8002668:	4b6b      	ldr	r3, [pc, #428]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a6a      	ldr	r2, [pc, #424]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b68      	ldr	r3, [pc, #416]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a67      	ldr	r2, [pc, #412]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff fa2e 	bl	8001ae8 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff fa2a 	bl	8001ae8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e1fa      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0xe4>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fa1a 	bl	8001ae8 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff fa16 	bl	8001ae8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1e6      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x10c>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e6:	4b4c      	ldr	r3, [pc, #304]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026f2:	4b49      	ldr	r3, [pc, #292]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d11c      	bne.n	8002738 <HAL_RCC_OscConfig+0x18c>
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d116      	bne.n	8002738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	4b43      	ldr	r3, [pc, #268]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x176>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1ba      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4939      	ldr	r1, [pc, #228]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	e03a      	b.n	80027ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002740:	4b36      	ldr	r3, [pc, #216]	; (800281c <HAL_RCC_OscConfig+0x270>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7ff f9cf 	bl	8001ae8 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274e:	f7ff f9cb 	bl	8001ae8 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e19b      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4927      	ldr	r1, [pc, #156]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
 8002780:	e015      	b.n	80027ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_RCC_OscConfig+0x270>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff f9ae 	bl	8001ae8 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002790:	f7ff f9aa 	bl	8001ae8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e17a      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d03a      	beq.n	8002830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d019      	beq.n	80027f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7ff f98e 	bl	8001ae8 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d0:	f7ff f98a 	bl	8001ae8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e15a      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ee:	2001      	movs	r0, #1
 80027f0:	f000 fada 	bl	8002da8 <RCC_Delay>
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7ff f974 	bl	8001ae8 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002802:	e00f      	b.n	8002824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002804:	f7ff f970 	bl	8001ae8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d908      	bls.n	8002824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e140      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	42420000 	.word	0x42420000
 8002820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	4b9e      	ldr	r3, [pc, #632]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e9      	bne.n	8002804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a6 	beq.w	800298a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b97      	ldr	r3, [pc, #604]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b94      	ldr	r3, [pc, #592]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a93      	ldr	r2, [pc, #588]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002858:	61d3      	str	r3, [r2, #28]
 800285a:	4b91      	ldr	r3, [pc, #580]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b8e      	ldr	r3, [pc, #568]	; (8002aa4 <HAL_RCC_OscConfig+0x4f8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b8b      	ldr	r3, [pc, #556]	; (8002aa4 <HAL_RCC_OscConfig+0x4f8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a8a      	ldr	r2, [pc, #552]	; (8002aa4 <HAL_RCC_OscConfig+0x4f8>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7ff f931 	bl	8001ae8 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7ff f92d 	bl	8001ae8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	; 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0fd      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b81      	ldr	r3, [pc, #516]	; (8002aa4 <HAL_RCC_OscConfig+0x4f8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x312>
 80028b0:	4b7b      	ldr	r3, [pc, #492]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a7a      	ldr	r2, [pc, #488]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6213      	str	r3, [r2, #32]
 80028bc:	e02d      	b.n	800291a <HAL_RCC_OscConfig+0x36e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x334>
 80028c6:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4a75      	ldr	r2, [pc, #468]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6213      	str	r3, [r2, #32]
 80028d2:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4a72      	ldr	r2, [pc, #456]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	e01c      	b.n	800291a <HAL_RCC_OscConfig+0x36e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x356>
 80028e8:	4b6d      	ldr	r3, [pc, #436]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a6c      	ldr	r2, [pc, #432]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a69      	ldr	r2, [pc, #420]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6213      	str	r3, [r2, #32]
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x36e>
 8002902:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a66      	ldr	r2, [pc, #408]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	4b64      	ldr	r3, [pc, #400]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a63      	ldr	r2, [pc, #396]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7ff f8e1 	bl	8001ae8 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7ff f8dd 	bl	8001ae8 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0ab      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ee      	beq.n	800292a <HAL_RCC_OscConfig+0x37e>
 800294c:	e014      	b.n	8002978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7ff f8cb 	bl	8001ae8 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7ff f8c7 	bl	8001ae8 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e095      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ee      	bne.n	8002956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297e:	4b48      	ldr	r3, [pc, #288]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4a47      	ldr	r2, [pc, #284]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8081 	beq.w	8002a96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d061      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d146      	bne.n	8002a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <HAL_RCC_OscConfig+0x4fc>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7ff f89b 	bl	8001ae8 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7ff f897 	bl	8001ae8 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e067      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d108      	bne.n	80029f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	492d      	ldr	r1, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a19      	ldr	r1, [r3, #32]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	430b      	orrs	r3, r1
 8002a02:	4927      	ldr	r1, [pc, #156]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <HAL_RCC_OscConfig+0x4fc>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7ff f86b 	bl	8001ae8 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7ff f867 	bl	8001ae8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e037      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x46a>
 8002a34:	e02f      	b.n	8002a96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_RCC_OscConfig+0x4fc>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f854 	bl	8001ae8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7ff f850 	bl	8001ae8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e020      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x498>
 8002a62:	e018      	b.n	8002a96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e013      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42420060 	.word	0x42420060

08002aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0d0      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4965      	ldr	r1, [pc, #404]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d040      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e073      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06b      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4936      	ldr	r1, [pc, #216]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe ffa4 	bl	8001ae8 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe ffa0 	bl	8001ae8 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e053      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d210      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4922      	ldr	r1, [pc, #136]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4601      	mov	r1, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	5cd3      	ldrb	r3, [r2, r3]
 8002c4e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1cc>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x1d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe ff02 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08007ecc 	.word	0x08007ecc
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b490      	push	{r4, r7}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c86:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c88:	1d3c      	adds	r4, r7, #4
 8002c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002caa:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x46>
 8002cbe:	e02d      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cc2:	623b      	str	r3, [r7, #32]
      break;
 8002cc4:	e02d      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	0c9b      	lsrs	r3, r3, #18
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	0c5b      	lsrs	r3, r3, #17
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cfe:	fb02 f203 	mul.w	r2, r2, r3
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	e004      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	623b      	str	r3, [r7, #32]
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d1e:	623b      	str	r3, [r7, #32]
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	6a3b      	ldr	r3, [r7, #32]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3728      	adds	r7, #40	; 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc90      	pop	{r4, r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	08007e80 	.word	0x08007e80
 8002d34:	08007e90 	.word	0x08007e90
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	007a1200 	.word	0x007a1200
 8002d40:	003d0900 	.word	0x003d0900

08002d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	20000000 	.word	0x20000000

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d5c:	f7ff fff2 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d60:	4601      	mov	r1, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
 8002d70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08007edc 	.word	0x08007edc

08002d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d88:	4601      	mov	r1, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	0adb      	lsrs	r3, r3, #11
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4a03      	ldr	r2, [pc, #12]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08007edc 	.word	0x08007edc

08002da8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db0:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <RCC_Delay+0x34>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <RCC_Delay+0x38>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	0a5b      	lsrs	r3, r3, #9
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dc4:	bf00      	nop
  }
  while (Delay --);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1e5a      	subs	r2, r3, #1
 8002dca:	60fa      	str	r2, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f9      	bne.n	8002dc4 <RCC_Delay+0x1c>
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	10624dd3 	.word	0x10624dd3

08002de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e041      	b.n	8002e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fa96 	bl	800133c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f000 fa64 	bl	80032f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d001      	beq.n	8002e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e03a      	b.n	8002f12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_TIM_Base_Start_IT+0x98>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00e      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x58>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d009      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x58>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x58>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d111      	bne.n	8002f00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d010      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efe:	e007      	b.n	8002f10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800

08002f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d122      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d11b      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0202 	mvn.w	r2, #2
 8002f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9a4 	bl	80032b8 <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f997 	bl	80032a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f9a6 	bl	80032ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0204 	mvn.w	r2, #4
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f97a 	bl	80032b8 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f96d 	bl	80032a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f97c 	bl	80032ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d122      	bne.n	800302c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d11b      	bne.n	800302c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0208 	mvn.w	r2, #8
 8002ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2204      	movs	r2, #4
 8003002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f950 	bl	80032b8 <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f943 	bl	80032a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f952 	bl	80032ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b10      	cmp	r3, #16
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b10      	cmp	r3, #16
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0210 	mvn.w	r2, #16
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2208      	movs	r2, #8
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f926 	bl	80032b8 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f919 	bl	80032a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f928 	bl	80032ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10e      	bne.n	80030ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0201 	mvn.w	r2, #1
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd ff1a 	bl	8000ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b80      	cmp	r3, #128	; 0x80
 80030b8:	d10e      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d107      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa6b 	bl	80035ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8ec 	bl	80032dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b20      	cmp	r3, #32
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b20      	cmp	r3, #32
 800311e:	d107      	bne.n	8003130 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0220 	mvn.w	r2, #32
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fa36 	bl	800359c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_TIM_ConfigClockSource+0x18>
 800314c:	2302      	movs	r3, #2
 800314e:	e0a6      	b.n	800329e <HAL_TIM_ConfigClockSource+0x166>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800316e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003176:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d067      	beq.n	8003258 <HAL_TIM_ConfigClockSource+0x120>
 8003188:	2b40      	cmp	r3, #64	; 0x40
 800318a:	d80b      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x6c>
 800318c:	2b10      	cmp	r3, #16
 800318e:	d073      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0x140>
 8003190:	2b10      	cmp	r3, #16
 8003192:	d802      	bhi.n	800319a <HAL_TIM_ConfigClockSource+0x62>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d06f      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003198:	e078      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800319a:	2b20      	cmp	r3, #32
 800319c:	d06c      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0x140>
 800319e:	2b30      	cmp	r3, #48	; 0x30
 80031a0:	d06a      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80031a2:	e073      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031a4:	2b70      	cmp	r3, #112	; 0x70
 80031a6:	d00d      	beq.n	80031c4 <HAL_TIM_ConfigClockSource+0x8c>
 80031a8:	2b70      	cmp	r3, #112	; 0x70
 80031aa:	d804      	bhi.n	80031b6 <HAL_TIM_ConfigClockSource+0x7e>
 80031ac:	2b50      	cmp	r3, #80	; 0x50
 80031ae:	d033      	beq.n	8003218 <HAL_TIM_ConfigClockSource+0xe0>
 80031b0:	2b60      	cmp	r3, #96	; 0x60
 80031b2:	d041      	beq.n	8003238 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031b4:	e06a      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ba:	d066      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x152>
 80031bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c0:	d017      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80031c2:	e063      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6899      	ldr	r1, [r3, #8]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f000 f965 	bl	80034a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]
      break;
 80031f0:	e04c      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6899      	ldr	r1, [r3, #8]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f000 f94e 	bl	80034a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003214:	609a      	str	r2, [r3, #8]
      break;
 8003216:	e039      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	461a      	mov	r2, r3
 8003226:	f000 f8c5 	bl	80033b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2150      	movs	r1, #80	; 0x50
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f91c 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8003236:	e029      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	461a      	mov	r2, r3
 8003246:	f000 f8e3 	bl	8003410 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2160      	movs	r1, #96	; 0x60
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f90c 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8003256:	e019      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	461a      	mov	r2, r3
 8003266:	f000 f8a5 	bl	80033b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f8fc 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8003276:	e009      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f000 f8f3 	bl	800346e <TIM_ITRx_SetConfig>
        break;
 8003288:	e000      	b.n	800328c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800328a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
	...

080032f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a29      	ldr	r2, [pc, #164]	; (80033a8 <TIM_Base_SetConfig+0xb8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00b      	beq.n	8003320 <TIM_Base_SetConfig+0x30>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d007      	beq.n	8003320 <TIM_Base_SetConfig+0x30>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a26      	ldr	r2, [pc, #152]	; (80033ac <TIM_Base_SetConfig+0xbc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0x30>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <TIM_Base_SetConfig+0xc0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <TIM_Base_SetConfig+0xb8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00b      	beq.n	8003352 <TIM_Base_SetConfig+0x62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003340:	d007      	beq.n	8003352 <TIM_Base_SetConfig+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <TIM_Base_SetConfig+0xbc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_Base_SetConfig+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <TIM_Base_SetConfig+0xc0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d108      	bne.n	8003364 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a07      	ldr	r2, [pc, #28]	; (80033a8 <TIM_Base_SetConfig+0xb8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d103      	bne.n	8003398 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	615a      	str	r2, [r3, #20]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800

080033b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0201 	bic.w	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 030a 	bic.w	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f023 0210 	bic.w	r2, r3, #16
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800343a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	031b      	lsls	r3, r3, #12
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800344c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	f043 0307 	orr.w	r3, r3, #7
 8003490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b087      	sub	sp, #28
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	021a      	lsls	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	609a      	str	r2, [r3, #8]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e046      	b.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a16      	ldr	r2, [pc, #88]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003544:	d009      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a12      	ldr	r2, [pc, #72]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a10      	ldr	r2, [pc, #64]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10c      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800

0800359c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e03f      	b.n	8003652 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd ff54 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	; 0x24
 80035f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fc29 	bl	8003e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b20      	cmp	r3, #32
 8003674:	d153      	bne.n	800371e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_Transmit_DMA+0x26>
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e04c      	b.n	8003720 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_UART_Transmit_DMA+0x38>
 8003690:	2302      	movs	r3, #2
 8003692:	e045      	b.n	8003720 <HAL_UART_Transmit_DMA+0xc4>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2221      	movs	r2, #33	; 0x21
 80036b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	4a19      	ldr	r2, [pc, #100]	; (8003728 <HAL_UART_Transmit_DMA+0xcc>)
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_UART_Transmit_DMA+0xd0>)
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <HAL_UART_Transmit_DMA+0xd4>)
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3304      	adds	r3, #4
 80036f0:	461a      	mov	r2, r3
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	f7fe fb8c 	bl	8001e10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003700:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003718:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	08003a7d 	.word	0x08003a7d
 800372c:	08003acf 	.word	0x08003acf
 8003730:	08003b6f 	.word	0x08003b6f

08003734 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b20      	cmp	r3, #32
 800374c:	d166      	bne.n	800381c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_UART_Receive_DMA+0x26>
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e05f      	b.n	800381e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_UART_Receive_DMA+0x38>
 8003768:	2302      	movs	r3, #2
 800376a:	e058      	b.n	800381e <HAL_UART_Receive_DMA+0xea>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2222      	movs	r2, #34	; 0x22
 800378a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003792:	4a25      	ldr	r2, [pc, #148]	; (8003828 <HAL_UART_Receive_DMA+0xf4>)
 8003794:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379a:	4a24      	ldr	r2, [pc, #144]	; (800382c <HAL_UART_Receive_DMA+0xf8>)
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a2:	4a23      	ldr	r2, [pc, #140]	; (8003830 <HAL_UART_Receive_DMA+0xfc>)
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	2200      	movs	r2, #0
 80037ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80037ae:	f107 0308 	add.w	r3, r7, #8
 80037b2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	f7fe fb23 	bl	8001e10 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003816:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800381c:	2302      	movs	r3, #2
  }
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	08003aeb 	.word	0x08003aeb
 800382c:	08003b53 	.word	0x08003b53
 8003830:	08003b6f 	.word	0x08003b6f

08003834 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_UART_IRQHandler+0x52>
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa6c 	bl	8003d5c <UART_Receive_IT>
      return;
 8003884:	e0d1      	b.n	8003a2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80b0 	beq.w	80039ee <HAL_UART_IRQHandler+0x1ba>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <HAL_UART_IRQHandler+0x70>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80a5 	beq.w	80039ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_UART_IRQHandler+0x90>
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_UART_IRQHandler+0xb0>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	f043 0202 	orr.w	r2, r3, #2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_UART_IRQHandler+0xd0>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	f043 0204 	orr.w	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00f      	beq.n	800392e <HAL_UART_IRQHandler+0xfa>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d104      	bne.n	8003922 <HAL_UART_IRQHandler+0xee>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	f043 0208 	orr.w	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d078      	beq.n	8003a28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_UART_IRQHandler+0x11c>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fa06 	bl	8003d5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_UART_IRQHandler+0x144>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d031      	beq.n	80039dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f957 	bl	8003c2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d023      	beq.n	80039d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <HAL_UART_IRQHandler+0x1fc>)
 80039aa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fa8d 	bl	8001ed0 <HAL_DMA_Abort_IT>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d016      	beq.n	80039ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039c6:	4610      	mov	r0, r2
 80039c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ca:	e00e      	b.n	80039ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f84c 	bl	8003a6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d2:	e00a      	b.n	80039ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f848 	bl	8003a6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039da:	e006      	b.n	80039ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f844 	bl	8003a6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80039e8:	e01e      	b.n	8003a28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ea:	bf00      	nop
    return;
 80039ec:	e01c      	b.n	8003a28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_UART_IRQHandler+0x1d6>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f943 	bl	8003c8e <UART_Transmit_IT>
    return;
 8003a08:	e00f      	b.n	8003a2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_UART_IRQHandler+0x1f6>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f984 	bl	8003d2c <UART_EndTransmit_IT>
    return;
 8003a24:	bf00      	nop
 8003a26:	e000      	b.n	8003a2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003a28:	bf00      	nop
  }
}
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	08003c67 	.word	0x08003c67

08003a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d113      	bne.n	8003ac0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003abc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003abe:	e002      	b.n	8003ac6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff ffb7 	bl	8003a34 <HAL_UART_TxCpltCallback>
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7ff ffb2 	bl	8003a46 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11e      	bne.n	8003b44 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b1a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7fd fa05 	bl	8000f54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff ff79 	bl	8003a58 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf14      	ite	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	2300      	moveq	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b21      	cmp	r3, #33	; 0x21
 8003ba0:	d108      	bne.n	8003bb4 <UART_DMAError+0x46>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003bae:	68b8      	ldr	r0, [r7, #8]
 8003bb0:	f000 f827 	bl	8003c02 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b22      	cmp	r3, #34	; 0x22
 8003bd4:	d108      	bne.n	8003be8 <UART_DMAError+0x7a>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003be2:	68b8      	ldr	r0, [r7, #8]
 8003be4:	f000 f822 	bl	8003c2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	f043 0210 	orr.w	r2, r3, #16
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bf4:	68b8      	ldr	r0, [r7, #8]
 8003bf6:	f7ff ff38 	bl	8003a6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c18:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f7ff fef2 	bl	8003a6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b21      	cmp	r3, #33	; 0x21
 8003ca0:	d13e      	bne.n	8003d20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003caa:	d114      	bne.n	8003cd6 <UART_Transmit_IT+0x48>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d110      	bne.n	8003cd6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	1c9a      	adds	r2, r3, #2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]
 8003cd4:	e008      	b.n	8003ce8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	1c59      	adds	r1, r3, #1
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6211      	str	r1, [r2, #32]
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10f      	bne.n	8003d1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fe71 	bl	8003a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b22      	cmp	r3, #34	; 0x22
 8003d6e:	d170      	bne.n	8003e52 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d78:	d117      	bne.n	8003daa <UART_Receive_IT+0x4e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d113      	bne.n	8003daa <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	1c9a      	adds	r2, r3, #2
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
 8003da8:	e026      	b.n	8003df8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	d007      	beq.n	8003dce <UART_Receive_IT+0x72>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <UART_Receive_IT+0x80>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e008      	b.n	8003dee <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4619      	mov	r1, r3
 8003e06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d120      	bne.n	8003e4e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0220 	bic.w	r2, r2, #32
 8003e1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fd f885 	bl	8000f54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e002      	b.n	8003e54 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e96:	f023 030c 	bic.w	r3, r3, #12
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <UART_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7fe ff5c 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	e002      	b.n	8003ed2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe ff44 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009a      	lsls	r2, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <UART_SetConfig+0x118>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	0119      	lsls	r1, r3, #4
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009a      	lsls	r2, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <UART_SetConfig+0x118>)
 8003f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2064      	movs	r0, #100	; 0x64
 8003f12:	fb00 f303 	mul.w	r3, r0, r3
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	3332      	adds	r3, #50	; 0x32
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <UART_SetConfig+0x118>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f28:	4419      	add	r1, r3
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009a      	lsls	r2, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <UART_SetConfig+0x118>)
 8003f42:	fba3 0302 	umull	r0, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2064      	movs	r0, #100	; 0x64
 8003f4a:	fb00 f303 	mul.w	r3, r0, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <UART_SetConfig+0x118>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	440a      	add	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40013800 	.word	0x40013800
 8003f74:	51eb851f 	.word	0x51eb851f

08003f78 <setProgram>:
#include <string.h>
#include<ctype.h>
#include<stdlib.h>
#include<main.h>
#include<stm32f1xx.h>
void setProgram(uint8_t *msg, struct Subroutine *data) {
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b099      	sub	sp, #100	; 0x64
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]

	char buffor[10] = "";
 8003f82:	2300      	movs	r3, #0
 8003f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	809a      	strh	r2, [r3, #4]
	uint8_t i = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	char buffor2[62]="";
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	f107 0310 	add.w	r3, r7, #16
 8003f9e:	223a      	movs	r2, #58	; 0x3a
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fb7a 	bl	800469c <memset>
	strcpy(buffor2,(char*)msg);
 8003fa8:	f107 030c 	add.w	r3, r7, #12
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 f8af 	bl	8005112 <strcpy>
	memset(buffor, '\0', sizeof(buffor));
 8003fb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fb8:	220a      	movs	r2, #10
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fb6d 	bl	800469c <memset>
	strncpy(buffor, (char*) msg, 4);
 8003fc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 f8bb 	bl	8005146 <strncpy>
	if (strncmp((char*) msg, "SET", 3) == 0) { //-------------SET-------------
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	4931      	ldr	r1, [pc, #196]	; (8004098 <setProgram+0x120>)
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f001 f8a4 	bl	8005122 <strncmp>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d125      	bne.n	800402c <setProgram+0xb4>
		msg = przewinDo(msg, ':');
 8003fe0:	213a      	movs	r1, #58	; 0x3a
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f978 	bl	80042d8 <przewinDo>
 8003fe8:	6078      	str	r0, [r7, #4]

		//----------odszyfrowanie temperatur----------

		for (uint8_t i = 0; i < 6; i++) {
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003ff0:	e00c      	b.n	800400c <setProgram+0x94>
			msg = readTemperature(msg, data, i);
 8003ff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	6839      	ldr	r1, [r7, #0]
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f980 	bl	8004300 <readTemperature>
 8004000:	6078      	str	r0, [r7, #4]
		for (uint8_t i = 0; i < 6; i++) {
 8004002:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004006:	3301      	adds	r3, #1
 8004008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800400c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004010:	2b05      	cmp	r3, #5
 8004012:	d9ee      	bls.n	8003ff2 <setProgram+0x7a>
		}
		activeBrewing(*data);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	466c      	mov	r4, sp
 8004018:	f103 0210 	add.w	r2, r3, #16
 800401c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004020:	e884 0003 	stmia.w	r4, {r0, r1}
 8004024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004026:	f000 f845 	bl	80040b4 <activeBrewing>
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
	} else {

	}

}
 800402a:	e031      	b.n	8004090 <setProgram+0x118>
	} else if (strncmp((char*) msg, "STOP", 4) == 0) { //--------STOP--------------
 800402c:	2204      	movs	r2, #4
 800402e:	491b      	ldr	r1, [pc, #108]	; (800409c <setProgram+0x124>)
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f001 f876 	bl	8005122 <strncmp>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <setProgram+0xcc>
		subroutine_Init(data);
 800403c:	6838      	ldr	r0, [r7, #0]
 800403e:	f000 f85f 	bl	8004100 <subroutine_Init>
}
 8004042:	e025      	b.n	8004090 <setProgram+0x118>
	} else if (strstr((char*) msg, "P1")) { //----------P1-------------
 8004044:	4916      	ldr	r1, [pc, #88]	; (80040a0 <setProgram+0x128>)
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f001 f892 	bl	8005170 <strstr>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <setProgram+0xf4>
		subroutine_Init(data);
 8004052:	6838      	ldr	r0, [r7, #0]
 8004054:	f000 f854 	bl	8004100 <subroutine_Init>
		startCounterTime = 0;
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <setProgram+0x12c>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
		data->pumpingTime = 30;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	221e      	movs	r2, #30
 8004062:	729a      	strb	r2, [r3, #10]
		startPumping = 1;
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <setProgram+0x130>)
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
}
 800406a:	e011      	b.n	8004090 <setProgram+0x118>
	} else if (strstr((char*) msg, "P0")) { //-----------P0--------------
 800406c:	490f      	ldr	r1, [pc, #60]	; (80040ac <setProgram+0x134>)
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f001 f87e 	bl	8005170 <strstr>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <setProgram+0x118>
		data->pumpingTime = 0;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2200      	movs	r2, #0
 800407e:	729a      	strb	r2, [r3, #10]
		startPumping = 0;
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <setProgram+0x130>)
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
 8004086:	2200      	movs	r2, #0
 8004088:	2108      	movs	r1, #8
 800408a:	4809      	ldr	r0, [pc, #36]	; (80040b0 <setProgram+0x138>)
 800408c:	f7fe fa3b 	bl	8002506 <HAL_GPIO_WritePin>
}
 8004090:	bf00      	nop
 8004092:	375c      	adds	r7, #92	; 0x5c
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}
 8004098:	08007e94 	.word	0x08007e94
 800409c:	08007e98 	.word	0x08007e98
 80040a0:	08007ea0 	.word	0x08007ea0
 80040a4:	20000200 	.word	0x20000200
 80040a8:	20000341 	.word	0x20000341
 80040ac:	08007ea4 	.word	0x08007ea4
 80040b0:	40010c00 	.word	0x40010c00

080040b4 <activeBrewing>:

	}
//--------przewin msg do konca------------
	msg = przewinDo(msg, '\0');
}
void activeBrewing(Subroutine data) {
 80040b4:	b084      	sub	sp, #16
 80040b6:	b490      	push	{r4, r7}
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	f107 0408 	add.w	r4, r7, #8
 80040be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//-----pętla grzania-------
	extern uint32_t CounterHeating;
	CounterHeating = 0;
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <activeBrewing+0x40>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
	if (data.regType == BANGBANG) {
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <activeBrewing+0x28>
		startBangBang = true;
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <activeBrewing+0x44>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
		startPIDReg = false;
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <activeBrewing+0x48>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
		startBangBang = false;
		startPIDReg = true;
		//grzanieRegPID(data.heatingCycle[i]);
	}

}
 80040da:	e005      	b.n	80040e8 <activeBrewing+0x34>
		startBangBang = false;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <activeBrewing+0x44>)
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
		startPIDReg = true;
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <activeBrewing+0x48>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc90      	pop	{r4, r7}
 80040ee:	b004      	add	sp, #16
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000208 	.word	0x20000208
 80040f8:	2000029b 	.word	0x2000029b
 80040fc:	2000029d 	.word	0x2000029d

08004100 <subroutine_Init>:
void subroutine_Init(struct Subroutine *data) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	startPIDReg = false;
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <subroutine_Init+0x70>)
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
	startBangBang = false;
 800410e:	4b19      	ldr	r3, [pc, #100]	; (8004174 <subroutine_Init+0x74>)
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
	startPumping = false;
 8004114:	4b18      	ldr	r3, [pc, #96]	; (8004178 <subroutine_Init+0x78>)
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 5; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e013      	b.n	8004148 <subroutine_Init+0x48>
		for (int j = 0; j < 2; j++)
 8004120:	2300      	movs	r3, #0
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	e00a      	b.n	800413c <subroutine_Init+0x3c>
			data->heatingCycle[i][j] = 0;
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	441a      	add	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 2; j++)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3301      	adds	r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b01      	cmp	r3, #1
 8004140:	ddf1      	ble.n	8004126 <subroutine_Init+0x26>
	for (int i = 0; i < 5; i++)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3301      	adds	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b04      	cmp	r3, #4
 800414c:	dde8      	ble.n	8004120 <subroutine_Init+0x20>
	data->pumpingTime = 0;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
 8004154:	2200      	movs	r2, #0
 8004156:	2108      	movs	r1, #8
 8004158:	4808      	ldr	r0, [pc, #32]	; (800417c <subroutine_Init+0x7c>)
 800415a:	f7fe f9d4 	bl	8002506 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRZALKA_PORT, GRZALKA_PIN, GPIO_PIN_RESET);
 800415e:	2200      	movs	r2, #0
 8004160:	2110      	movs	r1, #16
 8004162:	4806      	ldr	r0, [pc, #24]	; (800417c <subroutine_Init+0x7c>)
 8004164:	f7fe f9cf 	bl	8002506 <HAL_GPIO_WritePin>
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	2000029d 	.word	0x2000029d
 8004174:	2000029b 	.word	0x2000029b
 8004178:	20000341 	.word	0x20000341
 800417c:	40010c00 	.word	0x40010c00

08004180 <pumping>:
void pumping(uint8_t timeOfPumping) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
	extern uint32_t CounterPump;
	if (CounterPump <= timeOfPumping * 60) {
 800418a:	79fa      	ldrb	r2, [r7, #7]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	461a      	mov	r2, r3
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <pumping+0x44>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d305      	bcc.n	80041aa <pumping+0x2a>
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_SET);
 800419e:	2201      	movs	r2, #1
 80041a0:	2108      	movs	r1, #8
 80041a2:	4809      	ldr	r0, [pc, #36]	; (80041c8 <pumping+0x48>)
 80041a4:	f7fe f9af 	bl	8002506 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
		startPumping = false;
	}
}
 80041a8:	e007      	b.n	80041ba <pumping+0x3a>
		HAL_GPIO_WritePin(POMPKA_PORT, POMPKA_PIN, GPIO_PIN_RESET);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2108      	movs	r1, #8
 80041ae:	4806      	ldr	r0, [pc, #24]	; (80041c8 <pumping+0x48>)
 80041b0:	f7fe f9a9 	bl	8002506 <HAL_GPIO_WritePin>
		startPumping = false;
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <pumping+0x4c>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000204 	.word	0x20000204
 80041c8:	40010c00 	.word	0x40010c00
 80041cc:	20000341 	.word	0x20000341

080041d0 <grzanieRegDwustawna>:
void grzanieRegDwustawna(uint8_t setTemperature, uint8_t timeOfHeating,
		double hysteresis, uint8_t *numberOfCycle) {
 80041d0:	b5b0      	push	{r4, r5, r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	e9c7 2300 	strd	r2, r3, [r7]
 80041da:	4603      	mov	r3, r0
 80041dc:	73fb      	strb	r3, [r7, #15]
 80041de:	460b      	mov	r3, r1
 80041e0:	73bb      	strb	r3, [r7, #14]
	extern bool isHeating;
	extern double measuredTemperature;
	extern uint32_t CounterHeating;
	if (CounterHeating <= timeOfHeating * 60) {
 80041e2:	7bba      	ldrb	r2, [r7, #14]
 80041e4:	4613      	mov	r3, r2
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b33      	ldr	r3, [pc, #204]	; (80042bc <grzanieRegDwustawna+0xec>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d33e      	bcc.n	8004274 <grzanieRegDwustawna+0xa4>
		if ((double) setTemperature >= measuredTemperature - hysteresis) {
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc f8f3 	bl	80003e4 <__aeabi_ui2d>
 80041fe:	4604      	mov	r4, r0
 8004200:	460d      	mov	r5, r1
 8004202:	4b2f      	ldr	r3, [pc, #188]	; (80042c0 <grzanieRegDwustawna+0xf0>)
 8004204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800420c:	f7fb ffac 	bl	8000168 <__aeabi_dsub>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4620      	mov	r0, r4
 8004216:	4629      	mov	r1, r5
 8004218:	f7fc fbe4 	bl	80009e4 <__aeabi_dcmpge>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <grzanieRegDwustawna+0x64>
			isHeating = true;
 8004222:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <grzanieRegDwustawna+0xf4>)
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GRZALKA_PORT, GRZALKA_PIN, GPIO_PIN_SET);
 8004228:	2201      	movs	r2, #1
 800422a:	2110      	movs	r1, #16
 800422c:	4826      	ldr	r0, [pc, #152]	; (80042c8 <grzanieRegDwustawna+0xf8>)
 800422e:	f7fe f96a 	bl	8002506 <HAL_GPIO_WritePin>
			startPumping = true;
			extern uint32_t CounterPump;
			CounterPump = 0;
		}
	}
}
 8004232:	e03e      	b.n	80042b2 <grzanieRegDwustawna+0xe2>
		} else if ((double) setTemperature < measuredTemperature + hysteresis) {
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc f8d4 	bl	80003e4 <__aeabi_ui2d>
 800423c:	4604      	mov	r4, r0
 800423e:	460d      	mov	r5, r1
 8004240:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <grzanieRegDwustawna+0xf0>)
 8004242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800424a:	f7fb ff8f 	bl	800016c <__adddf3>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4620      	mov	r0, r4
 8004254:	4629      	mov	r1, r5
 8004256:	f7fc fbb1 	bl	80009bc <__aeabi_dcmplt>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d100      	bne.n	8004262 <grzanieRegDwustawna+0x92>
}
 8004260:	e027      	b.n	80042b2 <grzanieRegDwustawna+0xe2>
			isHeating = false;
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <grzanieRegDwustawna+0xf4>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GRZALKA_PORT, GRZALKA_PIN, GPIO_PIN_RESET);
 8004268:	2200      	movs	r2, #0
 800426a:	2110      	movs	r1, #16
 800426c:	4816      	ldr	r0, [pc, #88]	; (80042c8 <grzanieRegDwustawna+0xf8>)
 800426e:	f7fe f94a 	bl	8002506 <HAL_GPIO_WritePin>
}
 8004272:	e01e      	b.n	80042b2 <grzanieRegDwustawna+0xe2>
		HAL_GPIO_WritePin(GRZALKA_PORT, GRZALKA_PIN, GPIO_PIN_RESET);
 8004274:	2200      	movs	r2, #0
 8004276:	2110      	movs	r1, #16
 8004278:	4813      	ldr	r0, [pc, #76]	; (80042c8 <grzanieRegDwustawna+0xf8>)
 800427a:	f7fe f944 	bl	8002506 <HAL_GPIO_WritePin>
		CounterHeating = 0;
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <grzanieRegDwustawna+0xec>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
		if (*numberOfCycle < 4)
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d806      	bhi.n	800429a <grzanieRegDwustawna+0xca>
			(*numberOfCycle)++;
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	701a      	strb	r2, [r3, #0]
}
 8004298:	e00b      	b.n	80042b2 <grzanieRegDwustawna+0xe2>
			*numberOfCycle = 0;
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
			startBangBang = false;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <grzanieRegDwustawna+0xfc>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
			startPumping = true;
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <grzanieRegDwustawna+0x100>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
			CounterPump = 0;
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <grzanieRegDwustawna+0x104>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000208 	.word	0x20000208
 80042c0:	200002a0 	.word	0x200002a0
 80042c4:	200001fc 	.word	0x200001fc
 80042c8:	40010c00 	.word	0x40010c00
 80042cc:	2000029b 	.word	0x2000029b
 80042d0:	20000341 	.word	0x20000341
 80042d4:	20000204 	.word	0x20000204

080042d8 <przewinDo>:
void grzanieRegPID(uint8_t *heatingCycle) {

}
uint8_t* przewinDo(uint8_t *msg, uint8_t znak) {
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
	while (!(*(++msg) == znak))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3301      	adds	r3, #1
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1f7      	bne.n	80042e4 <przewinDo+0xc>
		;
	return msg;
 80042f4:	687b      	ldr	r3, [r7, #4]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <readTemperature>:
uint8_t* readTemperature(uint8_t *msg, Subroutine *dataTemp,
		uint8_t currentCycle) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	71fb      	strb	r3, [r7, #7]
//--------jezeli faktycznieeee poprawnie uzyte----------
	if ((*msg) != '\0') {
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d07a      	beq.n	800440c <readTemperature+0x10c>
		//-------przewiń do S------
		if (strstr((char*) msg, "S")) {
 8004316:	2153      	movs	r1, #83	; 0x53
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 feed 	bl	80050f8 <strchr>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d062      	beq.n	80043ea <readTemperature+0xea>
			while ((*msg++) != 'S')
 8004324:	bf00      	nop
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	60fa      	str	r2, [r7, #12]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b53      	cmp	r3, #83	; 0x53
 8004330:	d1f9      	bne.n	8004326 <readTemperature+0x26>
				;
			//-------PID lub dwustawna--------
			dataTemp->regType = *msg == '0' ? BANGBANG : PID;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	72da      	strb	r2, [r3, #11]
			if (dataTemp->regType == PID)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	7adb      	ldrb	r3, [r3, #11]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d105      	bne.n	800435a <readTemperature+0x5a>
				msg = przewinDo(msg, 'T');
 800434e:	2154      	movs	r1, #84	; 0x54
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff ffc1 	bl	80042d8 <przewinDo>
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	e047      	b.n	80043ea <readTemperature+0xea>
			else if (dataTemp->regType == BANGBANG) { //histereza
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	7adb      	ldrb	r3, [r3, #11]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d143      	bne.n	80043ea <readTemperature+0xea>
				msg = przewinDo(msg, 'H');
 8004362:	2148      	movs	r1, #72	; 0x48
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff ffb7 	bl	80042d8 <przewinDo>
 800436a:	60f8      	str	r0, [r7, #12]
				msg = convDouble(msg, &dataTemp->hist);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	3310      	adds	r3, #16
 8004370:	4619      	mov	r1, r3
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f88d 	bl	8004492 <convDouble>
 8004378:	60f8      	str	r0, [r7, #12]
				*msg++;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3301      	adds	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
		}
		//-------Wypełnienie cykli--------

		/*tymczasowa convna temp służy do
		 zamienienia kilkucyfrowego ciągu znaków w liczbę*/
		while (*msg != ';') {
 8004380:	e033      	b.n	80043ea <readTemperature+0xea>

			//-----Pobranie temperatury------
			if (*msg == 'T') {
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b54      	cmp	r3, #84	; 0x54
 8004388:	d109      	bne.n	800439e <readTemperature+0x9e>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][0]);
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	4413      	add	r3, r2
 8004392:	4619      	mov	r1, r3
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f840 	bl	800441a <conv>
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	e025      	b.n	80043ea <readTemperature+0xea>

			} else if (*msg == 'H') { //histereza
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b48      	cmp	r3, #72	; 0x48
 80043a4:	d107      	bne.n	80043b6 <readTemperature+0xb6>
				msg = convDouble(msg, &dataTemp->hist);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3310      	adds	r3, #16
 80043aa:	4619      	mov	r1, r3
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f870 	bl	8004492 <convDouble>
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	e019      	b.n	80043ea <readTemperature+0xea>
				//---------Pobranie czasu-------
			} else if (*msg == 't') {
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b74      	cmp	r3, #116	; 0x74
 80043bc:	d10a      	bne.n	80043d4 <readTemperature+0xd4>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][1]);
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	3301      	adds	r3, #1
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	4413      	add	r3, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f825 	bl	800441a <conv>
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	e00a      	b.n	80043ea <readTemperature+0xea>
			} else if (*msg == 'P') {
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b50      	cmp	r3, #80	; 0x50
 80043da:	d10b      	bne.n	80043f4 <readTemperature+0xf4>
				msg = conv(msg, &dataTemp->pumpingTime);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	330a      	adds	r3, #10
 80043e0:	4619      	mov	r1, r3
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f819 	bl	800441a <conv>
 80043e8:	60f8      	str	r0, [r7, #12]
		while (*msg != ';') {
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b3b      	cmp	r3, #59	; 0x3b
 80043f0:	d1c7      	bne.n	8004382 <readTemperature+0x82>
 80043f2:	e000      	b.n	80043f6 <readTemperature+0xf6>
			} else
				break;
 80043f4:	bf00      	nop

		}
		return (*msg) != '\0' ? ++msg : msg; //zwroc wskaznik w ostatnim polozeniu
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <readTemperature+0x108>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	e004      	b.n	8004412 <readTemperature+0x112>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	e002      	b.n	8004412 <readTemperature+0x112>
	} else
		return msg = NULL;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
	//return (*msg) != '\0' ? ++msg : msg; //zwroc wskaznik w ostatnim polozeniu
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <conv>:
uint8_t* conv(uint8_t *msg, uint8_t *digit) {
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
	uint8_t temp[3] = { 'a' };
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	2100      	movs	r1, #0
 800442a:	460a      	mov	r2, r1
 800442c:	801a      	strh	r2, [r3, #0]
 800442e:	460a      	mov	r2, r1
 8004430:	709a      	strb	r2, [r3, #2]
 8004432:	2361      	movs	r3, #97	; 0x61
 8004434:	733b      	strb	r3, [r7, #12]
	uint8_t i;
	++msg;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3301      	adds	r3, #1
 800443a:	607b      	str	r3, [r7, #4]
	for (i = 0; isdigit(*msg); i++) {
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]
 8004440:	e00d      	b.n	800445e <conv+0x44>
		temp[i] = *msg++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	7819      	ldrb	r1, [r3, #0]
 800444c:	f107 0310 	add.w	r3, r7, #16
 8004450:	4413      	add	r3, r2
 8004452:	460a      	mov	r2, r1
 8004454:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (i = 0; isdigit(*msg); i++) {
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	3301      	adds	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	f000 f8f5 	bl	800464c <__locale_ctype_ptr>
 8004462:	4602      	mov	r2, r0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e5      	bne.n	8004442 <conv+0x28>
	}
	*digit = atoi((char*) temp);
 8004476:	f107 030c 	add.w	r3, r7, #12
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f899 	bl	80045b2 <atoi>
 8004480:	4603      	mov	r3, r0
 8004482:	b2da      	uxtb	r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	701a      	strb	r2, [r3, #0]
	return msg;
 8004488:	687b      	ldr	r3, [r7, #4]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <convDouble>:
uint8_t* convDouble(uint8_t *msg, double *digit) {
 8004492:	b590      	push	{r4, r7, lr}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
	uint8_t temp[4] = { 'a' };
 800449c:	2300      	movs	r3, #0
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	2361      	movs	r3, #97	; 0x61
 80044a2:	723b      	strb	r3, [r7, #8]
	uint8_t i;
	++msg;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3301      	adds	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
	for (i = 0; isdigit(*msg) || *msg == '.' || *msg == ','; i++) {
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
 80044ae:	e00d      	b.n	80044cc <convDouble+0x3a>
		temp[i] = *msg++;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	7bfa      	ldrb	r2, [r7, #15]
 80044b8:	7819      	ldrb	r1, [r3, #0]
 80044ba:	f107 0310 	add.w	r3, r7, #16
 80044be:	4413      	add	r3, r2
 80044c0:	460a      	mov	r2, r1
 80044c2:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (i = 0; isdigit(*msg) || *msg == '.' || *msg == ','; i++) {
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	3301      	adds	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	f000 f8be 	bl	800464c <__locale_ctype_ptr>
 80044d0:	4602      	mov	r2, r0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	3301      	adds	r3, #1
 80044d8:	4413      	add	r3, r2
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e5      	bne.n	80044b0 <convDouble+0x1e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b2e      	cmp	r3, #46	; 0x2e
 80044ea:	d0e1      	beq.n	80044b0 <convDouble+0x1e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b2c      	cmp	r3, #44	; 0x2c
 80044f2:	d0dd      	beq.n	80044b0 <convDouble+0x1e>
	}
	(*digit) = atof((char*) temp);
 80044f4:	f107 0308 	add.w	r3, r7, #8
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 f857 	bl	80045ac <atof>
 80044fe:	4603      	mov	r3, r0
 8004500:	460c      	mov	r4, r1
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	e9c2 3400 	strd	r3, r4, [r2]
	return msg;
 8004508:	687b      	ldr	r3, [r7, #4]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	bd90      	pop	{r4, r7, pc}
	...

08004514 <textConversion>:
char* textConversion(double dTemperature, char* targetVariable) {
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b089      	sub	sp, #36	; 0x24
 8004518:	af00      	add	r7, sp, #0
 800451a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
	char* temp;
	temp = malloc(sizeof(char) * 25);
 8004520:	2019      	movs	r0, #25
 8004522:	f000 f8a1 	bl	8004668 <malloc>
 8004526:	4603      	mov	r3, r0
 8004528:	61fb      	str	r3, [r7, #28]
	char sTemperature[10]="";
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	f107 0314 	add.w	r3, r7, #20
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	809a      	strh	r2, [r3, #4]
	extern double measuredTemperature;
	strcpy(temp, targetVariable);
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	69f8      	ldr	r0, [r7, #28]
 800453c:	f000 fde9 	bl	8005112 <strcpy>
	sprintf(temp+strlen(temp), ".val=");
 8004540:	69f8      	ldr	r0, [r7, #28]
 8004542:	f7fb fe05 	bl	8000150 <strlen>
 8004546:	4602      	mov	r2, r0
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <textConversion+0x8c>)
 800454e:	6810      	ldr	r0, [r2, #0]
 8004550:	6018      	str	r0, [r3, #0]
 8004552:	8892      	ldrh	r2, [r2, #4]
 8004554:	809a      	strh	r2, [r3, #4]
	itoa((int)(10.0 * measuredTemperature), sTemperature, 10);
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <textConversion+0x90>)
 8004558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <textConversion+0x94>)
 8004562:	f7fb ffb9 	bl	80004d8 <__aeabi_dmul>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	4618      	mov	r0, r3
 800456c:	4621      	mov	r1, r4
 800456e:	f7fc fa63 	bl	8000a38 <__aeabi_d2iz>
 8004572:	f107 0310 	add.w	r3, r7, #16
 8004576:	220a      	movs	r2, #10
 8004578:	4619      	mov	r1, r3
 800457a:	f000 f861 	bl	8004640 <itoa>
	sprintf(temp + strlen(temp), sTemperature);
 800457e:	69f8      	ldr	r0, [r7, #28]
 8004580:	f7fb fde6 	bl	8000150 <strlen>
 8004584:	4602      	mov	r2, r0
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f107 0210 	add.w	r2, r7, #16
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fd91 	bl	80050b8 <siprintf>

	return temp;
 8004596:	69fb      	ldr	r3, [r7, #28]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3724      	adds	r7, #36	; 0x24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd90      	pop	{r4, r7, pc}
 80045a0:	08007ec4 	.word	0x08007ec4
 80045a4:	200002a0 	.word	0x200002a0
 80045a8:	40240000 	.word	0x40240000

080045ac <atof>:
 80045ac:	2100      	movs	r1, #0
 80045ae:	f001 bc1b 	b.w	8005de8 <strtod>

080045b2 <atoi>:
 80045b2:	220a      	movs	r2, #10
 80045b4:	2100      	movs	r1, #0
 80045b6:	f001 bca5 	b.w	8005f04 <strtol>
	...

080045bc <__errno>:
 80045bc:	4b01      	ldr	r3, [pc, #4]	; (80045c4 <__errno+0x8>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	2000000c 	.word	0x2000000c

080045c8 <__libc_init_array>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	2500      	movs	r5, #0
 80045cc:	4e0c      	ldr	r6, [pc, #48]	; (8004600 <__libc_init_array+0x38>)
 80045ce:	4c0d      	ldr	r4, [pc, #52]	; (8004604 <__libc_init_array+0x3c>)
 80045d0:	1ba4      	subs	r4, r4, r6
 80045d2:	10a4      	asrs	r4, r4, #2
 80045d4:	42a5      	cmp	r5, r4
 80045d6:	d109      	bne.n	80045ec <__libc_init_array+0x24>
 80045d8:	f003 fc2e 	bl	8007e38 <_init>
 80045dc:	2500      	movs	r5, #0
 80045de:	4e0a      	ldr	r6, [pc, #40]	; (8004608 <__libc_init_array+0x40>)
 80045e0:	4c0a      	ldr	r4, [pc, #40]	; (800460c <__libc_init_array+0x44>)
 80045e2:	1ba4      	subs	r4, r4, r6
 80045e4:	10a4      	asrs	r4, r4, #2
 80045e6:	42a5      	cmp	r5, r4
 80045e8:	d105      	bne.n	80045f6 <__libc_init_array+0x2e>
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045f0:	4798      	blx	r3
 80045f2:	3501      	adds	r5, #1
 80045f4:	e7ee      	b.n	80045d4 <__libc_init_array+0xc>
 80045f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045fa:	4798      	blx	r3
 80045fc:	3501      	adds	r5, #1
 80045fe:	e7f2      	b.n	80045e6 <__libc_init_array+0x1e>
 8004600:	080081c0 	.word	0x080081c0
 8004604:	080081c0 	.word	0x080081c0
 8004608:	080081c0 	.word	0x080081c0
 800460c:	080081c4 	.word	0x080081c4

08004610 <__itoa>:
 8004610:	1e93      	subs	r3, r2, #2
 8004612:	2b22      	cmp	r3, #34	; 0x22
 8004614:	b510      	push	{r4, lr}
 8004616:	460c      	mov	r4, r1
 8004618:	d904      	bls.n	8004624 <__itoa+0x14>
 800461a:	2300      	movs	r3, #0
 800461c:	461c      	mov	r4, r3
 800461e:	700b      	strb	r3, [r1, #0]
 8004620:	4620      	mov	r0, r4
 8004622:	bd10      	pop	{r4, pc}
 8004624:	2a0a      	cmp	r2, #10
 8004626:	d109      	bne.n	800463c <__itoa+0x2c>
 8004628:	2800      	cmp	r0, #0
 800462a:	da07      	bge.n	800463c <__itoa+0x2c>
 800462c:	232d      	movs	r3, #45	; 0x2d
 800462e:	700b      	strb	r3, [r1, #0]
 8004630:	2101      	movs	r1, #1
 8004632:	4240      	negs	r0, r0
 8004634:	4421      	add	r1, r4
 8004636:	f001 fc7b 	bl	8005f30 <__utoa>
 800463a:	e7f1      	b.n	8004620 <__itoa+0x10>
 800463c:	2100      	movs	r1, #0
 800463e:	e7f9      	b.n	8004634 <__itoa+0x24>

08004640 <itoa>:
 8004640:	f7ff bfe6 	b.w	8004610 <__itoa>

08004644 <__locale_ctype_ptr_l>:
 8004644:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004648:	4770      	bx	lr
	...

0800464c <__locale_ctype_ptr>:
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <__locale_ctype_ptr+0x14>)
 800464e:	4a05      	ldr	r2, [pc, #20]	; (8004664 <__locale_ctype_ptr+0x18>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf08      	it	eq
 8004658:	4613      	moveq	r3, r2
 800465a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800465e:	4770      	bx	lr
 8004660:	2000000c 	.word	0x2000000c
 8004664:	20000070 	.word	0x20000070

08004668 <malloc>:
 8004668:	4b02      	ldr	r3, [pc, #8]	; (8004674 <malloc+0xc>)
 800466a:	4601      	mov	r1, r0
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	f000 b869 	b.w	8004744 <_malloc_r>
 8004672:	bf00      	nop
 8004674:	2000000c 	.word	0x2000000c

08004678 <__ascii_mbtowc>:
 8004678:	b082      	sub	sp, #8
 800467a:	b901      	cbnz	r1, 800467e <__ascii_mbtowc+0x6>
 800467c:	a901      	add	r1, sp, #4
 800467e:	b142      	cbz	r2, 8004692 <__ascii_mbtowc+0x1a>
 8004680:	b14b      	cbz	r3, 8004696 <__ascii_mbtowc+0x1e>
 8004682:	7813      	ldrb	r3, [r2, #0]
 8004684:	600b      	str	r3, [r1, #0]
 8004686:	7812      	ldrb	r2, [r2, #0]
 8004688:	1c10      	adds	r0, r2, #0
 800468a:	bf18      	it	ne
 800468c:	2001      	movne	r0, #1
 800468e:	b002      	add	sp, #8
 8004690:	4770      	bx	lr
 8004692:	4610      	mov	r0, r2
 8004694:	e7fb      	b.n	800468e <__ascii_mbtowc+0x16>
 8004696:	f06f 0001 	mvn.w	r0, #1
 800469a:	e7f8      	b.n	800468e <__ascii_mbtowc+0x16>

0800469c <memset>:
 800469c:	4603      	mov	r3, r0
 800469e:	4402      	add	r2, r0
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d100      	bne.n	80046a6 <memset+0xa>
 80046a4:	4770      	bx	lr
 80046a6:	f803 1b01 	strb.w	r1, [r3], #1
 80046aa:	e7f9      	b.n	80046a0 <memset+0x4>

080046ac <_free_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	4605      	mov	r5, r0
 80046b0:	2900      	cmp	r1, #0
 80046b2:	d043      	beq.n	800473c <_free_r+0x90>
 80046b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b8:	1f0c      	subs	r4, r1, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bfb8      	it	lt
 80046be:	18e4      	addlt	r4, r4, r3
 80046c0:	f002 fe17 	bl	80072f2 <__malloc_lock>
 80046c4:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <_free_r+0x94>)
 80046c6:	6813      	ldr	r3, [r2, #0]
 80046c8:	4610      	mov	r0, r2
 80046ca:	b933      	cbnz	r3, 80046da <_free_r+0x2e>
 80046cc:	6063      	str	r3, [r4, #4]
 80046ce:	6014      	str	r4, [r2, #0]
 80046d0:	4628      	mov	r0, r5
 80046d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046d6:	f002 be0d 	b.w	80072f4 <__malloc_unlock>
 80046da:	42a3      	cmp	r3, r4
 80046dc:	d90b      	bls.n	80046f6 <_free_r+0x4a>
 80046de:	6821      	ldr	r1, [r4, #0]
 80046e0:	1862      	adds	r2, r4, r1
 80046e2:	4293      	cmp	r3, r2
 80046e4:	bf01      	itttt	eq
 80046e6:	681a      	ldreq	r2, [r3, #0]
 80046e8:	685b      	ldreq	r3, [r3, #4]
 80046ea:	1852      	addeq	r2, r2, r1
 80046ec:	6022      	streq	r2, [r4, #0]
 80046ee:	6063      	str	r3, [r4, #4]
 80046f0:	6004      	str	r4, [r0, #0]
 80046f2:	e7ed      	b.n	80046d0 <_free_r+0x24>
 80046f4:	4613      	mov	r3, r2
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	b10a      	cbz	r2, 80046fe <_free_r+0x52>
 80046fa:	42a2      	cmp	r2, r4
 80046fc:	d9fa      	bls.n	80046f4 <_free_r+0x48>
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	1858      	adds	r0, r3, r1
 8004702:	42a0      	cmp	r0, r4
 8004704:	d10b      	bne.n	800471e <_free_r+0x72>
 8004706:	6820      	ldr	r0, [r4, #0]
 8004708:	4401      	add	r1, r0
 800470a:	1858      	adds	r0, r3, r1
 800470c:	4282      	cmp	r2, r0
 800470e:	6019      	str	r1, [r3, #0]
 8004710:	d1de      	bne.n	80046d0 <_free_r+0x24>
 8004712:	6810      	ldr	r0, [r2, #0]
 8004714:	6852      	ldr	r2, [r2, #4]
 8004716:	4401      	add	r1, r0
 8004718:	6019      	str	r1, [r3, #0]
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	e7d8      	b.n	80046d0 <_free_r+0x24>
 800471e:	d902      	bls.n	8004726 <_free_r+0x7a>
 8004720:	230c      	movs	r3, #12
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	e7d4      	b.n	80046d0 <_free_r+0x24>
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	1821      	adds	r1, r4, r0
 800472a:	428a      	cmp	r2, r1
 800472c:	bf01      	itttt	eq
 800472e:	6811      	ldreq	r1, [r2, #0]
 8004730:	6852      	ldreq	r2, [r2, #4]
 8004732:	1809      	addeq	r1, r1, r0
 8004734:	6021      	streq	r1, [r4, #0]
 8004736:	6062      	str	r2, [r4, #4]
 8004738:	605c      	str	r4, [r3, #4]
 800473a:	e7c9      	b.n	80046d0 <_free_r+0x24>
 800473c:	bd38      	pop	{r3, r4, r5, pc}
 800473e:	bf00      	nop
 8004740:	2000021c 	.word	0x2000021c

08004744 <_malloc_r>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	1ccd      	adds	r5, r1, #3
 8004748:	f025 0503 	bic.w	r5, r5, #3
 800474c:	3508      	adds	r5, #8
 800474e:	2d0c      	cmp	r5, #12
 8004750:	bf38      	it	cc
 8004752:	250c      	movcc	r5, #12
 8004754:	2d00      	cmp	r5, #0
 8004756:	4606      	mov	r6, r0
 8004758:	db01      	blt.n	800475e <_malloc_r+0x1a>
 800475a:	42a9      	cmp	r1, r5
 800475c:	d903      	bls.n	8004766 <_malloc_r+0x22>
 800475e:	230c      	movs	r3, #12
 8004760:	6033      	str	r3, [r6, #0]
 8004762:	2000      	movs	r0, #0
 8004764:	bd70      	pop	{r4, r5, r6, pc}
 8004766:	f002 fdc4 	bl	80072f2 <__malloc_lock>
 800476a:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <_malloc_r+0xac>)
 800476c:	6814      	ldr	r4, [r2, #0]
 800476e:	4621      	mov	r1, r4
 8004770:	b991      	cbnz	r1, 8004798 <_malloc_r+0x54>
 8004772:	4c20      	ldr	r4, [pc, #128]	; (80047f4 <_malloc_r+0xb0>)
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	b91b      	cbnz	r3, 8004780 <_malloc_r+0x3c>
 8004778:	4630      	mov	r0, r6
 800477a:	f000 fc8d 	bl	8005098 <_sbrk_r>
 800477e:	6020      	str	r0, [r4, #0]
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
 8004784:	f000 fc88 	bl	8005098 <_sbrk_r>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d124      	bne.n	80047d6 <_malloc_r+0x92>
 800478c:	230c      	movs	r3, #12
 800478e:	4630      	mov	r0, r6
 8004790:	6033      	str	r3, [r6, #0]
 8004792:	f002 fdaf 	bl	80072f4 <__malloc_unlock>
 8004796:	e7e4      	b.n	8004762 <_malloc_r+0x1e>
 8004798:	680b      	ldr	r3, [r1, #0]
 800479a:	1b5b      	subs	r3, r3, r5
 800479c:	d418      	bmi.n	80047d0 <_malloc_r+0x8c>
 800479e:	2b0b      	cmp	r3, #11
 80047a0:	d90f      	bls.n	80047c2 <_malloc_r+0x7e>
 80047a2:	600b      	str	r3, [r1, #0]
 80047a4:	18cc      	adds	r4, r1, r3
 80047a6:	50cd      	str	r5, [r1, r3]
 80047a8:	4630      	mov	r0, r6
 80047aa:	f002 fda3 	bl	80072f4 <__malloc_unlock>
 80047ae:	f104 000b 	add.w	r0, r4, #11
 80047b2:	1d23      	adds	r3, r4, #4
 80047b4:	f020 0007 	bic.w	r0, r0, #7
 80047b8:	1ac3      	subs	r3, r0, r3
 80047ba:	d0d3      	beq.n	8004764 <_malloc_r+0x20>
 80047bc:	425a      	negs	r2, r3
 80047be:	50e2      	str	r2, [r4, r3]
 80047c0:	e7d0      	b.n	8004764 <_malloc_r+0x20>
 80047c2:	684b      	ldr	r3, [r1, #4]
 80047c4:	428c      	cmp	r4, r1
 80047c6:	bf16      	itet	ne
 80047c8:	6063      	strne	r3, [r4, #4]
 80047ca:	6013      	streq	r3, [r2, #0]
 80047cc:	460c      	movne	r4, r1
 80047ce:	e7eb      	b.n	80047a8 <_malloc_r+0x64>
 80047d0:	460c      	mov	r4, r1
 80047d2:	6849      	ldr	r1, [r1, #4]
 80047d4:	e7cc      	b.n	8004770 <_malloc_r+0x2c>
 80047d6:	1cc4      	adds	r4, r0, #3
 80047d8:	f024 0403 	bic.w	r4, r4, #3
 80047dc:	42a0      	cmp	r0, r4
 80047de:	d005      	beq.n	80047ec <_malloc_r+0xa8>
 80047e0:	1a21      	subs	r1, r4, r0
 80047e2:	4630      	mov	r0, r6
 80047e4:	f000 fc58 	bl	8005098 <_sbrk_r>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d0cf      	beq.n	800478c <_malloc_r+0x48>
 80047ec:	6025      	str	r5, [r4, #0]
 80047ee:	e7db      	b.n	80047a8 <_malloc_r+0x64>
 80047f0:	2000021c 	.word	0x2000021c
 80047f4:	20000220 	.word	0x20000220

080047f8 <__cvt>:
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fe:	461e      	mov	r6, r3
 8004800:	bfbb      	ittet	lt
 8004802:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004806:	461e      	movlt	r6, r3
 8004808:	2300      	movge	r3, #0
 800480a:	232d      	movlt	r3, #45	; 0x2d
 800480c:	b088      	sub	sp, #32
 800480e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004810:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004814:	f027 0720 	bic.w	r7, r7, #32
 8004818:	2f46      	cmp	r7, #70	; 0x46
 800481a:	4614      	mov	r4, r2
 800481c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800481e:	700b      	strb	r3, [r1, #0]
 8004820:	d004      	beq.n	800482c <__cvt+0x34>
 8004822:	2f45      	cmp	r7, #69	; 0x45
 8004824:	d100      	bne.n	8004828 <__cvt+0x30>
 8004826:	3501      	adds	r5, #1
 8004828:	2302      	movs	r3, #2
 800482a:	e000      	b.n	800482e <__cvt+0x36>
 800482c:	2303      	movs	r3, #3
 800482e:	aa07      	add	r2, sp, #28
 8004830:	9204      	str	r2, [sp, #16]
 8004832:	aa06      	add	r2, sp, #24
 8004834:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004838:	e9cd 3500 	strd	r3, r5, [sp]
 800483c:	4622      	mov	r2, r4
 800483e:	4633      	mov	r3, r6
 8004840:	f001 fc52 	bl	80060e8 <_dtoa_r>
 8004844:	2f47      	cmp	r7, #71	; 0x47
 8004846:	4680      	mov	r8, r0
 8004848:	d102      	bne.n	8004850 <__cvt+0x58>
 800484a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800484c:	07db      	lsls	r3, r3, #31
 800484e:	d526      	bpl.n	800489e <__cvt+0xa6>
 8004850:	2f46      	cmp	r7, #70	; 0x46
 8004852:	eb08 0905 	add.w	r9, r8, r5
 8004856:	d111      	bne.n	800487c <__cvt+0x84>
 8004858:	f898 3000 	ldrb.w	r3, [r8]
 800485c:	2b30      	cmp	r3, #48	; 0x30
 800485e:	d10a      	bne.n	8004876 <__cvt+0x7e>
 8004860:	2200      	movs	r2, #0
 8004862:	2300      	movs	r3, #0
 8004864:	4620      	mov	r0, r4
 8004866:	4631      	mov	r1, r6
 8004868:	f7fc f89e 	bl	80009a8 <__aeabi_dcmpeq>
 800486c:	b918      	cbnz	r0, 8004876 <__cvt+0x7e>
 800486e:	f1c5 0501 	rsb	r5, r5, #1
 8004872:	f8ca 5000 	str.w	r5, [sl]
 8004876:	f8da 3000 	ldr.w	r3, [sl]
 800487a:	4499      	add	r9, r3
 800487c:	2200      	movs	r2, #0
 800487e:	2300      	movs	r3, #0
 8004880:	4620      	mov	r0, r4
 8004882:	4631      	mov	r1, r6
 8004884:	f7fc f890 	bl	80009a8 <__aeabi_dcmpeq>
 8004888:	b938      	cbnz	r0, 800489a <__cvt+0xa2>
 800488a:	2230      	movs	r2, #48	; 0x30
 800488c:	9b07      	ldr	r3, [sp, #28]
 800488e:	454b      	cmp	r3, r9
 8004890:	d205      	bcs.n	800489e <__cvt+0xa6>
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	9107      	str	r1, [sp, #28]
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	e7f8      	b.n	800488c <__cvt+0x94>
 800489a:	f8cd 901c 	str.w	r9, [sp, #28]
 800489e:	4640      	mov	r0, r8
 80048a0:	9b07      	ldr	r3, [sp, #28]
 80048a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80048a4:	eba3 0308 	sub.w	r3, r3, r8
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	b008      	add	sp, #32
 80048ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080048b0 <__exponent>:
 80048b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048b2:	2900      	cmp	r1, #0
 80048b4:	bfb4      	ite	lt
 80048b6:	232d      	movlt	r3, #45	; 0x2d
 80048b8:	232b      	movge	r3, #43	; 0x2b
 80048ba:	4604      	mov	r4, r0
 80048bc:	bfb8      	it	lt
 80048be:	4249      	neglt	r1, r1
 80048c0:	2909      	cmp	r1, #9
 80048c2:	f804 2b02 	strb.w	r2, [r4], #2
 80048c6:	7043      	strb	r3, [r0, #1]
 80048c8:	dd21      	ble.n	800490e <__exponent+0x5e>
 80048ca:	f10d 0307 	add.w	r3, sp, #7
 80048ce:	461f      	mov	r7, r3
 80048d0:	260a      	movs	r6, #10
 80048d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80048d6:	fb06 1115 	mls	r1, r6, r5, r1
 80048da:	2d09      	cmp	r5, #9
 80048dc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80048e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048e4:	f103 32ff 	add.w	r2, r3, #4294967295
 80048e8:	4629      	mov	r1, r5
 80048ea:	dc09      	bgt.n	8004900 <__exponent+0x50>
 80048ec:	3130      	adds	r1, #48	; 0x30
 80048ee:	3b02      	subs	r3, #2
 80048f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048f4:	42bb      	cmp	r3, r7
 80048f6:	4622      	mov	r2, r4
 80048f8:	d304      	bcc.n	8004904 <__exponent+0x54>
 80048fa:	1a10      	subs	r0, r2, r0
 80048fc:	b003      	add	sp, #12
 80048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004900:	4613      	mov	r3, r2
 8004902:	e7e6      	b.n	80048d2 <__exponent+0x22>
 8004904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004908:	f804 2b01 	strb.w	r2, [r4], #1
 800490c:	e7f2      	b.n	80048f4 <__exponent+0x44>
 800490e:	2330      	movs	r3, #48	; 0x30
 8004910:	4419      	add	r1, r3
 8004912:	7083      	strb	r3, [r0, #2]
 8004914:	1d02      	adds	r2, r0, #4
 8004916:	70c1      	strb	r1, [r0, #3]
 8004918:	e7ef      	b.n	80048fa <__exponent+0x4a>
	...

0800491c <_printf_float>:
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	b091      	sub	sp, #68	; 0x44
 8004922:	460c      	mov	r4, r1
 8004924:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004926:	4693      	mov	fp, r2
 8004928:	461e      	mov	r6, r3
 800492a:	4605      	mov	r5, r0
 800492c:	f002 fcba 	bl	80072a4 <_localeconv_r>
 8004930:	6803      	ldr	r3, [r0, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	9309      	str	r3, [sp, #36]	; 0x24
 8004936:	f7fb fc0b 	bl	8000150 <strlen>
 800493a:	2300      	movs	r3, #0
 800493c:	930e      	str	r3, [sp, #56]	; 0x38
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	900a      	str	r0, [sp, #40]	; 0x28
 8004942:	3307      	adds	r3, #7
 8004944:	f023 0307 	bic.w	r3, r3, #7
 8004948:	f103 0208 	add.w	r2, r3, #8
 800494c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004950:	f8d4 a000 	ldr.w	sl, [r4]
 8004954:	603a      	str	r2, [r7, #0]
 8004956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800495e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004962:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004966:	930b      	str	r3, [sp, #44]	; 0x2c
 8004968:	f04f 32ff 	mov.w	r2, #4294967295
 800496c:	4ba6      	ldr	r3, [pc, #664]	; (8004c08 <_printf_float+0x2ec>)
 800496e:	4638      	mov	r0, r7
 8004970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004972:	f7fc f84b 	bl	8000a0c <__aeabi_dcmpun>
 8004976:	bb68      	cbnz	r0, 80049d4 <_printf_float+0xb8>
 8004978:	f04f 32ff 	mov.w	r2, #4294967295
 800497c:	4ba2      	ldr	r3, [pc, #648]	; (8004c08 <_printf_float+0x2ec>)
 800497e:	4638      	mov	r0, r7
 8004980:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004982:	f7fc f825 	bl	80009d0 <__aeabi_dcmple>
 8004986:	bb28      	cbnz	r0, 80049d4 <_printf_float+0xb8>
 8004988:	2200      	movs	r2, #0
 800498a:	2300      	movs	r3, #0
 800498c:	4638      	mov	r0, r7
 800498e:	4649      	mov	r1, r9
 8004990:	f7fc f814 	bl	80009bc <__aeabi_dcmplt>
 8004994:	b110      	cbz	r0, 800499c <_printf_float+0x80>
 8004996:	232d      	movs	r3, #45	; 0x2d
 8004998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800499c:	4f9b      	ldr	r7, [pc, #620]	; (8004c0c <_printf_float+0x2f0>)
 800499e:	4b9c      	ldr	r3, [pc, #624]	; (8004c10 <_printf_float+0x2f4>)
 80049a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049a4:	bf98      	it	ls
 80049a6:	461f      	movls	r7, r3
 80049a8:	2303      	movs	r3, #3
 80049aa:	f04f 0900 	mov.w	r9, #0
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	f02a 0304 	bic.w	r3, sl, #4
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	9600      	str	r6, [sp, #0]
 80049b8:	465b      	mov	r3, fp
 80049ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80049bc:	4621      	mov	r1, r4
 80049be:	4628      	mov	r0, r5
 80049c0:	f000 f9e2 	bl	8004d88 <_printf_common>
 80049c4:	3001      	adds	r0, #1
 80049c6:	f040 8090 	bne.w	8004aea <_printf_float+0x1ce>
 80049ca:	f04f 30ff 	mov.w	r0, #4294967295
 80049ce:	b011      	add	sp, #68	; 0x44
 80049d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d4:	463a      	mov	r2, r7
 80049d6:	464b      	mov	r3, r9
 80049d8:	4638      	mov	r0, r7
 80049da:	4649      	mov	r1, r9
 80049dc:	f7fc f816 	bl	8000a0c <__aeabi_dcmpun>
 80049e0:	b110      	cbz	r0, 80049e8 <_printf_float+0xcc>
 80049e2:	4f8c      	ldr	r7, [pc, #560]	; (8004c14 <_printf_float+0x2f8>)
 80049e4:	4b8c      	ldr	r3, [pc, #560]	; (8004c18 <_printf_float+0x2fc>)
 80049e6:	e7db      	b.n	80049a0 <_printf_float+0x84>
 80049e8:	6863      	ldr	r3, [r4, #4]
 80049ea:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80049ee:	1c59      	adds	r1, r3, #1
 80049f0:	a80d      	add	r0, sp, #52	; 0x34
 80049f2:	a90e      	add	r1, sp, #56	; 0x38
 80049f4:	d140      	bne.n	8004a78 <_printf_float+0x15c>
 80049f6:	2306      	movs	r3, #6
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	f04f 0c00 	mov.w	ip, #0
 80049fe:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004a02:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004a06:	6863      	ldr	r3, [r4, #4]
 8004a08:	6022      	str	r2, [r4, #0]
 8004a0a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	463a      	mov	r2, r7
 8004a12:	464b      	mov	r3, r9
 8004a14:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f7ff feed 	bl	80047f8 <__cvt>
 8004a1e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004a22:	2b47      	cmp	r3, #71	; 0x47
 8004a24:	4607      	mov	r7, r0
 8004a26:	d109      	bne.n	8004a3c <_printf_float+0x120>
 8004a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a2a:	1cd8      	adds	r0, r3, #3
 8004a2c:	db02      	blt.n	8004a34 <_printf_float+0x118>
 8004a2e:	6862      	ldr	r2, [r4, #4]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	dd47      	ble.n	8004ac4 <_printf_float+0x1a8>
 8004a34:	f1a8 0802 	sub.w	r8, r8, #2
 8004a38:	fa5f f888 	uxtb.w	r8, r8
 8004a3c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004a40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a42:	d824      	bhi.n	8004a8e <_printf_float+0x172>
 8004a44:	3901      	subs	r1, #1
 8004a46:	4642      	mov	r2, r8
 8004a48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a4c:	910d      	str	r1, [sp, #52]	; 0x34
 8004a4e:	f7ff ff2f 	bl	80048b0 <__exponent>
 8004a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a54:	4681      	mov	r9, r0
 8004a56:	1813      	adds	r3, r2, r0
 8004a58:	2a01      	cmp	r2, #1
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	dc02      	bgt.n	8004a64 <_printf_float+0x148>
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	07d1      	lsls	r1, r2, #31
 8004a62:	d501      	bpl.n	8004a68 <_printf_float+0x14c>
 8004a64:	3301      	adds	r3, #1
 8004a66:	6123      	str	r3, [r4, #16]
 8004a68:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0a2      	beq.n	80049b6 <_printf_float+0x9a>
 8004a70:	232d      	movs	r3, #45	; 0x2d
 8004a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a76:	e79e      	b.n	80049b6 <_printf_float+0x9a>
 8004a78:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004a7c:	f000 816e 	beq.w	8004d5c <_printf_float+0x440>
 8004a80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a84:	d1b9      	bne.n	80049fa <_printf_float+0xde>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1b7      	bne.n	80049fa <_printf_float+0xde>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e7b4      	b.n	80049f8 <_printf_float+0xdc>
 8004a8e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004a92:	d119      	bne.n	8004ac8 <_printf_float+0x1ac>
 8004a94:	2900      	cmp	r1, #0
 8004a96:	6863      	ldr	r3, [r4, #4]
 8004a98:	dd0c      	ble.n	8004ab4 <_printf_float+0x198>
 8004a9a:	6121      	str	r1, [r4, #16]
 8004a9c:	b913      	cbnz	r3, 8004aa4 <_printf_float+0x188>
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	07d2      	lsls	r2, r2, #31
 8004aa2:	d502      	bpl.n	8004aaa <_printf_float+0x18e>
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	440b      	add	r3, r1
 8004aa8:	6123      	str	r3, [r4, #16]
 8004aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aac:	f04f 0900 	mov.w	r9, #0
 8004ab0:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ab2:	e7d9      	b.n	8004a68 <_printf_float+0x14c>
 8004ab4:	b913      	cbnz	r3, 8004abc <_printf_float+0x1a0>
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	07d0      	lsls	r0, r2, #31
 8004aba:	d501      	bpl.n	8004ac0 <_printf_float+0x1a4>
 8004abc:	3302      	adds	r3, #2
 8004abe:	e7f3      	b.n	8004aa8 <_printf_float+0x18c>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e7f1      	b.n	8004aa8 <_printf_float+0x18c>
 8004ac4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004ac8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004acc:	4293      	cmp	r3, r2
 8004ace:	db05      	blt.n	8004adc <_printf_float+0x1c0>
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	6123      	str	r3, [r4, #16]
 8004ad4:	07d1      	lsls	r1, r2, #31
 8004ad6:	d5e8      	bpl.n	8004aaa <_printf_float+0x18e>
 8004ad8:	3301      	adds	r3, #1
 8004ada:	e7e5      	b.n	8004aa8 <_printf_float+0x18c>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bfcc      	ite	gt
 8004ae0:	2301      	movgt	r3, #1
 8004ae2:	f1c3 0302 	rsble	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	e7de      	b.n	8004aa8 <_printf_float+0x18c>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	055a      	lsls	r2, r3, #21
 8004aee:	d407      	bmi.n	8004b00 <_printf_float+0x1e4>
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	463a      	mov	r2, r7
 8004af4:	4659      	mov	r1, fp
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b0      	blx	r6
 8004afa:	3001      	adds	r0, #1
 8004afc:	d129      	bne.n	8004b52 <_printf_float+0x236>
 8004afe:	e764      	b.n	80049ca <_printf_float+0xae>
 8004b00:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004b04:	f240 80d7 	bls.w	8004cb6 <_printf_float+0x39a>
 8004b08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f7fb ff4a 	bl	80009a8 <__aeabi_dcmpeq>
 8004b14:	b388      	cbz	r0, 8004b7a <_printf_float+0x25e>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4a40      	ldr	r2, [pc, #256]	; (8004c1c <_printf_float+0x300>)
 8004b1a:	4659      	mov	r1, fp
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b0      	blx	r6
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f af52 	beq.w	80049ca <_printf_float+0xae>
 8004b26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	db02      	blt.n	8004b34 <_printf_float+0x218>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	07d8      	lsls	r0, r3, #31
 8004b32:	d50e      	bpl.n	8004b52 <_printf_float+0x236>
 8004b34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b38:	4659      	mov	r1, fp
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	47b0      	blx	r6
 8004b3e:	3001      	adds	r0, #1
 8004b40:	f43f af43 	beq.w	80049ca <_printf_float+0xae>
 8004b44:	2700      	movs	r7, #0
 8004b46:	f104 081a 	add.w	r8, r4, #26
 8004b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	42bb      	cmp	r3, r7
 8004b50:	dc09      	bgt.n	8004b66 <_printf_float+0x24a>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	079f      	lsls	r7, r3, #30
 8004b56:	f100 80fd 	bmi.w	8004d54 <_printf_float+0x438>
 8004b5a:	68e0      	ldr	r0, [r4, #12]
 8004b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b5e:	4298      	cmp	r0, r3
 8004b60:	bfb8      	it	lt
 8004b62:	4618      	movlt	r0, r3
 8004b64:	e733      	b.n	80049ce <_printf_float+0xb2>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4642      	mov	r2, r8
 8004b6a:	4659      	mov	r1, fp
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b0      	blx	r6
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f af2a 	beq.w	80049ca <_printf_float+0xae>
 8004b76:	3701      	adds	r7, #1
 8004b78:	e7e7      	b.n	8004b4a <_printf_float+0x22e>
 8004b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dc2b      	bgt.n	8004bd8 <_printf_float+0x2bc>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <_printf_float+0x300>)
 8004b84:	4659      	mov	r1, fp
 8004b86:	4628      	mov	r0, r5
 8004b88:	47b0      	blx	r6
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f43f af1d 	beq.w	80049ca <_printf_float+0xae>
 8004b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b92:	b923      	cbnz	r3, 8004b9e <_printf_float+0x282>
 8004b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b96:	b913      	cbnz	r3, 8004b9e <_printf_float+0x282>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	07d9      	lsls	r1, r3, #31
 8004b9c:	d5d9      	bpl.n	8004b52 <_printf_float+0x236>
 8004b9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ba2:	4659      	mov	r1, fp
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b0      	blx	r6
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f43f af0e 	beq.w	80049ca <_printf_float+0xae>
 8004bae:	f04f 0800 	mov.w	r8, #0
 8004bb2:	f104 091a 	add.w	r9, r4, #26
 8004bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bb8:	425b      	negs	r3, r3
 8004bba:	4543      	cmp	r3, r8
 8004bbc:	dc01      	bgt.n	8004bc2 <_printf_float+0x2a6>
 8004bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bc0:	e797      	b.n	8004af2 <_printf_float+0x1d6>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	464a      	mov	r2, r9
 8004bc6:	4659      	mov	r1, fp
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b0      	blx	r6
 8004bcc:	3001      	adds	r0, #1
 8004bce:	f43f aefc 	beq.w	80049ca <_printf_float+0xae>
 8004bd2:	f108 0801 	add.w	r8, r8, #1
 8004bd6:	e7ee      	b.n	8004bb6 <_printf_float+0x29a>
 8004bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	bfa8      	it	ge
 8004be0:	461a      	movge	r2, r3
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	4690      	mov	r8, r2
 8004be6:	dd07      	ble.n	8004bf8 <_printf_float+0x2dc>
 8004be8:	4613      	mov	r3, r2
 8004bea:	4659      	mov	r1, fp
 8004bec:	463a      	mov	r2, r7
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b0      	blx	r6
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f aee9 	beq.w	80049ca <_printf_float+0xae>
 8004bf8:	f104 031a 	add.w	r3, r4, #26
 8004bfc:	f04f 0a00 	mov.w	sl, #0
 8004c00:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c06:	e015      	b.n	8004c34 <_printf_float+0x318>
 8004c08:	7fefffff 	.word	0x7fefffff
 8004c0c:	08007ef2 	.word	0x08007ef2
 8004c10:	08007eee 	.word	0x08007eee
 8004c14:	08007efa 	.word	0x08007efa
 8004c18:	08007ef6 	.word	0x08007ef6
 8004c1c:	08007efe 	.word	0x08007efe
 8004c20:	2301      	movs	r3, #1
 8004c22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c24:	4659      	mov	r1, fp
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b0      	blx	r6
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	f43f aecd 	beq.w	80049ca <_printf_float+0xae>
 8004c30:	f10a 0a01 	add.w	sl, sl, #1
 8004c34:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004c38:	eba9 0308 	sub.w	r3, r9, r8
 8004c3c:	4553      	cmp	r3, sl
 8004c3e:	dcef      	bgt.n	8004c20 <_printf_float+0x304>
 8004c40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c44:	429a      	cmp	r2, r3
 8004c46:	444f      	add	r7, r9
 8004c48:	db14      	blt.n	8004c74 <_printf_float+0x358>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	07da      	lsls	r2, r3, #31
 8004c4e:	d411      	bmi.n	8004c74 <_printf_float+0x358>
 8004c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c54:	eba3 0209 	sub.w	r2, r3, r9
 8004c58:	eba3 0901 	sub.w	r9, r3, r1
 8004c5c:	4591      	cmp	r9, r2
 8004c5e:	bfa8      	it	ge
 8004c60:	4691      	movge	r9, r2
 8004c62:	f1b9 0f00 	cmp.w	r9, #0
 8004c66:	dc0d      	bgt.n	8004c84 <_printf_float+0x368>
 8004c68:	2700      	movs	r7, #0
 8004c6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c6e:	f104 081a 	add.w	r8, r4, #26
 8004c72:	e018      	b.n	8004ca6 <_printf_float+0x38a>
 8004c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c78:	4659      	mov	r1, fp
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	47b0      	blx	r6
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d1e6      	bne.n	8004c50 <_printf_float+0x334>
 8004c82:	e6a2      	b.n	80049ca <_printf_float+0xae>
 8004c84:	464b      	mov	r3, r9
 8004c86:	463a      	mov	r2, r7
 8004c88:	4659      	mov	r1, fp
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b0      	blx	r6
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d1ea      	bne.n	8004c68 <_printf_float+0x34c>
 8004c92:	e69a      	b.n	80049ca <_printf_float+0xae>
 8004c94:	2301      	movs	r3, #1
 8004c96:	4642      	mov	r2, r8
 8004c98:	4659      	mov	r1, fp
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b0      	blx	r6
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	f43f ae93 	beq.w	80049ca <_printf_float+0xae>
 8004ca4:	3701      	adds	r7, #1
 8004ca6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	eba3 0309 	sub.w	r3, r3, r9
 8004cb0:	42bb      	cmp	r3, r7
 8004cb2:	dcef      	bgt.n	8004c94 <_printf_float+0x378>
 8004cb4:	e74d      	b.n	8004b52 <_printf_float+0x236>
 8004cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cb8:	2a01      	cmp	r2, #1
 8004cba:	dc01      	bgt.n	8004cc0 <_printf_float+0x3a4>
 8004cbc:	07db      	lsls	r3, r3, #31
 8004cbe:	d538      	bpl.n	8004d32 <_printf_float+0x416>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	463a      	mov	r2, r7
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b0      	blx	r6
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f ae7d 	beq.w	80049ca <_printf_float+0xae>
 8004cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b0      	blx	r6
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f107 0701 	add.w	r7, r7, #1
 8004ce0:	f43f ae73 	beq.w	80049ca <_printf_float+0xae>
 8004ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cea:	2200      	movs	r2, #0
 8004cec:	f103 38ff 	add.w	r8, r3, #4294967295
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f7fb fe59 	bl	80009a8 <__aeabi_dcmpeq>
 8004cf6:	b9c0      	cbnz	r0, 8004d2a <_printf_float+0x40e>
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	463a      	mov	r2, r7
 8004cfc:	4659      	mov	r1, fp
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b0      	blx	r6
 8004d02:	3001      	adds	r0, #1
 8004d04:	d10d      	bne.n	8004d22 <_printf_float+0x406>
 8004d06:	e660      	b.n	80049ca <_printf_float+0xae>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b0      	blx	r6
 8004d12:	3001      	adds	r0, #1
 8004d14:	f43f ae59 	beq.w	80049ca <_printf_float+0xae>
 8004d18:	3701      	adds	r7, #1
 8004d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	42bb      	cmp	r3, r7
 8004d20:	dcf2      	bgt.n	8004d08 <_printf_float+0x3ec>
 8004d22:	464b      	mov	r3, r9
 8004d24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d28:	e6e4      	b.n	8004af4 <_printf_float+0x1d8>
 8004d2a:	2700      	movs	r7, #0
 8004d2c:	f104 081a 	add.w	r8, r4, #26
 8004d30:	e7f3      	b.n	8004d1a <_printf_float+0x3fe>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e7e1      	b.n	8004cfa <_printf_float+0x3de>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4642      	mov	r2, r8
 8004d3a:	4659      	mov	r1, fp
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b0      	blx	r6
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f ae42 	beq.w	80049ca <_printf_float+0xae>
 8004d46:	3701      	adds	r7, #1
 8004d48:	68e3      	ldr	r3, [r4, #12]
 8004d4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	42bb      	cmp	r3, r7
 8004d50:	dcf1      	bgt.n	8004d36 <_printf_float+0x41a>
 8004d52:	e702      	b.n	8004b5a <_printf_float+0x23e>
 8004d54:	2700      	movs	r7, #0
 8004d56:	f104 0819 	add.w	r8, r4, #25
 8004d5a:	e7f5      	b.n	8004d48 <_printf_float+0x42c>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f43f ae94 	beq.w	8004a8a <_printf_float+0x16e>
 8004d62:	f04f 0c00 	mov.w	ip, #0
 8004d66:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004d6a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004d6e:	6022      	str	r2, [r4, #0]
 8004d70:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004d74:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	463a      	mov	r2, r7
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f7ff fd3a 	bl	80047f8 <__cvt>
 8004d84:	4607      	mov	r7, r0
 8004d86:	e64f      	b.n	8004a28 <_printf_float+0x10c>

08004d88 <_printf_common>:
 8004d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	4691      	mov	r9, r2
 8004d8e:	461f      	mov	r7, r3
 8004d90:	688a      	ldr	r2, [r1, #8]
 8004d92:	690b      	ldr	r3, [r1, #16]
 8004d94:	4606      	mov	r6, r0
 8004d96:	4293      	cmp	r3, r2
 8004d98:	bfb8      	it	lt
 8004d9a:	4613      	movlt	r3, r2
 8004d9c:	f8c9 3000 	str.w	r3, [r9]
 8004da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004da4:	460c      	mov	r4, r1
 8004da6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004daa:	b112      	cbz	r2, 8004db2 <_printf_common+0x2a>
 8004dac:	3301      	adds	r3, #1
 8004dae:	f8c9 3000 	str.w	r3, [r9]
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	0699      	lsls	r1, r3, #26
 8004db6:	bf42      	ittt	mi
 8004db8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004dbc:	3302      	addmi	r3, #2
 8004dbe:	f8c9 3000 	strmi.w	r3, [r9]
 8004dc2:	6825      	ldr	r5, [r4, #0]
 8004dc4:	f015 0506 	ands.w	r5, r5, #6
 8004dc8:	d107      	bne.n	8004dda <_printf_common+0x52>
 8004dca:	f104 0a19 	add.w	sl, r4, #25
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	42ab      	cmp	r3, r5
 8004dd8:	dc29      	bgt.n	8004e2e <_printf_common+0xa6>
 8004dda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	3300      	adds	r3, #0
 8004de2:	bf18      	it	ne
 8004de4:	2301      	movne	r3, #1
 8004de6:	0692      	lsls	r2, r2, #26
 8004de8:	d42e      	bmi.n	8004e48 <_printf_common+0xc0>
 8004dea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dee:	4639      	mov	r1, r7
 8004df0:	4630      	mov	r0, r6
 8004df2:	47c0      	blx	r8
 8004df4:	3001      	adds	r0, #1
 8004df6:	d021      	beq.n	8004e3c <_printf_common+0xb4>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	68e5      	ldr	r5, [r4, #12]
 8004dfc:	f003 0306 	and.w	r3, r3, #6
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	bf18      	it	ne
 8004e04:	2500      	movne	r5, #0
 8004e06:	f8d9 2000 	ldr.w	r2, [r9]
 8004e0a:	f04f 0900 	mov.w	r9, #0
 8004e0e:	bf08      	it	eq
 8004e10:	1aad      	subeq	r5, r5, r2
 8004e12:	68a3      	ldr	r3, [r4, #8]
 8004e14:	6922      	ldr	r2, [r4, #16]
 8004e16:	bf08      	it	eq
 8004e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	bfc4      	itt	gt
 8004e20:	1a9b      	subgt	r3, r3, r2
 8004e22:	18ed      	addgt	r5, r5, r3
 8004e24:	341a      	adds	r4, #26
 8004e26:	454d      	cmp	r5, r9
 8004e28:	d11a      	bne.n	8004e60 <_printf_common+0xd8>
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	e008      	b.n	8004e40 <_printf_common+0xb8>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4652      	mov	r2, sl
 8004e32:	4639      	mov	r1, r7
 8004e34:	4630      	mov	r0, r6
 8004e36:	47c0      	blx	r8
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d103      	bne.n	8004e44 <_printf_common+0xbc>
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e44:	3501      	adds	r5, #1
 8004e46:	e7c2      	b.n	8004dce <_printf_common+0x46>
 8004e48:	2030      	movs	r0, #48	; 0x30
 8004e4a:	18e1      	adds	r1, r4, r3
 8004e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e56:	4422      	add	r2, r4
 8004e58:	3302      	adds	r3, #2
 8004e5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e5e:	e7c4      	b.n	8004dea <_printf_common+0x62>
 8004e60:	2301      	movs	r3, #1
 8004e62:	4622      	mov	r2, r4
 8004e64:	4639      	mov	r1, r7
 8004e66:	4630      	mov	r0, r6
 8004e68:	47c0      	blx	r8
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d0e6      	beq.n	8004e3c <_printf_common+0xb4>
 8004e6e:	f109 0901 	add.w	r9, r9, #1
 8004e72:	e7d8      	b.n	8004e26 <_printf_common+0x9e>

08004e74 <_printf_i>:
 8004e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	7e09      	ldrb	r1, [r1, #24]
 8004e80:	b085      	sub	sp, #20
 8004e82:	296e      	cmp	r1, #110	; 0x6e
 8004e84:	4617      	mov	r7, r2
 8004e86:	4606      	mov	r6, r0
 8004e88:	4698      	mov	r8, r3
 8004e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e8c:	f000 80b3 	beq.w	8004ff6 <_printf_i+0x182>
 8004e90:	d822      	bhi.n	8004ed8 <_printf_i+0x64>
 8004e92:	2963      	cmp	r1, #99	; 0x63
 8004e94:	d036      	beq.n	8004f04 <_printf_i+0x90>
 8004e96:	d80a      	bhi.n	8004eae <_printf_i+0x3a>
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	f000 80b9 	beq.w	8005010 <_printf_i+0x19c>
 8004e9e:	2958      	cmp	r1, #88	; 0x58
 8004ea0:	f000 8083 	beq.w	8004faa <_printf_i+0x136>
 8004ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004eac:	e032      	b.n	8004f14 <_printf_i+0xa0>
 8004eae:	2964      	cmp	r1, #100	; 0x64
 8004eb0:	d001      	beq.n	8004eb6 <_printf_i+0x42>
 8004eb2:	2969      	cmp	r1, #105	; 0x69
 8004eb4:	d1f6      	bne.n	8004ea4 <_printf_i+0x30>
 8004eb6:	6820      	ldr	r0, [r4, #0]
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	0605      	lsls	r5, r0, #24
 8004ebc:	f103 0104 	add.w	r1, r3, #4
 8004ec0:	d52a      	bpl.n	8004f18 <_printf_i+0xa4>
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6011      	str	r1, [r2, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da03      	bge.n	8004ed2 <_printf_i+0x5e>
 8004eca:	222d      	movs	r2, #45	; 0x2d
 8004ecc:	425b      	negs	r3, r3
 8004ece:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ed2:	486f      	ldr	r0, [pc, #444]	; (8005090 <_printf_i+0x21c>)
 8004ed4:	220a      	movs	r2, #10
 8004ed6:	e039      	b.n	8004f4c <_printf_i+0xd8>
 8004ed8:	2973      	cmp	r1, #115	; 0x73
 8004eda:	f000 809d 	beq.w	8005018 <_printf_i+0x1a4>
 8004ede:	d808      	bhi.n	8004ef2 <_printf_i+0x7e>
 8004ee0:	296f      	cmp	r1, #111	; 0x6f
 8004ee2:	d020      	beq.n	8004f26 <_printf_i+0xb2>
 8004ee4:	2970      	cmp	r1, #112	; 0x70
 8004ee6:	d1dd      	bne.n	8004ea4 <_printf_i+0x30>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	f043 0320 	orr.w	r3, r3, #32
 8004eee:	6023      	str	r3, [r4, #0]
 8004ef0:	e003      	b.n	8004efa <_printf_i+0x86>
 8004ef2:	2975      	cmp	r1, #117	; 0x75
 8004ef4:	d017      	beq.n	8004f26 <_printf_i+0xb2>
 8004ef6:	2978      	cmp	r1, #120	; 0x78
 8004ef8:	d1d4      	bne.n	8004ea4 <_printf_i+0x30>
 8004efa:	2378      	movs	r3, #120	; 0x78
 8004efc:	4865      	ldr	r0, [pc, #404]	; (8005094 <_printf_i+0x220>)
 8004efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f02:	e055      	b.n	8004fb0 <_printf_i+0x13c>
 8004f04:	6813      	ldr	r3, [r2, #0]
 8004f06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f0a:	1d19      	adds	r1, r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6011      	str	r1, [r2, #0]
 8004f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f14:	2301      	movs	r3, #1
 8004f16:	e08c      	b.n	8005032 <_printf_i+0x1be>
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f1e:	6011      	str	r1, [r2, #0]
 8004f20:	bf18      	it	ne
 8004f22:	b21b      	sxthne	r3, r3
 8004f24:	e7cf      	b.n	8004ec6 <_printf_i+0x52>
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	6825      	ldr	r5, [r4, #0]
 8004f2a:	1d18      	adds	r0, r3, #4
 8004f2c:	6010      	str	r0, [r2, #0]
 8004f2e:	0628      	lsls	r0, r5, #24
 8004f30:	d501      	bpl.n	8004f36 <_printf_i+0xc2>
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	e002      	b.n	8004f3c <_printf_i+0xc8>
 8004f36:	0668      	lsls	r0, r5, #25
 8004f38:	d5fb      	bpl.n	8004f32 <_printf_i+0xbe>
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	296f      	cmp	r1, #111	; 0x6f
 8004f3e:	bf14      	ite	ne
 8004f40:	220a      	movne	r2, #10
 8004f42:	2208      	moveq	r2, #8
 8004f44:	4852      	ldr	r0, [pc, #328]	; (8005090 <_printf_i+0x21c>)
 8004f46:	2100      	movs	r1, #0
 8004f48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f4c:	6865      	ldr	r5, [r4, #4]
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	60a5      	str	r5, [r4, #8]
 8004f52:	f2c0 8095 	blt.w	8005080 <_printf_i+0x20c>
 8004f56:	6821      	ldr	r1, [r4, #0]
 8004f58:	f021 0104 	bic.w	r1, r1, #4
 8004f5c:	6021      	str	r1, [r4, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d13d      	bne.n	8004fde <_printf_i+0x16a>
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	f040 808e 	bne.w	8005084 <_printf_i+0x210>
 8004f68:	4665      	mov	r5, ip
 8004f6a:	2a08      	cmp	r2, #8
 8004f6c:	d10b      	bne.n	8004f86 <_printf_i+0x112>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	07db      	lsls	r3, r3, #31
 8004f72:	d508      	bpl.n	8004f86 <_printf_i+0x112>
 8004f74:	6923      	ldr	r3, [r4, #16]
 8004f76:	6862      	ldr	r2, [r4, #4]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	bfde      	ittt	le
 8004f7c:	2330      	movle	r3, #48	; 0x30
 8004f7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f86:	ebac 0305 	sub.w	r3, ip, r5
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	f8cd 8000 	str.w	r8, [sp]
 8004f90:	463b      	mov	r3, r7
 8004f92:	aa03      	add	r2, sp, #12
 8004f94:	4621      	mov	r1, r4
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7ff fef6 	bl	8004d88 <_printf_common>
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d14d      	bne.n	800503c <_printf_i+0x1c8>
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	b005      	add	sp, #20
 8004fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004faa:	4839      	ldr	r0, [pc, #228]	; (8005090 <_printf_i+0x21c>)
 8004fac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004fb0:	6813      	ldr	r3, [r2, #0]
 8004fb2:	6821      	ldr	r1, [r4, #0]
 8004fb4:	1d1d      	adds	r5, r3, #4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6015      	str	r5, [r2, #0]
 8004fba:	060a      	lsls	r2, r1, #24
 8004fbc:	d50b      	bpl.n	8004fd6 <_printf_i+0x162>
 8004fbe:	07ca      	lsls	r2, r1, #31
 8004fc0:	bf44      	itt	mi
 8004fc2:	f041 0120 	orrmi.w	r1, r1, #32
 8004fc6:	6021      	strmi	r1, [r4, #0]
 8004fc8:	b91b      	cbnz	r3, 8004fd2 <_printf_i+0x15e>
 8004fca:	6822      	ldr	r2, [r4, #0]
 8004fcc:	f022 0220 	bic.w	r2, r2, #32
 8004fd0:	6022      	str	r2, [r4, #0]
 8004fd2:	2210      	movs	r2, #16
 8004fd4:	e7b7      	b.n	8004f46 <_printf_i+0xd2>
 8004fd6:	064d      	lsls	r5, r1, #25
 8004fd8:	bf48      	it	mi
 8004fda:	b29b      	uxthmi	r3, r3
 8004fdc:	e7ef      	b.n	8004fbe <_printf_i+0x14a>
 8004fde:	4665      	mov	r5, ip
 8004fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fe4:	fb02 3311 	mls	r3, r2, r1, r3
 8004fe8:	5cc3      	ldrb	r3, [r0, r3]
 8004fea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fee:	460b      	mov	r3, r1
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	d1f5      	bne.n	8004fe0 <_printf_i+0x16c>
 8004ff4:	e7b9      	b.n	8004f6a <_printf_i+0xf6>
 8004ff6:	6813      	ldr	r3, [r2, #0]
 8004ff8:	6825      	ldr	r5, [r4, #0]
 8004ffa:	1d18      	adds	r0, r3, #4
 8004ffc:	6961      	ldr	r1, [r4, #20]
 8004ffe:	6010      	str	r0, [r2, #0]
 8005000:	0628      	lsls	r0, r5, #24
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	d501      	bpl.n	800500a <_printf_i+0x196>
 8005006:	6019      	str	r1, [r3, #0]
 8005008:	e002      	b.n	8005010 <_printf_i+0x19c>
 800500a:	066a      	lsls	r2, r5, #25
 800500c:	d5fb      	bpl.n	8005006 <_printf_i+0x192>
 800500e:	8019      	strh	r1, [r3, #0]
 8005010:	2300      	movs	r3, #0
 8005012:	4665      	mov	r5, ip
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	e7b9      	b.n	8004f8c <_printf_i+0x118>
 8005018:	6813      	ldr	r3, [r2, #0]
 800501a:	1d19      	adds	r1, r3, #4
 800501c:	6011      	str	r1, [r2, #0]
 800501e:	681d      	ldr	r5, [r3, #0]
 8005020:	6862      	ldr	r2, [r4, #4]
 8005022:	2100      	movs	r1, #0
 8005024:	4628      	mov	r0, r5
 8005026:	f002 f94b 	bl	80072c0 <memchr>
 800502a:	b108      	cbz	r0, 8005030 <_printf_i+0x1bc>
 800502c:	1b40      	subs	r0, r0, r5
 800502e:	6060      	str	r0, [r4, #4]
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	6123      	str	r3, [r4, #16]
 8005034:	2300      	movs	r3, #0
 8005036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503a:	e7a7      	b.n	8004f8c <_printf_i+0x118>
 800503c:	6923      	ldr	r3, [r4, #16]
 800503e:	462a      	mov	r2, r5
 8005040:	4639      	mov	r1, r7
 8005042:	4630      	mov	r0, r6
 8005044:	47c0      	blx	r8
 8005046:	3001      	adds	r0, #1
 8005048:	d0aa      	beq.n	8004fa0 <_printf_i+0x12c>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	079b      	lsls	r3, r3, #30
 800504e:	d413      	bmi.n	8005078 <_printf_i+0x204>
 8005050:	68e0      	ldr	r0, [r4, #12]
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	4298      	cmp	r0, r3
 8005056:	bfb8      	it	lt
 8005058:	4618      	movlt	r0, r3
 800505a:	e7a3      	b.n	8004fa4 <_printf_i+0x130>
 800505c:	2301      	movs	r3, #1
 800505e:	464a      	mov	r2, r9
 8005060:	4639      	mov	r1, r7
 8005062:	4630      	mov	r0, r6
 8005064:	47c0      	blx	r8
 8005066:	3001      	adds	r0, #1
 8005068:	d09a      	beq.n	8004fa0 <_printf_i+0x12c>
 800506a:	3501      	adds	r5, #1
 800506c:	68e3      	ldr	r3, [r4, #12]
 800506e:	9a03      	ldr	r2, [sp, #12]
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	42ab      	cmp	r3, r5
 8005074:	dcf2      	bgt.n	800505c <_printf_i+0x1e8>
 8005076:	e7eb      	b.n	8005050 <_printf_i+0x1dc>
 8005078:	2500      	movs	r5, #0
 800507a:	f104 0919 	add.w	r9, r4, #25
 800507e:	e7f5      	b.n	800506c <_printf_i+0x1f8>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1ac      	bne.n	8004fde <_printf_i+0x16a>
 8005084:	7803      	ldrb	r3, [r0, #0]
 8005086:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800508a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800508e:	e76c      	b.n	8004f6a <_printf_i+0xf6>
 8005090:	08007f00 	.word	0x08007f00
 8005094:	08007f11 	.word	0x08007f11

08005098 <_sbrk_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	2300      	movs	r3, #0
 800509c:	4c05      	ldr	r4, [pc, #20]	; (80050b4 <_sbrk_r+0x1c>)
 800509e:	4605      	mov	r5, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	f7fc f870 	bl	8001188 <_sbrk>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_sbrk_r+0x1a>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_sbrk_r+0x1a>
 80050b0:	602b      	str	r3, [r5, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	20000568 	.word	0x20000568

080050b8 <siprintf>:
 80050b8:	b40e      	push	{r1, r2, r3}
 80050ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050be:	b500      	push	{lr}
 80050c0:	b09c      	sub	sp, #112	; 0x70
 80050c2:	ab1d      	add	r3, sp, #116	; 0x74
 80050c4:	9002      	str	r0, [sp, #8]
 80050c6:	9006      	str	r0, [sp, #24]
 80050c8:	9107      	str	r1, [sp, #28]
 80050ca:	9104      	str	r1, [sp, #16]
 80050cc:	4808      	ldr	r0, [pc, #32]	; (80050f0 <siprintf+0x38>)
 80050ce:	4909      	ldr	r1, [pc, #36]	; (80050f4 <siprintf+0x3c>)
 80050d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d4:	9105      	str	r1, [sp, #20]
 80050d6:	6800      	ldr	r0, [r0, #0]
 80050d8:	a902      	add	r1, sp, #8
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	f002 fd6c 	bl	8007bb8 <_svfiprintf_r>
 80050e0:	2200      	movs	r2, #0
 80050e2:	9b02      	ldr	r3, [sp, #8]
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	b01c      	add	sp, #112	; 0x70
 80050e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050ec:	b003      	add	sp, #12
 80050ee:	4770      	bx	lr
 80050f0:	2000000c 	.word	0x2000000c
 80050f4:	ffff0208 	.word	0xffff0208

080050f8 <strchr>:
 80050f8:	b2c9      	uxtb	r1, r1
 80050fa:	4603      	mov	r3, r0
 80050fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005100:	b11a      	cbz	r2, 800510a <strchr+0x12>
 8005102:	428a      	cmp	r2, r1
 8005104:	d1f9      	bne.n	80050fa <strchr+0x2>
 8005106:	4618      	mov	r0, r3
 8005108:	4770      	bx	lr
 800510a:	2900      	cmp	r1, #0
 800510c:	bf18      	it	ne
 800510e:	2300      	movne	r3, #0
 8005110:	e7f9      	b.n	8005106 <strchr+0xe>

08005112 <strcpy>:
 8005112:	4603      	mov	r3, r0
 8005114:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005118:	f803 2b01 	strb.w	r2, [r3], #1
 800511c:	2a00      	cmp	r2, #0
 800511e:	d1f9      	bne.n	8005114 <strcpy+0x2>
 8005120:	4770      	bx	lr

08005122 <strncmp>:
 8005122:	b510      	push	{r4, lr}
 8005124:	b16a      	cbz	r2, 8005142 <strncmp+0x20>
 8005126:	3901      	subs	r1, #1
 8005128:	1884      	adds	r4, r0, r2
 800512a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800512e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005132:	4293      	cmp	r3, r2
 8005134:	d103      	bne.n	800513e <strncmp+0x1c>
 8005136:	42a0      	cmp	r0, r4
 8005138:	d001      	beq.n	800513e <strncmp+0x1c>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f5      	bne.n	800512a <strncmp+0x8>
 800513e:	1a98      	subs	r0, r3, r2
 8005140:	bd10      	pop	{r4, pc}
 8005142:	4610      	mov	r0, r2
 8005144:	e7fc      	b.n	8005140 <strncmp+0x1e>

08005146 <strncpy>:
 8005146:	b570      	push	{r4, r5, r6, lr}
 8005148:	4604      	mov	r4, r0
 800514a:	3901      	subs	r1, #1
 800514c:	b902      	cbnz	r2, 8005150 <strncpy+0xa>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	4623      	mov	r3, r4
 8005152:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005156:	1e56      	subs	r6, r2, #1
 8005158:	f803 5b01 	strb.w	r5, [r3], #1
 800515c:	b92d      	cbnz	r5, 800516a <strncpy+0x24>
 800515e:	4414      	add	r4, r2
 8005160:	42a3      	cmp	r3, r4
 8005162:	d0f4      	beq.n	800514e <strncpy+0x8>
 8005164:	f803 5b01 	strb.w	r5, [r3], #1
 8005168:	e7fa      	b.n	8005160 <strncpy+0x1a>
 800516a:	461c      	mov	r4, r3
 800516c:	4632      	mov	r2, r6
 800516e:	e7ed      	b.n	800514c <strncpy+0x6>

08005170 <strstr>:
 8005170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005172:	7803      	ldrb	r3, [r0, #0]
 8005174:	b17b      	cbz	r3, 8005196 <strstr+0x26>
 8005176:	4604      	mov	r4, r0
 8005178:	7823      	ldrb	r3, [r4, #0]
 800517a:	4620      	mov	r0, r4
 800517c:	1c66      	adds	r6, r4, #1
 800517e:	b17b      	cbz	r3, 80051a0 <strstr+0x30>
 8005180:	1e4a      	subs	r2, r1, #1
 8005182:	1e63      	subs	r3, r4, #1
 8005184:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8005188:	b14d      	cbz	r5, 800519e <strstr+0x2e>
 800518a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800518e:	4634      	mov	r4, r6
 8005190:	42af      	cmp	r7, r5
 8005192:	d0f7      	beq.n	8005184 <strstr+0x14>
 8005194:	e7f0      	b.n	8005178 <strstr+0x8>
 8005196:	780b      	ldrb	r3, [r1, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf18      	it	ne
 800519c:	2000      	movne	r0, #0
 800519e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a0:	4618      	mov	r0, r3
 80051a2:	e7fc      	b.n	800519e <strstr+0x2e>

080051a4 <sulp>:
 80051a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a8:	460f      	mov	r7, r1
 80051aa:	4690      	mov	r8, r2
 80051ac:	f002 fb6e 	bl	800788c <__ulp>
 80051b0:	4604      	mov	r4, r0
 80051b2:	460d      	mov	r5, r1
 80051b4:	f1b8 0f00 	cmp.w	r8, #0
 80051b8:	d011      	beq.n	80051de <sulp+0x3a>
 80051ba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80051be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	dd0b      	ble.n	80051de <sulp+0x3a>
 80051c6:	2400      	movs	r4, #0
 80051c8:	051b      	lsls	r3, r3, #20
 80051ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80051ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80051d2:	4622      	mov	r2, r4
 80051d4:	462b      	mov	r3, r5
 80051d6:	f7fb f97f 	bl	80004d8 <__aeabi_dmul>
 80051da:	4604      	mov	r4, r0
 80051dc:	460d      	mov	r5, r1
 80051de:	4620      	mov	r0, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080051e8 <_strtod_l>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	461f      	mov	r7, r3
 80051ee:	2300      	movs	r3, #0
 80051f0:	b0a1      	sub	sp, #132	; 0x84
 80051f2:	4683      	mov	fp, r0
 80051f4:	4638      	mov	r0, r7
 80051f6:	460e      	mov	r6, r1
 80051f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80051fa:	931c      	str	r3, [sp, #112]	; 0x70
 80051fc:	f002 f850 	bl	80072a0 <__localeconv_l>
 8005200:	4680      	mov	r8, r0
 8005202:	6800      	ldr	r0, [r0, #0]
 8005204:	f7fa ffa4 	bl	8000150 <strlen>
 8005208:	f04f 0900 	mov.w	r9, #0
 800520c:	4604      	mov	r4, r0
 800520e:	f04f 0a00 	mov.w	sl, #0
 8005212:	961b      	str	r6, [sp, #108]	; 0x6c
 8005214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005216:	781a      	ldrb	r2, [r3, #0]
 8005218:	2a0d      	cmp	r2, #13
 800521a:	d832      	bhi.n	8005282 <_strtod_l+0x9a>
 800521c:	2a09      	cmp	r2, #9
 800521e:	d236      	bcs.n	800528e <_strtod_l+0xa6>
 8005220:	2a00      	cmp	r2, #0
 8005222:	d03e      	beq.n	80052a2 <_strtod_l+0xba>
 8005224:	2300      	movs	r3, #0
 8005226:	930d      	str	r3, [sp, #52]	; 0x34
 8005228:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800522a:	782b      	ldrb	r3, [r5, #0]
 800522c:	2b30      	cmp	r3, #48	; 0x30
 800522e:	f040 80ac 	bne.w	800538a <_strtod_l+0x1a2>
 8005232:	786b      	ldrb	r3, [r5, #1]
 8005234:	2b58      	cmp	r3, #88	; 0x58
 8005236:	d001      	beq.n	800523c <_strtod_l+0x54>
 8005238:	2b78      	cmp	r3, #120	; 0x78
 800523a:	d167      	bne.n	800530c <_strtod_l+0x124>
 800523c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800523e:	9702      	str	r7, [sp, #8]
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	ab1c      	add	r3, sp, #112	; 0x70
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	4a89      	ldr	r2, [pc, #548]	; (800546c <_strtod_l+0x284>)
 8005248:	ab1d      	add	r3, sp, #116	; 0x74
 800524a:	a91b      	add	r1, sp, #108	; 0x6c
 800524c:	4658      	mov	r0, fp
 800524e:	f001 fd4f 	bl	8006cf0 <__gethex>
 8005252:	f010 0407 	ands.w	r4, r0, #7
 8005256:	4606      	mov	r6, r0
 8005258:	d005      	beq.n	8005266 <_strtod_l+0x7e>
 800525a:	2c06      	cmp	r4, #6
 800525c:	d12b      	bne.n	80052b6 <_strtod_l+0xce>
 800525e:	2300      	movs	r3, #0
 8005260:	3501      	adds	r5, #1
 8005262:	951b      	str	r5, [sp, #108]	; 0x6c
 8005264:	930d      	str	r3, [sp, #52]	; 0x34
 8005266:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005268:	2b00      	cmp	r3, #0
 800526a:	f040 85a6 	bne.w	8005dba <_strtod_l+0xbd2>
 800526e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005270:	b1e3      	cbz	r3, 80052ac <_strtod_l+0xc4>
 8005272:	464a      	mov	r2, r9
 8005274:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	b021      	add	sp, #132	; 0x84
 800527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005282:	2a2b      	cmp	r2, #43	; 0x2b
 8005284:	d015      	beq.n	80052b2 <_strtod_l+0xca>
 8005286:	2a2d      	cmp	r2, #45	; 0x2d
 8005288:	d004      	beq.n	8005294 <_strtod_l+0xac>
 800528a:	2a20      	cmp	r2, #32
 800528c:	d1ca      	bne.n	8005224 <_strtod_l+0x3c>
 800528e:	3301      	adds	r3, #1
 8005290:	931b      	str	r3, [sp, #108]	; 0x6c
 8005292:	e7bf      	b.n	8005214 <_strtod_l+0x2c>
 8005294:	2201      	movs	r2, #1
 8005296:	920d      	str	r2, [sp, #52]	; 0x34
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	921b      	str	r2, [sp, #108]	; 0x6c
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1c2      	bne.n	8005228 <_strtod_l+0x40>
 80052a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 8585 	bne.w	8005db6 <_strtod_l+0xbce>
 80052ac:	464a      	mov	r2, r9
 80052ae:	4653      	mov	r3, sl
 80052b0:	e7e2      	b.n	8005278 <_strtod_l+0x90>
 80052b2:	2200      	movs	r2, #0
 80052b4:	e7ef      	b.n	8005296 <_strtod_l+0xae>
 80052b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80052b8:	b13a      	cbz	r2, 80052ca <_strtod_l+0xe2>
 80052ba:	2135      	movs	r1, #53	; 0x35
 80052bc:	a81e      	add	r0, sp, #120	; 0x78
 80052be:	f002 fbd8 	bl	8007a72 <__copybits>
 80052c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80052c4:	4658      	mov	r0, fp
 80052c6:	f002 f84a 	bl	800735e <_Bfree>
 80052ca:	3c01      	subs	r4, #1
 80052cc:	2c04      	cmp	r4, #4
 80052ce:	d806      	bhi.n	80052de <_strtod_l+0xf6>
 80052d0:	e8df f004 	tbb	[pc, r4]
 80052d4:	1714030a 	.word	0x1714030a
 80052d8:	0a          	.byte	0x0a
 80052d9:	00          	.byte	0x00
 80052da:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80052de:	0731      	lsls	r1, r6, #28
 80052e0:	d5c1      	bpl.n	8005266 <_strtod_l+0x7e>
 80052e2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80052e6:	e7be      	b.n	8005266 <_strtod_l+0x7e>
 80052e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80052ea:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80052ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80052f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80052f6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80052fa:	e7f0      	b.n	80052de <_strtod_l+0xf6>
 80052fc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005470 <_strtod_l+0x288>
 8005300:	e7ed      	b.n	80052de <_strtod_l+0xf6>
 8005302:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005306:	f04f 39ff 	mov.w	r9, #4294967295
 800530a:	e7e8      	b.n	80052de <_strtod_l+0xf6>
 800530c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	921b      	str	r2, [sp, #108]	; 0x6c
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	2b30      	cmp	r3, #48	; 0x30
 8005316:	d0f9      	beq.n	800530c <_strtod_l+0x124>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0a4      	beq.n	8005266 <_strtod_l+0x7e>
 800531c:	2301      	movs	r3, #1
 800531e:	2500      	movs	r5, #0
 8005320:	220a      	movs	r2, #10
 8005322:	9307      	str	r3, [sp, #28]
 8005324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005326:	9506      	str	r5, [sp, #24]
 8005328:	9308      	str	r3, [sp, #32]
 800532a:	9504      	str	r5, [sp, #16]
 800532c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800532e:	7807      	ldrb	r7, [r0, #0]
 8005330:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005334:	b2d9      	uxtb	r1, r3
 8005336:	2909      	cmp	r1, #9
 8005338:	d929      	bls.n	800538e <_strtod_l+0x1a6>
 800533a:	4622      	mov	r2, r4
 800533c:	f8d8 1000 	ldr.w	r1, [r8]
 8005340:	f7ff feef 	bl	8005122 <strncmp>
 8005344:	2800      	cmp	r0, #0
 8005346:	d031      	beq.n	80053ac <_strtod_l+0x1c4>
 8005348:	2000      	movs	r0, #0
 800534a:	463b      	mov	r3, r7
 800534c:	4602      	mov	r2, r0
 800534e:	9c04      	ldr	r4, [sp, #16]
 8005350:	9005      	str	r0, [sp, #20]
 8005352:	2b65      	cmp	r3, #101	; 0x65
 8005354:	d001      	beq.n	800535a <_strtod_l+0x172>
 8005356:	2b45      	cmp	r3, #69	; 0x45
 8005358:	d114      	bne.n	8005384 <_strtod_l+0x19c>
 800535a:	b924      	cbnz	r4, 8005366 <_strtod_l+0x17e>
 800535c:	b910      	cbnz	r0, 8005364 <_strtod_l+0x17c>
 800535e:	9b07      	ldr	r3, [sp, #28]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d09e      	beq.n	80052a2 <_strtod_l+0xba>
 8005364:	2400      	movs	r4, #0
 8005366:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005368:	1c73      	adds	r3, r6, #1
 800536a:	931b      	str	r3, [sp, #108]	; 0x6c
 800536c:	7873      	ldrb	r3, [r6, #1]
 800536e:	2b2b      	cmp	r3, #43	; 0x2b
 8005370:	d078      	beq.n	8005464 <_strtod_l+0x27c>
 8005372:	2b2d      	cmp	r3, #45	; 0x2d
 8005374:	d070      	beq.n	8005458 <_strtod_l+0x270>
 8005376:	f04f 0c00 	mov.w	ip, #0
 800537a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800537e:	2f09      	cmp	r7, #9
 8005380:	d97c      	bls.n	800547c <_strtod_l+0x294>
 8005382:	961b      	str	r6, [sp, #108]	; 0x6c
 8005384:	f04f 0e00 	mov.w	lr, #0
 8005388:	e09a      	b.n	80054c0 <_strtod_l+0x2d8>
 800538a:	2300      	movs	r3, #0
 800538c:	e7c7      	b.n	800531e <_strtod_l+0x136>
 800538e:	9904      	ldr	r1, [sp, #16]
 8005390:	3001      	adds	r0, #1
 8005392:	2908      	cmp	r1, #8
 8005394:	bfd7      	itett	le
 8005396:	9906      	ldrle	r1, [sp, #24]
 8005398:	fb02 3505 	mlagt	r5, r2, r5, r3
 800539c:	fb02 3301 	mlale	r3, r2, r1, r3
 80053a0:	9306      	strle	r3, [sp, #24]
 80053a2:	9b04      	ldr	r3, [sp, #16]
 80053a4:	901b      	str	r0, [sp, #108]	; 0x6c
 80053a6:	3301      	adds	r3, #1
 80053a8:	9304      	str	r3, [sp, #16]
 80053aa:	e7bf      	b.n	800532c <_strtod_l+0x144>
 80053ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053ae:	191a      	adds	r2, r3, r4
 80053b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80053b2:	9a04      	ldr	r2, [sp, #16]
 80053b4:	5d1b      	ldrb	r3, [r3, r4]
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	d037      	beq.n	800542a <_strtod_l+0x242>
 80053ba:	4602      	mov	r2, r0
 80053bc:	9c04      	ldr	r4, [sp, #16]
 80053be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80053c2:	2909      	cmp	r1, #9
 80053c4:	d913      	bls.n	80053ee <_strtod_l+0x206>
 80053c6:	2101      	movs	r1, #1
 80053c8:	9105      	str	r1, [sp, #20]
 80053ca:	e7c2      	b.n	8005352 <_strtod_l+0x16a>
 80053cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053ce:	3001      	adds	r0, #1
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80053d4:	785b      	ldrb	r3, [r3, #1]
 80053d6:	2b30      	cmp	r3, #48	; 0x30
 80053d8:	d0f8      	beq.n	80053cc <_strtod_l+0x1e4>
 80053da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80053de:	2a08      	cmp	r2, #8
 80053e0:	f200 84f0 	bhi.w	8005dc4 <_strtod_l+0xbdc>
 80053e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80053e6:	9208      	str	r2, [sp, #32]
 80053e8:	4602      	mov	r2, r0
 80053ea:	2000      	movs	r0, #0
 80053ec:	4604      	mov	r4, r0
 80053ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80053f2:	f100 0101 	add.w	r1, r0, #1
 80053f6:	d012      	beq.n	800541e <_strtod_l+0x236>
 80053f8:	440a      	add	r2, r1
 80053fa:	270a      	movs	r7, #10
 80053fc:	4621      	mov	r1, r4
 80053fe:	eb00 0c04 	add.w	ip, r0, r4
 8005402:	458c      	cmp	ip, r1
 8005404:	d113      	bne.n	800542e <_strtod_l+0x246>
 8005406:	1821      	adds	r1, r4, r0
 8005408:	2908      	cmp	r1, #8
 800540a:	f104 0401 	add.w	r4, r4, #1
 800540e:	4404      	add	r4, r0
 8005410:	dc19      	bgt.n	8005446 <_strtod_l+0x25e>
 8005412:	210a      	movs	r1, #10
 8005414:	9b06      	ldr	r3, [sp, #24]
 8005416:	fb01 e303 	mla	r3, r1, r3, lr
 800541a:	9306      	str	r3, [sp, #24]
 800541c:	2100      	movs	r1, #0
 800541e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005420:	1c58      	adds	r0, r3, #1
 8005422:	901b      	str	r0, [sp, #108]	; 0x6c
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	4608      	mov	r0, r1
 8005428:	e7c9      	b.n	80053be <_strtod_l+0x1d6>
 800542a:	9804      	ldr	r0, [sp, #16]
 800542c:	e7d3      	b.n	80053d6 <_strtod_l+0x1ee>
 800542e:	2908      	cmp	r1, #8
 8005430:	f101 0101 	add.w	r1, r1, #1
 8005434:	dc03      	bgt.n	800543e <_strtod_l+0x256>
 8005436:	9b06      	ldr	r3, [sp, #24]
 8005438:	437b      	muls	r3, r7
 800543a:	9306      	str	r3, [sp, #24]
 800543c:	e7e1      	b.n	8005402 <_strtod_l+0x21a>
 800543e:	2910      	cmp	r1, #16
 8005440:	bfd8      	it	le
 8005442:	437d      	mulle	r5, r7
 8005444:	e7dd      	b.n	8005402 <_strtod_l+0x21a>
 8005446:	2c10      	cmp	r4, #16
 8005448:	bfdc      	itt	le
 800544a:	210a      	movle	r1, #10
 800544c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005450:	e7e4      	b.n	800541c <_strtod_l+0x234>
 8005452:	2301      	movs	r3, #1
 8005454:	9305      	str	r3, [sp, #20]
 8005456:	e781      	b.n	800535c <_strtod_l+0x174>
 8005458:	f04f 0c01 	mov.w	ip, #1
 800545c:	1cb3      	adds	r3, r6, #2
 800545e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005460:	78b3      	ldrb	r3, [r6, #2]
 8005462:	e78a      	b.n	800537a <_strtod_l+0x192>
 8005464:	f04f 0c00 	mov.w	ip, #0
 8005468:	e7f8      	b.n	800545c <_strtod_l+0x274>
 800546a:	bf00      	nop
 800546c:	08007f24 	.word	0x08007f24
 8005470:	7ff00000 	.word	0x7ff00000
 8005474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005476:	1c5f      	adds	r7, r3, #1
 8005478:	971b      	str	r7, [sp, #108]	; 0x6c
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	2b30      	cmp	r3, #48	; 0x30
 800547e:	d0f9      	beq.n	8005474 <_strtod_l+0x28c>
 8005480:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005484:	2f08      	cmp	r7, #8
 8005486:	f63f af7d 	bhi.w	8005384 <_strtod_l+0x19c>
 800548a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800548e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005490:	9309      	str	r3, [sp, #36]	; 0x24
 8005492:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005494:	1c5f      	adds	r7, r3, #1
 8005496:	971b      	str	r7, [sp, #108]	; 0x6c
 8005498:	785b      	ldrb	r3, [r3, #1]
 800549a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800549e:	f1b8 0f09 	cmp.w	r8, #9
 80054a2:	d937      	bls.n	8005514 <_strtod_l+0x32c>
 80054a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054a6:	1a7f      	subs	r7, r7, r1
 80054a8:	2f08      	cmp	r7, #8
 80054aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80054ae:	dc37      	bgt.n	8005520 <_strtod_l+0x338>
 80054b0:	45be      	cmp	lr, r7
 80054b2:	bfa8      	it	ge
 80054b4:	46be      	movge	lr, r7
 80054b6:	f1bc 0f00 	cmp.w	ip, #0
 80054ba:	d001      	beq.n	80054c0 <_strtod_l+0x2d8>
 80054bc:	f1ce 0e00 	rsb	lr, lr, #0
 80054c0:	2c00      	cmp	r4, #0
 80054c2:	d151      	bne.n	8005568 <_strtod_l+0x380>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	f47f aece 	bne.w	8005266 <_strtod_l+0x7e>
 80054ca:	9a07      	ldr	r2, [sp, #28]
 80054cc:	2a00      	cmp	r2, #0
 80054ce:	f47f aeca 	bne.w	8005266 <_strtod_l+0x7e>
 80054d2:	9a05      	ldr	r2, [sp, #20]
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	f47f aee4 	bne.w	80052a2 <_strtod_l+0xba>
 80054da:	2b4e      	cmp	r3, #78	; 0x4e
 80054dc:	d027      	beq.n	800552e <_strtod_l+0x346>
 80054de:	dc21      	bgt.n	8005524 <_strtod_l+0x33c>
 80054e0:	2b49      	cmp	r3, #73	; 0x49
 80054e2:	f47f aede 	bne.w	80052a2 <_strtod_l+0xba>
 80054e6:	49a4      	ldr	r1, [pc, #656]	; (8005778 <_strtod_l+0x590>)
 80054e8:	a81b      	add	r0, sp, #108	; 0x6c
 80054ea:	f001 fe35 	bl	8007158 <__match>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	f43f aed7 	beq.w	80052a2 <_strtod_l+0xba>
 80054f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054f6:	49a1      	ldr	r1, [pc, #644]	; (800577c <_strtod_l+0x594>)
 80054f8:	3b01      	subs	r3, #1
 80054fa:	a81b      	add	r0, sp, #108	; 0x6c
 80054fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80054fe:	f001 fe2b 	bl	8007158 <__match>
 8005502:	b910      	cbnz	r0, 800550a <_strtod_l+0x322>
 8005504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005506:	3301      	adds	r3, #1
 8005508:	931b      	str	r3, [sp, #108]	; 0x6c
 800550a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005790 <_strtod_l+0x5a8>
 800550e:	f04f 0900 	mov.w	r9, #0
 8005512:	e6a8      	b.n	8005266 <_strtod_l+0x7e>
 8005514:	210a      	movs	r1, #10
 8005516:	fb01 3e0e 	mla	lr, r1, lr, r3
 800551a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800551e:	e7b8      	b.n	8005492 <_strtod_l+0x2aa>
 8005520:	46be      	mov	lr, r7
 8005522:	e7c8      	b.n	80054b6 <_strtod_l+0x2ce>
 8005524:	2b69      	cmp	r3, #105	; 0x69
 8005526:	d0de      	beq.n	80054e6 <_strtod_l+0x2fe>
 8005528:	2b6e      	cmp	r3, #110	; 0x6e
 800552a:	f47f aeba 	bne.w	80052a2 <_strtod_l+0xba>
 800552e:	4994      	ldr	r1, [pc, #592]	; (8005780 <_strtod_l+0x598>)
 8005530:	a81b      	add	r0, sp, #108	; 0x6c
 8005532:	f001 fe11 	bl	8007158 <__match>
 8005536:	2800      	cmp	r0, #0
 8005538:	f43f aeb3 	beq.w	80052a2 <_strtod_l+0xba>
 800553c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b28      	cmp	r3, #40	; 0x28
 8005542:	d10e      	bne.n	8005562 <_strtod_l+0x37a>
 8005544:	aa1e      	add	r2, sp, #120	; 0x78
 8005546:	498f      	ldr	r1, [pc, #572]	; (8005784 <_strtod_l+0x59c>)
 8005548:	a81b      	add	r0, sp, #108	; 0x6c
 800554a:	f001 fe19 	bl	8007180 <__hexnan>
 800554e:	2805      	cmp	r0, #5
 8005550:	d107      	bne.n	8005562 <_strtod_l+0x37a>
 8005552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005554:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005558:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800555c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005560:	e681      	b.n	8005266 <_strtod_l+0x7e>
 8005562:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005798 <_strtod_l+0x5b0>
 8005566:	e7d2      	b.n	800550e <_strtod_l+0x326>
 8005568:	ebae 0302 	sub.w	r3, lr, r2
 800556c:	9307      	str	r3, [sp, #28]
 800556e:	9b04      	ldr	r3, [sp, #16]
 8005570:	9806      	ldr	r0, [sp, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf08      	it	eq
 8005576:	4623      	moveq	r3, r4
 8005578:	2c10      	cmp	r4, #16
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	46a0      	mov	r8, r4
 800557e:	bfa8      	it	ge
 8005580:	f04f 0810 	movge.w	r8, #16
 8005584:	f7fa ff2e 	bl	80003e4 <__aeabi_ui2d>
 8005588:	2c09      	cmp	r4, #9
 800558a:	4681      	mov	r9, r0
 800558c:	468a      	mov	sl, r1
 800558e:	dc13      	bgt.n	80055b8 <_strtod_l+0x3d0>
 8005590:	9b07      	ldr	r3, [sp, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f43f ae67 	beq.w	8005266 <_strtod_l+0x7e>
 8005598:	9b07      	ldr	r3, [sp, #28]
 800559a:	dd7e      	ble.n	800569a <_strtod_l+0x4b2>
 800559c:	2b16      	cmp	r3, #22
 800559e:	dc65      	bgt.n	800566c <_strtod_l+0x484>
 80055a0:	4a79      	ldr	r2, [pc, #484]	; (8005788 <_strtod_l+0x5a0>)
 80055a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80055a6:	464a      	mov	r2, r9
 80055a8:	e9de 0100 	ldrd	r0, r1, [lr]
 80055ac:	4653      	mov	r3, sl
 80055ae:	f7fa ff93 	bl	80004d8 <__aeabi_dmul>
 80055b2:	4681      	mov	r9, r0
 80055b4:	468a      	mov	sl, r1
 80055b6:	e656      	b.n	8005266 <_strtod_l+0x7e>
 80055b8:	4b73      	ldr	r3, [pc, #460]	; (8005788 <_strtod_l+0x5a0>)
 80055ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80055be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80055c2:	f7fa ff89 	bl	80004d8 <__aeabi_dmul>
 80055c6:	4606      	mov	r6, r0
 80055c8:	4628      	mov	r0, r5
 80055ca:	460f      	mov	r7, r1
 80055cc:	f7fa ff0a 	bl	80003e4 <__aeabi_ui2d>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4630      	mov	r0, r6
 80055d6:	4639      	mov	r1, r7
 80055d8:	f7fa fdc8 	bl	800016c <__adddf3>
 80055dc:	2c0f      	cmp	r4, #15
 80055de:	4681      	mov	r9, r0
 80055e0:	468a      	mov	sl, r1
 80055e2:	ddd5      	ble.n	8005590 <_strtod_l+0x3a8>
 80055e4:	9b07      	ldr	r3, [sp, #28]
 80055e6:	eba4 0808 	sub.w	r8, r4, r8
 80055ea:	4498      	add	r8, r3
 80055ec:	f1b8 0f00 	cmp.w	r8, #0
 80055f0:	f340 809a 	ble.w	8005728 <_strtod_l+0x540>
 80055f4:	f018 030f 	ands.w	r3, r8, #15
 80055f8:	d00a      	beq.n	8005610 <_strtod_l+0x428>
 80055fa:	4963      	ldr	r1, [pc, #396]	; (8005788 <_strtod_l+0x5a0>)
 80055fc:	464a      	mov	r2, r9
 80055fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005606:	4653      	mov	r3, sl
 8005608:	f7fa ff66 	bl	80004d8 <__aeabi_dmul>
 800560c:	4681      	mov	r9, r0
 800560e:	468a      	mov	sl, r1
 8005610:	f038 080f 	bics.w	r8, r8, #15
 8005614:	d077      	beq.n	8005706 <_strtod_l+0x51e>
 8005616:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800561a:	dd4b      	ble.n	80056b4 <_strtod_l+0x4cc>
 800561c:	f04f 0800 	mov.w	r8, #0
 8005620:	f8cd 8010 	str.w	r8, [sp, #16]
 8005624:	f8cd 8020 	str.w	r8, [sp, #32]
 8005628:	f8cd 8018 	str.w	r8, [sp, #24]
 800562c:	2322      	movs	r3, #34	; 0x22
 800562e:	f04f 0900 	mov.w	r9, #0
 8005632:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005790 <_strtod_l+0x5a8>
 8005636:	f8cb 3000 	str.w	r3, [fp]
 800563a:	9b08      	ldr	r3, [sp, #32]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f43f ae12 	beq.w	8005266 <_strtod_l+0x7e>
 8005642:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005644:	4658      	mov	r0, fp
 8005646:	f001 fe8a 	bl	800735e <_Bfree>
 800564a:	9906      	ldr	r1, [sp, #24]
 800564c:	4658      	mov	r0, fp
 800564e:	f001 fe86 	bl	800735e <_Bfree>
 8005652:	9904      	ldr	r1, [sp, #16]
 8005654:	4658      	mov	r0, fp
 8005656:	f001 fe82 	bl	800735e <_Bfree>
 800565a:	9908      	ldr	r1, [sp, #32]
 800565c:	4658      	mov	r0, fp
 800565e:	f001 fe7e 	bl	800735e <_Bfree>
 8005662:	4641      	mov	r1, r8
 8005664:	4658      	mov	r0, fp
 8005666:	f001 fe7a 	bl	800735e <_Bfree>
 800566a:	e5fc      	b.n	8005266 <_strtod_l+0x7e>
 800566c:	9a07      	ldr	r2, [sp, #28]
 800566e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005672:	4293      	cmp	r3, r2
 8005674:	dbb6      	blt.n	80055e4 <_strtod_l+0x3fc>
 8005676:	4d44      	ldr	r5, [pc, #272]	; (8005788 <_strtod_l+0x5a0>)
 8005678:	f1c4 040f 	rsb	r4, r4, #15
 800567c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005680:	464a      	mov	r2, r9
 8005682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005686:	4653      	mov	r3, sl
 8005688:	f7fa ff26 	bl	80004d8 <__aeabi_dmul>
 800568c:	9b07      	ldr	r3, [sp, #28]
 800568e:	1b1c      	subs	r4, r3, r4
 8005690:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005694:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005698:	e789      	b.n	80055ae <_strtod_l+0x3c6>
 800569a:	f113 0f16 	cmn.w	r3, #22
 800569e:	dba1      	blt.n	80055e4 <_strtod_l+0x3fc>
 80056a0:	4a39      	ldr	r2, [pc, #228]	; (8005788 <_strtod_l+0x5a0>)
 80056a2:	4648      	mov	r0, r9
 80056a4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80056a8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80056ac:	4651      	mov	r1, sl
 80056ae:	f7fb f83d 	bl	800072c <__aeabi_ddiv>
 80056b2:	e77e      	b.n	80055b2 <_strtod_l+0x3ca>
 80056b4:	2300      	movs	r3, #0
 80056b6:	4648      	mov	r0, r9
 80056b8:	4651      	mov	r1, sl
 80056ba:	461d      	mov	r5, r3
 80056bc:	4e33      	ldr	r6, [pc, #204]	; (800578c <_strtod_l+0x5a4>)
 80056be:	ea4f 1828 	mov.w	r8, r8, asr #4
 80056c2:	f1b8 0f01 	cmp.w	r8, #1
 80056c6:	dc21      	bgt.n	800570c <_strtod_l+0x524>
 80056c8:	b10b      	cbz	r3, 80056ce <_strtod_l+0x4e6>
 80056ca:	4681      	mov	r9, r0
 80056cc:	468a      	mov	sl, r1
 80056ce:	4b2f      	ldr	r3, [pc, #188]	; (800578c <_strtod_l+0x5a4>)
 80056d0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80056d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80056d8:	464a      	mov	r2, r9
 80056da:	e9d5 0100 	ldrd	r0, r1, [r5]
 80056de:	4653      	mov	r3, sl
 80056e0:	f7fa fefa 	bl	80004d8 <__aeabi_dmul>
 80056e4:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <_strtod_l+0x5a8>)
 80056e6:	460a      	mov	r2, r1
 80056e8:	400b      	ands	r3, r1
 80056ea:	492a      	ldr	r1, [pc, #168]	; (8005794 <_strtod_l+0x5ac>)
 80056ec:	4681      	mov	r9, r0
 80056ee:	428b      	cmp	r3, r1
 80056f0:	d894      	bhi.n	800561c <_strtod_l+0x434>
 80056f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80056f6:	428b      	cmp	r3, r1
 80056f8:	bf86      	itte	hi
 80056fa:	f04f 39ff 	movhi.w	r9, #4294967295
 80056fe:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800579c <_strtod_l+0x5b4>
 8005702:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005706:	2300      	movs	r3, #0
 8005708:	9305      	str	r3, [sp, #20]
 800570a:	e07b      	b.n	8005804 <_strtod_l+0x61c>
 800570c:	f018 0f01 	tst.w	r8, #1
 8005710:	d006      	beq.n	8005720 <_strtod_l+0x538>
 8005712:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f7fa fedd 	bl	80004d8 <__aeabi_dmul>
 800571e:	2301      	movs	r3, #1
 8005720:	3501      	adds	r5, #1
 8005722:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005726:	e7cc      	b.n	80056c2 <_strtod_l+0x4da>
 8005728:	d0ed      	beq.n	8005706 <_strtod_l+0x51e>
 800572a:	f1c8 0800 	rsb	r8, r8, #0
 800572e:	f018 020f 	ands.w	r2, r8, #15
 8005732:	d00a      	beq.n	800574a <_strtod_l+0x562>
 8005734:	4b14      	ldr	r3, [pc, #80]	; (8005788 <_strtod_l+0x5a0>)
 8005736:	4648      	mov	r0, r9
 8005738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800573c:	4651      	mov	r1, sl
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f7fa fff3 	bl	800072c <__aeabi_ddiv>
 8005746:	4681      	mov	r9, r0
 8005748:	468a      	mov	sl, r1
 800574a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800574e:	d0da      	beq.n	8005706 <_strtod_l+0x51e>
 8005750:	f1b8 0f1f 	cmp.w	r8, #31
 8005754:	dd24      	ble.n	80057a0 <_strtod_l+0x5b8>
 8005756:	f04f 0800 	mov.w	r8, #0
 800575a:	f8cd 8010 	str.w	r8, [sp, #16]
 800575e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005762:	f8cd 8018 	str.w	r8, [sp, #24]
 8005766:	2322      	movs	r3, #34	; 0x22
 8005768:	f04f 0900 	mov.w	r9, #0
 800576c:	f04f 0a00 	mov.w	sl, #0
 8005770:	f8cb 3000 	str.w	r3, [fp]
 8005774:	e761      	b.n	800563a <_strtod_l+0x452>
 8005776:	bf00      	nop
 8005778:	08007ef3 	.word	0x08007ef3
 800577c:	080080a1 	.word	0x080080a1
 8005780:	08007efb 	.word	0x08007efb
 8005784:	08007f38 	.word	0x08007f38
 8005788:	080080d8 	.word	0x080080d8
 800578c:	080080b0 	.word	0x080080b0
 8005790:	7ff00000 	.word	0x7ff00000
 8005794:	7ca00000 	.word	0x7ca00000
 8005798:	fff80000 	.word	0xfff80000
 800579c:	7fefffff 	.word	0x7fefffff
 80057a0:	f018 0310 	ands.w	r3, r8, #16
 80057a4:	bf18      	it	ne
 80057a6:	236a      	movne	r3, #106	; 0x6a
 80057a8:	4648      	mov	r0, r9
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	4651      	mov	r1, sl
 80057ae:	2300      	movs	r3, #0
 80057b0:	4da1      	ldr	r5, [pc, #644]	; (8005a38 <_strtod_l+0x850>)
 80057b2:	f1b8 0f00 	cmp.w	r8, #0
 80057b6:	f300 8113 	bgt.w	80059e0 <_strtod_l+0x7f8>
 80057ba:	b10b      	cbz	r3, 80057c0 <_strtod_l+0x5d8>
 80057bc:	4681      	mov	r9, r0
 80057be:	468a      	mov	sl, r1
 80057c0:	9b05      	ldr	r3, [sp, #20]
 80057c2:	b1bb      	cbz	r3, 80057f4 <_strtod_l+0x60c>
 80057c4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80057c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	4651      	mov	r1, sl
 80057d0:	dd10      	ble.n	80057f4 <_strtod_l+0x60c>
 80057d2:	2b1f      	cmp	r3, #31
 80057d4:	f340 8110 	ble.w	80059f8 <_strtod_l+0x810>
 80057d8:	2b34      	cmp	r3, #52	; 0x34
 80057da:	bfd8      	it	le
 80057dc:	f04f 32ff 	movle.w	r2, #4294967295
 80057e0:	f04f 0900 	mov.w	r9, #0
 80057e4:	bfcf      	iteee	gt
 80057e6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80057ea:	3b20      	suble	r3, #32
 80057ec:	fa02 f303 	lslle.w	r3, r2, r3
 80057f0:	ea03 0a01 	andle.w	sl, r3, r1
 80057f4:	2200      	movs	r2, #0
 80057f6:	2300      	movs	r3, #0
 80057f8:	4648      	mov	r0, r9
 80057fa:	4651      	mov	r1, sl
 80057fc:	f7fb f8d4 	bl	80009a8 <__aeabi_dcmpeq>
 8005800:	2800      	cmp	r0, #0
 8005802:	d1a8      	bne.n	8005756 <_strtod_l+0x56e>
 8005804:	9b06      	ldr	r3, [sp, #24]
 8005806:	9a04      	ldr	r2, [sp, #16]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	9908      	ldr	r1, [sp, #32]
 800580c:	4623      	mov	r3, r4
 800580e:	4658      	mov	r0, fp
 8005810:	f001 fdf7 	bl	8007402 <__s2b>
 8005814:	9008      	str	r0, [sp, #32]
 8005816:	2800      	cmp	r0, #0
 8005818:	f43f af00 	beq.w	800561c <_strtod_l+0x434>
 800581c:	9a07      	ldr	r2, [sp, #28]
 800581e:	9b07      	ldr	r3, [sp, #28]
 8005820:	2a00      	cmp	r2, #0
 8005822:	f1c3 0300 	rsb	r3, r3, #0
 8005826:	bfa8      	it	ge
 8005828:	2300      	movge	r3, #0
 800582a:	f04f 0800 	mov.w	r8, #0
 800582e:	930e      	str	r3, [sp, #56]	; 0x38
 8005830:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005834:	9316      	str	r3, [sp, #88]	; 0x58
 8005836:	f8cd 8010 	str.w	r8, [sp, #16]
 800583a:	9b08      	ldr	r3, [sp, #32]
 800583c:	4658      	mov	r0, fp
 800583e:	6859      	ldr	r1, [r3, #4]
 8005840:	f001 fd59 	bl	80072f6 <_Balloc>
 8005844:	9006      	str	r0, [sp, #24]
 8005846:	2800      	cmp	r0, #0
 8005848:	f43f aef0 	beq.w	800562c <_strtod_l+0x444>
 800584c:	9b08      	ldr	r3, [sp, #32]
 800584e:	300c      	adds	r0, #12
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	f103 010c 	add.w	r1, r3, #12
 8005856:	3202      	adds	r2, #2
 8005858:	0092      	lsls	r2, r2, #2
 800585a:	f001 fd3f 	bl	80072dc <memcpy>
 800585e:	ab1e      	add	r3, sp, #120	; 0x78
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	ab1d      	add	r3, sp, #116	; 0x74
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	464a      	mov	r2, r9
 8005868:	4653      	mov	r3, sl
 800586a:	4658      	mov	r0, fp
 800586c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005870:	f002 f882 	bl	8007978 <__d2b>
 8005874:	901c      	str	r0, [sp, #112]	; 0x70
 8005876:	2800      	cmp	r0, #0
 8005878:	f43f aed8 	beq.w	800562c <_strtod_l+0x444>
 800587c:	2101      	movs	r1, #1
 800587e:	4658      	mov	r0, fp
 8005880:	f001 fe4b 	bl	800751a <__i2b>
 8005884:	9004      	str	r0, [sp, #16]
 8005886:	4603      	mov	r3, r0
 8005888:	2800      	cmp	r0, #0
 800588a:	f43f aecf 	beq.w	800562c <_strtod_l+0x444>
 800588e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005890:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005892:	2d00      	cmp	r5, #0
 8005894:	bfab      	itete	ge
 8005896:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005898:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800589a:	18ee      	addge	r6, r5, r3
 800589c:	1b5c      	sublt	r4, r3, r5
 800589e:	9b05      	ldr	r3, [sp, #20]
 80058a0:	bfa8      	it	ge
 80058a2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80058a4:	eba5 0503 	sub.w	r5, r5, r3
 80058a8:	4415      	add	r5, r2
 80058aa:	4b64      	ldr	r3, [pc, #400]	; (8005a3c <_strtod_l+0x854>)
 80058ac:	f105 35ff 	add.w	r5, r5, #4294967295
 80058b0:	bfb8      	it	lt
 80058b2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80058b4:	429d      	cmp	r5, r3
 80058b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80058ba:	f280 80af 	bge.w	8005a1c <_strtod_l+0x834>
 80058be:	1b5b      	subs	r3, r3, r5
 80058c0:	2b1f      	cmp	r3, #31
 80058c2:	eba2 0203 	sub.w	r2, r2, r3
 80058c6:	f04f 0701 	mov.w	r7, #1
 80058ca:	f300 809c 	bgt.w	8005a06 <_strtod_l+0x81e>
 80058ce:	2500      	movs	r5, #0
 80058d0:	fa07 f303 	lsl.w	r3, r7, r3
 80058d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80058d6:	18b7      	adds	r7, r6, r2
 80058d8:	9b05      	ldr	r3, [sp, #20]
 80058da:	42be      	cmp	r6, r7
 80058dc:	4414      	add	r4, r2
 80058de:	441c      	add	r4, r3
 80058e0:	4633      	mov	r3, r6
 80058e2:	bfa8      	it	ge
 80058e4:	463b      	movge	r3, r7
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	bfa8      	it	ge
 80058ea:	4623      	movge	r3, r4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bfc2      	ittt	gt
 80058f0:	1aff      	subgt	r7, r7, r3
 80058f2:	1ae4      	subgt	r4, r4, r3
 80058f4:	1af6      	subgt	r6, r6, r3
 80058f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f8:	b1bb      	cbz	r3, 800592a <_strtod_l+0x742>
 80058fa:	461a      	mov	r2, r3
 80058fc:	9904      	ldr	r1, [sp, #16]
 80058fe:	4658      	mov	r0, fp
 8005900:	f001 feaa 	bl	8007658 <__pow5mult>
 8005904:	9004      	str	r0, [sp, #16]
 8005906:	2800      	cmp	r0, #0
 8005908:	f43f ae90 	beq.w	800562c <_strtod_l+0x444>
 800590c:	4601      	mov	r1, r0
 800590e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005910:	4658      	mov	r0, fp
 8005912:	f001 fe0b 	bl	800752c <__multiply>
 8005916:	9009      	str	r0, [sp, #36]	; 0x24
 8005918:	2800      	cmp	r0, #0
 800591a:	f43f ae87 	beq.w	800562c <_strtod_l+0x444>
 800591e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005920:	4658      	mov	r0, fp
 8005922:	f001 fd1c 	bl	800735e <_Bfree>
 8005926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005928:	931c      	str	r3, [sp, #112]	; 0x70
 800592a:	2f00      	cmp	r7, #0
 800592c:	dc7a      	bgt.n	8005a24 <_strtod_l+0x83c>
 800592e:	9b07      	ldr	r3, [sp, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	dd08      	ble.n	8005946 <_strtod_l+0x75e>
 8005934:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005936:	9906      	ldr	r1, [sp, #24]
 8005938:	4658      	mov	r0, fp
 800593a:	f001 fe8d 	bl	8007658 <__pow5mult>
 800593e:	9006      	str	r0, [sp, #24]
 8005940:	2800      	cmp	r0, #0
 8005942:	f43f ae73 	beq.w	800562c <_strtod_l+0x444>
 8005946:	2c00      	cmp	r4, #0
 8005948:	dd08      	ble.n	800595c <_strtod_l+0x774>
 800594a:	4622      	mov	r2, r4
 800594c:	9906      	ldr	r1, [sp, #24]
 800594e:	4658      	mov	r0, fp
 8005950:	f001 fed0 	bl	80076f4 <__lshift>
 8005954:	9006      	str	r0, [sp, #24]
 8005956:	2800      	cmp	r0, #0
 8005958:	f43f ae68 	beq.w	800562c <_strtod_l+0x444>
 800595c:	2e00      	cmp	r6, #0
 800595e:	dd08      	ble.n	8005972 <_strtod_l+0x78a>
 8005960:	4632      	mov	r2, r6
 8005962:	9904      	ldr	r1, [sp, #16]
 8005964:	4658      	mov	r0, fp
 8005966:	f001 fec5 	bl	80076f4 <__lshift>
 800596a:	9004      	str	r0, [sp, #16]
 800596c:	2800      	cmp	r0, #0
 800596e:	f43f ae5d 	beq.w	800562c <_strtod_l+0x444>
 8005972:	9a06      	ldr	r2, [sp, #24]
 8005974:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005976:	4658      	mov	r0, fp
 8005978:	f001 ff2a 	bl	80077d0 <__mdiff>
 800597c:	4680      	mov	r8, r0
 800597e:	2800      	cmp	r0, #0
 8005980:	f43f ae54 	beq.w	800562c <_strtod_l+0x444>
 8005984:	2400      	movs	r4, #0
 8005986:	68c3      	ldr	r3, [r0, #12]
 8005988:	9904      	ldr	r1, [sp, #16]
 800598a:	60c4      	str	r4, [r0, #12]
 800598c:	930c      	str	r3, [sp, #48]	; 0x30
 800598e:	f001 ff05 	bl	800779c <__mcmp>
 8005992:	42a0      	cmp	r0, r4
 8005994:	da54      	bge.n	8005a40 <_strtod_l+0x858>
 8005996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005998:	b9f3      	cbnz	r3, 80059d8 <_strtod_l+0x7f0>
 800599a:	f1b9 0f00 	cmp.w	r9, #0
 800599e:	d11b      	bne.n	80059d8 <_strtod_l+0x7f0>
 80059a0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80059a4:	b9c3      	cbnz	r3, 80059d8 <_strtod_l+0x7f0>
 80059a6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80059aa:	0d1b      	lsrs	r3, r3, #20
 80059ac:	051b      	lsls	r3, r3, #20
 80059ae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80059b2:	d911      	bls.n	80059d8 <_strtod_l+0x7f0>
 80059b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80059b8:	b91b      	cbnz	r3, 80059c2 <_strtod_l+0x7da>
 80059ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	dd0a      	ble.n	80059d8 <_strtod_l+0x7f0>
 80059c2:	4641      	mov	r1, r8
 80059c4:	2201      	movs	r2, #1
 80059c6:	4658      	mov	r0, fp
 80059c8:	f001 fe94 	bl	80076f4 <__lshift>
 80059cc:	9904      	ldr	r1, [sp, #16]
 80059ce:	4680      	mov	r8, r0
 80059d0:	f001 fee4 	bl	800779c <__mcmp>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	dc68      	bgt.n	8005aaa <_strtod_l+0x8c2>
 80059d8:	9b05      	ldr	r3, [sp, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d172      	bne.n	8005ac4 <_strtod_l+0x8dc>
 80059de:	e630      	b.n	8005642 <_strtod_l+0x45a>
 80059e0:	f018 0f01 	tst.w	r8, #1
 80059e4:	d004      	beq.n	80059f0 <_strtod_l+0x808>
 80059e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059ea:	f7fa fd75 	bl	80004d8 <__aeabi_dmul>
 80059ee:	2301      	movs	r3, #1
 80059f0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80059f4:	3508      	adds	r5, #8
 80059f6:	e6dc      	b.n	80057b2 <_strtod_l+0x5ca>
 80059f8:	f04f 32ff 	mov.w	r2, #4294967295
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	ea03 0909 	and.w	r9, r3, r9
 8005a04:	e6f6      	b.n	80057f4 <_strtod_l+0x60c>
 8005a06:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005a0a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005a0e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005a12:	35e2      	adds	r5, #226	; 0xe2
 8005a14:	fa07 f505 	lsl.w	r5, r7, r5
 8005a18:	970f      	str	r7, [sp, #60]	; 0x3c
 8005a1a:	e75c      	b.n	80058d6 <_strtod_l+0x6ee>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	2500      	movs	r5, #0
 8005a20:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a22:	e758      	b.n	80058d6 <_strtod_l+0x6ee>
 8005a24:	463a      	mov	r2, r7
 8005a26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a28:	4658      	mov	r0, fp
 8005a2a:	f001 fe63 	bl	80076f4 <__lshift>
 8005a2e:	901c      	str	r0, [sp, #112]	; 0x70
 8005a30:	2800      	cmp	r0, #0
 8005a32:	f47f af7c 	bne.w	800592e <_strtod_l+0x746>
 8005a36:	e5f9      	b.n	800562c <_strtod_l+0x444>
 8005a38:	08007f50 	.word	0x08007f50
 8005a3c:	fffffc02 	.word	0xfffffc02
 8005a40:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005a44:	f040 8089 	bne.w	8005b5a <_strtod_l+0x972>
 8005a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a4a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005a4e:	b342      	cbz	r2, 8005aa2 <_strtod_l+0x8ba>
 8005a50:	4aaf      	ldr	r2, [pc, #700]	; (8005d10 <_strtod_l+0xb28>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d156      	bne.n	8005b04 <_strtod_l+0x91c>
 8005a56:	9b05      	ldr	r3, [sp, #20]
 8005a58:	4648      	mov	r0, r9
 8005a5a:	b1eb      	cbz	r3, 8005a98 <_strtod_l+0x8b0>
 8005a5c:	4653      	mov	r3, sl
 8005a5e:	4aad      	ldr	r2, [pc, #692]	; (8005d14 <_strtod_l+0xb2c>)
 8005a60:	f04f 31ff 	mov.w	r1, #4294967295
 8005a64:	401a      	ands	r2, r3
 8005a66:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005a6a:	d818      	bhi.n	8005a9e <_strtod_l+0x8b6>
 8005a6c:	0d12      	lsrs	r2, r2, #20
 8005a6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	4298      	cmp	r0, r3
 8005a78:	d144      	bne.n	8005b04 <_strtod_l+0x91c>
 8005a7a:	4ba7      	ldr	r3, [pc, #668]	; (8005d18 <_strtod_l+0xb30>)
 8005a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d102      	bne.n	8005a88 <_strtod_l+0x8a0>
 8005a82:	3001      	adds	r0, #1
 8005a84:	f43f add2 	beq.w	800562c <_strtod_l+0x444>
 8005a88:	4ba2      	ldr	r3, [pc, #648]	; (8005d14 <_strtod_l+0xb2c>)
 8005a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a8c:	f04f 0900 	mov.w	r9, #0
 8005a90:	401a      	ands	r2, r3
 8005a92:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005a96:	e79f      	b.n	80059d8 <_strtod_l+0x7f0>
 8005a98:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9c:	e7eb      	b.n	8005a76 <_strtod_l+0x88e>
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	e7e9      	b.n	8005a76 <_strtod_l+0x88e>
 8005aa2:	bb7b      	cbnz	r3, 8005b04 <_strtod_l+0x91c>
 8005aa4:	f1b9 0f00 	cmp.w	r9, #0
 8005aa8:	d12c      	bne.n	8005b04 <_strtod_l+0x91c>
 8005aaa:	9905      	ldr	r1, [sp, #20]
 8005aac:	4653      	mov	r3, sl
 8005aae:	4a99      	ldr	r2, [pc, #612]	; (8005d14 <_strtod_l+0xb2c>)
 8005ab0:	b1f1      	cbz	r1, 8005af0 <_strtod_l+0x908>
 8005ab2:	ea02 010a 	and.w	r1, r2, sl
 8005ab6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005aba:	dc19      	bgt.n	8005af0 <_strtod_l+0x908>
 8005abc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005ac0:	f77f ae51 	ble.w	8005766 <_strtod_l+0x57e>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	4a95      	ldr	r2, [pc, #596]	; (8005d1c <_strtod_l+0xb34>)
 8005ac8:	4648      	mov	r0, r9
 8005aca:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005ace:	4651      	mov	r1, sl
 8005ad0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005ad4:	f7fa fd00 	bl	80004d8 <__aeabi_dmul>
 8005ad8:	4681      	mov	r9, r0
 8005ada:	468a      	mov	sl, r1
 8005adc:	2900      	cmp	r1, #0
 8005ade:	f47f adb0 	bne.w	8005642 <_strtod_l+0x45a>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	f47f adad 	bne.w	8005642 <_strtod_l+0x45a>
 8005ae8:	2322      	movs	r3, #34	; 0x22
 8005aea:	f8cb 3000 	str.w	r3, [fp]
 8005aee:	e5a8      	b.n	8005642 <_strtod_l+0x45a>
 8005af0:	4013      	ands	r3, r2
 8005af2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005af6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005afa:	f04f 39ff 	mov.w	r9, #4294967295
 8005afe:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005b02:	e769      	b.n	80059d8 <_strtod_l+0x7f0>
 8005b04:	b19d      	cbz	r5, 8005b2e <_strtod_l+0x946>
 8005b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b08:	421d      	tst	r5, r3
 8005b0a:	f43f af65 	beq.w	80059d8 <_strtod_l+0x7f0>
 8005b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b10:	9a05      	ldr	r2, [sp, #20]
 8005b12:	4648      	mov	r0, r9
 8005b14:	4651      	mov	r1, sl
 8005b16:	b173      	cbz	r3, 8005b36 <_strtod_l+0x94e>
 8005b18:	f7ff fb44 	bl	80051a4 <sulp>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b24:	f7fa fb22 	bl	800016c <__adddf3>
 8005b28:	4681      	mov	r9, r0
 8005b2a:	468a      	mov	sl, r1
 8005b2c:	e754      	b.n	80059d8 <_strtod_l+0x7f0>
 8005b2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b30:	ea13 0f09 	tst.w	r3, r9
 8005b34:	e7e9      	b.n	8005b0a <_strtod_l+0x922>
 8005b36:	f7ff fb35 	bl	80051a4 <sulp>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b42:	f7fa fb11 	bl	8000168 <__aeabi_dsub>
 8005b46:	2200      	movs	r2, #0
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4681      	mov	r9, r0
 8005b4c:	468a      	mov	sl, r1
 8005b4e:	f7fa ff2b 	bl	80009a8 <__aeabi_dcmpeq>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	f47f ae07 	bne.w	8005766 <_strtod_l+0x57e>
 8005b58:	e73e      	b.n	80059d8 <_strtod_l+0x7f0>
 8005b5a:	9904      	ldr	r1, [sp, #16]
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	f001 ff5a 	bl	8007a16 <__ratio>
 8005b62:	2200      	movs	r2, #0
 8005b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b68:	4606      	mov	r6, r0
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	f7fa ff30 	bl	80009d0 <__aeabi_dcmple>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d075      	beq.n	8005c60 <_strtod_l+0xa78>
 8005b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d047      	beq.n	8005c0a <_strtod_l+0xa22>
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	4f68      	ldr	r7, [pc, #416]	; (8005d20 <_strtod_l+0xb38>)
 8005b7e:	4d68      	ldr	r5, [pc, #416]	; (8005d20 <_strtod_l+0xb38>)
 8005b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b86:	0d1b      	lsrs	r3, r3, #20
 8005b88:	051b      	lsls	r3, r3, #20
 8005b8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b8e:	4b65      	ldr	r3, [pc, #404]	; (8005d24 <_strtod_l+0xb3c>)
 8005b90:	429a      	cmp	r2, r3
 8005b92:	f040 80cf 	bne.w	8005d34 <_strtod_l+0xb4c>
 8005b96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b9a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba0:	4648      	mov	r0, r9
 8005ba2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005ba6:	4651      	mov	r1, sl
 8005ba8:	f001 fe70 	bl	800788c <__ulp>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa fc90 	bl	80004d8 <__aeabi_dmul>
 8005bb8:	464a      	mov	r2, r9
 8005bba:	4653      	mov	r3, sl
 8005bbc:	f7fa fad6 	bl	800016c <__adddf3>
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4954      	ldr	r1, [pc, #336]	; (8005d14 <_strtod_l+0xb2c>)
 8005bc4:	4a58      	ldr	r2, [pc, #352]	; (8005d28 <_strtod_l+0xb40>)
 8005bc6:	4019      	ands	r1, r3
 8005bc8:	4291      	cmp	r1, r2
 8005bca:	4681      	mov	r9, r0
 8005bcc:	d95e      	bls.n	8005c8c <_strtod_l+0xaa4>
 8005bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d103      	bne.n	8005be0 <_strtod_l+0x9f8>
 8005bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bda:	3301      	adds	r3, #1
 8005bdc:	f43f ad26 	beq.w	800562c <_strtod_l+0x444>
 8005be0:	f04f 39ff 	mov.w	r9, #4294967295
 8005be4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005d18 <_strtod_l+0xb30>
 8005be8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005bea:	4658      	mov	r0, fp
 8005bec:	f001 fbb7 	bl	800735e <_Bfree>
 8005bf0:	9906      	ldr	r1, [sp, #24]
 8005bf2:	4658      	mov	r0, fp
 8005bf4:	f001 fbb3 	bl	800735e <_Bfree>
 8005bf8:	9904      	ldr	r1, [sp, #16]
 8005bfa:	4658      	mov	r0, fp
 8005bfc:	f001 fbaf 	bl	800735e <_Bfree>
 8005c00:	4641      	mov	r1, r8
 8005c02:	4658      	mov	r0, fp
 8005c04:	f001 fbab 	bl	800735e <_Bfree>
 8005c08:	e617      	b.n	800583a <_strtod_l+0x652>
 8005c0a:	f1b9 0f00 	cmp.w	r9, #0
 8005c0e:	d119      	bne.n	8005c44 <_strtod_l+0xa5c>
 8005c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c16:	b9e3      	cbnz	r3, 8005c52 <_strtod_l+0xa6a>
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4b41      	ldr	r3, [pc, #260]	; (8005d20 <_strtod_l+0xb38>)
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	4639      	mov	r1, r7
 8005c20:	f7fa fecc 	bl	80009bc <__aeabi_dcmplt>
 8005c24:	b9c8      	cbnz	r0, 8005c5a <_strtod_l+0xa72>
 8005c26:	2200      	movs	r2, #0
 8005c28:	4b40      	ldr	r3, [pc, #256]	; (8005d2c <_strtod_l+0xb44>)
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	f7fa fc53 	bl	80004d8 <__aeabi_dmul>
 8005c32:	4604      	mov	r4, r0
 8005c34:	460d      	mov	r5, r1
 8005c36:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c3a:	9418      	str	r4, [sp, #96]	; 0x60
 8005c3c:	9319      	str	r3, [sp, #100]	; 0x64
 8005c3e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005c42:	e79d      	b.n	8005b80 <_strtod_l+0x998>
 8005c44:	f1b9 0f01 	cmp.w	r9, #1
 8005c48:	d103      	bne.n	8005c52 <_strtod_l+0xa6a>
 8005c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f43f ad8a 	beq.w	8005766 <_strtod_l+0x57e>
 8005c52:	2600      	movs	r6, #0
 8005c54:	4f36      	ldr	r7, [pc, #216]	; (8005d30 <_strtod_l+0xb48>)
 8005c56:	2400      	movs	r4, #0
 8005c58:	e791      	b.n	8005b7e <_strtod_l+0x996>
 8005c5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005c5c:	4d33      	ldr	r5, [pc, #204]	; (8005d2c <_strtod_l+0xb44>)
 8005c5e:	e7ea      	b.n	8005c36 <_strtod_l+0xa4e>
 8005c60:	4b32      	ldr	r3, [pc, #200]	; (8005d2c <_strtod_l+0xb44>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	4630      	mov	r0, r6
 8005c66:	4639      	mov	r1, r7
 8005c68:	f7fa fc36 	bl	80004d8 <__aeabi_dmul>
 8005c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c6e:	4604      	mov	r4, r0
 8005c70:	460d      	mov	r5, r1
 8005c72:	b933      	cbnz	r3, 8005c82 <_strtod_l+0xa9a>
 8005c74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c78:	9010      	str	r0, [sp, #64]	; 0x40
 8005c7a:	9311      	str	r3, [sp, #68]	; 0x44
 8005c7c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c80:	e77e      	b.n	8005b80 <_strtod_l+0x998>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005c8a:	e7f7      	b.n	8005c7c <_strtod_l+0xa94>
 8005c8c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005c90:	9b05      	ldr	r3, [sp, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1a8      	bne.n	8005be8 <_strtod_l+0xa00>
 8005c96:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005c9a:	0d1b      	lsrs	r3, r3, #20
 8005c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c9e:	051b      	lsls	r3, r3, #20
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	4656      	mov	r6, sl
 8005ca4:	d1a0      	bne.n	8005be8 <_strtod_l+0xa00>
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f7fa fec5 	bl	8000a38 <__aeabi_d2iz>
 8005cae:	f7fa fba9 	bl	8000404 <__aeabi_i2d>
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f7fa fa55 	bl	8000168 <__aeabi_dsub>
 8005cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	b933      	cbnz	r3, 8005cd4 <_strtod_l+0xaec>
 8005cc6:	f1b9 0f00 	cmp.w	r9, #0
 8005cca:	d103      	bne.n	8005cd4 <_strtod_l+0xaec>
 8005ccc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005cd0:	2e00      	cmp	r6, #0
 8005cd2:	d06a      	beq.n	8005daa <_strtod_l+0xbc2>
 8005cd4:	a30a      	add	r3, pc, #40	; (adr r3, 8005d00 <_strtod_l+0xb18>)
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	4620      	mov	r0, r4
 8005cdc:	4629      	mov	r1, r5
 8005cde:	f7fa fe6d 	bl	80009bc <__aeabi_dcmplt>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f47f acad 	bne.w	8005642 <_strtod_l+0x45a>
 8005ce8:	a307      	add	r3, pc, #28	; (adr r3, 8005d08 <_strtod_l+0xb20>)
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f7fa fe81 	bl	80009f8 <__aeabi_dcmpgt>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f43f af76 	beq.w	8005be8 <_strtod_l+0xa00>
 8005cfc:	e4a1      	b.n	8005642 <_strtod_l+0x45a>
 8005cfe:	bf00      	nop
 8005d00:	94a03595 	.word	0x94a03595
 8005d04:	3fdfffff 	.word	0x3fdfffff
 8005d08:	35afe535 	.word	0x35afe535
 8005d0c:	3fe00000 	.word	0x3fe00000
 8005d10:	000fffff 	.word	0x000fffff
 8005d14:	7ff00000 	.word	0x7ff00000
 8005d18:	7fefffff 	.word	0x7fefffff
 8005d1c:	39500000 	.word	0x39500000
 8005d20:	3ff00000 	.word	0x3ff00000
 8005d24:	7fe00000 	.word	0x7fe00000
 8005d28:	7c9fffff 	.word	0x7c9fffff
 8005d2c:	3fe00000 	.word	0x3fe00000
 8005d30:	bff00000 	.word	0xbff00000
 8005d34:	9b05      	ldr	r3, [sp, #20]
 8005d36:	b313      	cbz	r3, 8005d7e <_strtod_l+0xb96>
 8005d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d3e:	d81e      	bhi.n	8005d7e <_strtod_l+0xb96>
 8005d40:	a325      	add	r3, pc, #148	; (adr r3, 8005dd8 <_strtod_l+0xbf0>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	4620      	mov	r0, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f7fa fe41 	bl	80009d0 <__aeabi_dcmple>
 8005d4e:	b190      	cbz	r0, 8005d76 <_strtod_l+0xb8e>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4620      	mov	r0, r4
 8005d54:	f7fa fe98 	bl	8000a88 <__aeabi_d2uiz>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	bf08      	it	eq
 8005d5c:	2001      	moveq	r0, #1
 8005d5e:	f7fa fb41 	bl	80003e4 <__aeabi_ui2d>
 8005d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d64:	4604      	mov	r4, r0
 8005d66:	460d      	mov	r5, r1
 8005d68:	b9d3      	cbnz	r3, 8005da0 <_strtod_l+0xbb8>
 8005d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d6e:	9012      	str	r0, [sp, #72]	; 0x48
 8005d70:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d72:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005d76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d78:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005d7c:	1a9f      	subs	r7, r3, r2
 8005d7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d82:	f001 fd83 	bl	800788c <__ulp>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	4639      	mov	r1, r7
 8005d8e:	f7fa fba3 	bl	80004d8 <__aeabi_dmul>
 8005d92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d96:	f7fa f9e9 	bl	800016c <__adddf3>
 8005d9a:	4681      	mov	r9, r0
 8005d9c:	468a      	mov	sl, r1
 8005d9e:	e777      	b.n	8005c90 <_strtod_l+0xaa8>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005da8:	e7e3      	b.n	8005d72 <_strtod_l+0xb8a>
 8005daa:	a30d      	add	r3, pc, #52	; (adr r3, 8005de0 <_strtod_l+0xbf8>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fe04 	bl	80009bc <__aeabi_dcmplt>
 8005db4:	e79f      	b.n	8005cf6 <_strtod_l+0xb0e>
 8005db6:	2300      	movs	r3, #0
 8005db8:	930d      	str	r3, [sp, #52]	; 0x34
 8005dba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	f7ff ba55 	b.w	800526e <_strtod_l+0x86>
 8005dc4:	2b65      	cmp	r3, #101	; 0x65
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f43f ab42 	beq.w	8005452 <_strtod_l+0x26a>
 8005dce:	2101      	movs	r1, #1
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	9105      	str	r1, [sp, #20]
 8005dd4:	f7ff babf 	b.w	8005356 <_strtod_l+0x16e>
 8005dd8:	ffc00000 	.word	0xffc00000
 8005ddc:	41dfffff 	.word	0x41dfffff
 8005de0:	94a03595 	.word	0x94a03595
 8005de4:	3fcfffff 	.word	0x3fcfffff

08005de8 <strtod>:
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <strtod+0x1c>)
 8005dea:	b410      	push	{r4}
 8005dec:	681c      	ldr	r4, [r3, #0]
 8005dee:	4a06      	ldr	r2, [pc, #24]	; (8005e08 <strtod+0x20>)
 8005df0:	6a23      	ldr	r3, [r4, #32]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bf08      	it	eq
 8005df6:	4613      	moveq	r3, r2
 8005df8:	460a      	mov	r2, r1
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	bc10      	pop	{r4}
 8005e00:	f7ff b9f2 	b.w	80051e8 <_strtod_l>
 8005e04:	2000000c 	.word	0x2000000c
 8005e08:	20000070 	.word	0x20000070

08005e0c <_strtol_l.isra.0>:
 8005e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e10:	4680      	mov	r8, r0
 8005e12:	4689      	mov	r9, r1
 8005e14:	4692      	mov	sl, r2
 8005e16:	461e      	mov	r6, r3
 8005e18:	460f      	mov	r7, r1
 8005e1a:	463d      	mov	r5, r7
 8005e1c:	9808      	ldr	r0, [sp, #32]
 8005e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e22:	f7fe fc0f 	bl	8004644 <__locale_ctype_ptr_l>
 8005e26:	4420      	add	r0, r4
 8005e28:	7843      	ldrb	r3, [r0, #1]
 8005e2a:	f013 0308 	ands.w	r3, r3, #8
 8005e2e:	d132      	bne.n	8005e96 <_strtol_l.isra.0+0x8a>
 8005e30:	2c2d      	cmp	r4, #45	; 0x2d
 8005e32:	d132      	bne.n	8005e9a <_strtol_l.isra.0+0x8e>
 8005e34:	2201      	movs	r2, #1
 8005e36:	787c      	ldrb	r4, [r7, #1]
 8005e38:	1cbd      	adds	r5, r7, #2
 8005e3a:	2e00      	cmp	r6, #0
 8005e3c:	d05d      	beq.n	8005efa <_strtol_l.isra.0+0xee>
 8005e3e:	2e10      	cmp	r6, #16
 8005e40:	d109      	bne.n	8005e56 <_strtol_l.isra.0+0x4a>
 8005e42:	2c30      	cmp	r4, #48	; 0x30
 8005e44:	d107      	bne.n	8005e56 <_strtol_l.isra.0+0x4a>
 8005e46:	782b      	ldrb	r3, [r5, #0]
 8005e48:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e4c:	2b58      	cmp	r3, #88	; 0x58
 8005e4e:	d14f      	bne.n	8005ef0 <_strtol_l.isra.0+0xe4>
 8005e50:	2610      	movs	r6, #16
 8005e52:	786c      	ldrb	r4, [r5, #1]
 8005e54:	3502      	adds	r5, #2
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	bf14      	ite	ne
 8005e5a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005e5e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005e62:	2700      	movs	r7, #0
 8005e64:	fbb1 fcf6 	udiv	ip, r1, r6
 8005e68:	4638      	mov	r0, r7
 8005e6a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005e6e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005e72:	2b09      	cmp	r3, #9
 8005e74:	d817      	bhi.n	8005ea6 <_strtol_l.isra.0+0x9a>
 8005e76:	461c      	mov	r4, r3
 8005e78:	42a6      	cmp	r6, r4
 8005e7a:	dd23      	ble.n	8005ec4 <_strtol_l.isra.0+0xb8>
 8005e7c:	1c7b      	adds	r3, r7, #1
 8005e7e:	d007      	beq.n	8005e90 <_strtol_l.isra.0+0x84>
 8005e80:	4584      	cmp	ip, r0
 8005e82:	d31c      	bcc.n	8005ebe <_strtol_l.isra.0+0xb2>
 8005e84:	d101      	bne.n	8005e8a <_strtol_l.isra.0+0x7e>
 8005e86:	45a6      	cmp	lr, r4
 8005e88:	db19      	blt.n	8005ebe <_strtol_l.isra.0+0xb2>
 8005e8a:	2701      	movs	r7, #1
 8005e8c:	fb00 4006 	mla	r0, r0, r6, r4
 8005e90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e94:	e7eb      	b.n	8005e6e <_strtol_l.isra.0+0x62>
 8005e96:	462f      	mov	r7, r5
 8005e98:	e7bf      	b.n	8005e1a <_strtol_l.isra.0+0xe>
 8005e9a:	2c2b      	cmp	r4, #43	; 0x2b
 8005e9c:	bf04      	itt	eq
 8005e9e:	1cbd      	addeq	r5, r7, #2
 8005ea0:	787c      	ldrbeq	r4, [r7, #1]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	e7c9      	b.n	8005e3a <_strtol_l.isra.0+0x2e>
 8005ea6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005eaa:	2b19      	cmp	r3, #25
 8005eac:	d801      	bhi.n	8005eb2 <_strtol_l.isra.0+0xa6>
 8005eae:	3c37      	subs	r4, #55	; 0x37
 8005eb0:	e7e2      	b.n	8005e78 <_strtol_l.isra.0+0x6c>
 8005eb2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005eb6:	2b19      	cmp	r3, #25
 8005eb8:	d804      	bhi.n	8005ec4 <_strtol_l.isra.0+0xb8>
 8005eba:	3c57      	subs	r4, #87	; 0x57
 8005ebc:	e7dc      	b.n	8005e78 <_strtol_l.isra.0+0x6c>
 8005ebe:	f04f 37ff 	mov.w	r7, #4294967295
 8005ec2:	e7e5      	b.n	8005e90 <_strtol_l.isra.0+0x84>
 8005ec4:	1c7b      	adds	r3, r7, #1
 8005ec6:	d108      	bne.n	8005eda <_strtol_l.isra.0+0xce>
 8005ec8:	2322      	movs	r3, #34	; 0x22
 8005eca:	4608      	mov	r0, r1
 8005ecc:	f8c8 3000 	str.w	r3, [r8]
 8005ed0:	f1ba 0f00 	cmp.w	sl, #0
 8005ed4:	d107      	bne.n	8005ee6 <_strtol_l.isra.0+0xda>
 8005ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eda:	b102      	cbz	r2, 8005ede <_strtol_l.isra.0+0xd2>
 8005edc:	4240      	negs	r0, r0
 8005ede:	f1ba 0f00 	cmp.w	sl, #0
 8005ee2:	d0f8      	beq.n	8005ed6 <_strtol_l.isra.0+0xca>
 8005ee4:	b10f      	cbz	r7, 8005eea <_strtol_l.isra.0+0xde>
 8005ee6:	f105 39ff 	add.w	r9, r5, #4294967295
 8005eea:	f8ca 9000 	str.w	r9, [sl]
 8005eee:	e7f2      	b.n	8005ed6 <_strtol_l.isra.0+0xca>
 8005ef0:	2430      	movs	r4, #48	; 0x30
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	d1af      	bne.n	8005e56 <_strtol_l.isra.0+0x4a>
 8005ef6:	2608      	movs	r6, #8
 8005ef8:	e7ad      	b.n	8005e56 <_strtol_l.isra.0+0x4a>
 8005efa:	2c30      	cmp	r4, #48	; 0x30
 8005efc:	d0a3      	beq.n	8005e46 <_strtol_l.isra.0+0x3a>
 8005efe:	260a      	movs	r6, #10
 8005f00:	e7a9      	b.n	8005e56 <_strtol_l.isra.0+0x4a>
	...

08005f04 <strtol>:
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <strtol+0x24>)
 8005f06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f08:	681c      	ldr	r4, [r3, #0]
 8005f0a:	4d08      	ldr	r5, [pc, #32]	; (8005f2c <strtol+0x28>)
 8005f0c:	6a23      	ldr	r3, [r4, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bf08      	it	eq
 8005f12:	462b      	moveq	r3, r5
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	460a      	mov	r2, r1
 8005f1a:	4601      	mov	r1, r0
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f7ff ff75 	bl	8005e0c <_strtol_l.isra.0>
 8005f22:	b003      	add	sp, #12
 8005f24:	bd30      	pop	{r4, r5, pc}
 8005f26:	bf00      	nop
 8005f28:	2000000c 	.word	0x2000000c
 8005f2c:	20000070 	.word	0x20000070

08005f30 <__utoa>:
 8005f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f32:	b08b      	sub	sp, #44	; 0x2c
 8005f34:	4605      	mov	r5, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	466e      	mov	r6, sp
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <__utoa+0x78>)
 8005f3c:	f103 0c20 	add.w	ip, r3, #32
 8005f40:	4637      	mov	r7, r6
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	3308      	adds	r3, #8
 8005f48:	c703      	stmia	r7!, {r0, r1}
 8005f4a:	4563      	cmp	r3, ip
 8005f4c:	463e      	mov	r6, r7
 8005f4e:	d1f7      	bne.n	8005f40 <__utoa+0x10>
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	791b      	ldrb	r3, [r3, #4]
 8005f54:	6038      	str	r0, [r7, #0]
 8005f56:	713b      	strb	r3, [r7, #4]
 8005f58:	1e93      	subs	r3, r2, #2
 8005f5a:	2b22      	cmp	r3, #34	; 0x22
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	d904      	bls.n	8005f6c <__utoa+0x3c>
 8005f62:	7023      	strb	r3, [r4, #0]
 8005f64:	461c      	mov	r4, r3
 8005f66:	4620      	mov	r0, r4
 8005f68:	b00b      	add	sp, #44	; 0x2c
 8005f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6c:	1e66      	subs	r6, r4, #1
 8005f6e:	fbb5 f0f2 	udiv	r0, r5, r2
 8005f72:	fb02 5510 	mls	r5, r2, r0, r5
 8005f76:	af0a      	add	r7, sp, #40	; 0x28
 8005f78:	443d      	add	r5, r7
 8005f7a:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005f7e:	1c59      	adds	r1, r3, #1
 8005f80:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005f84:	4605      	mov	r5, r0
 8005f86:	b968      	cbnz	r0, 8005fa4 <__utoa+0x74>
 8005f88:	4622      	mov	r2, r4
 8005f8a:	5460      	strb	r0, [r4, r1]
 8005f8c:	4423      	add	r3, r4
 8005f8e:	1b19      	subs	r1, r3, r4
 8005f90:	1b10      	subs	r0, r2, r4
 8005f92:	4281      	cmp	r1, r0
 8005f94:	dde7      	ble.n	8005f66 <__utoa+0x36>
 8005f96:	7811      	ldrb	r1, [r2, #0]
 8005f98:	7818      	ldrb	r0, [r3, #0]
 8005f9a:	f802 0b01 	strb.w	r0, [r2], #1
 8005f9e:	f803 1901 	strb.w	r1, [r3], #-1
 8005fa2:	e7f4      	b.n	8005f8e <__utoa+0x5e>
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	e7e2      	b.n	8005f6e <__utoa+0x3e>
 8005fa8:	08007f78 	.word	0x08007f78

08005fac <__ascii_wctomb>:
 8005fac:	b149      	cbz	r1, 8005fc2 <__ascii_wctomb+0x16>
 8005fae:	2aff      	cmp	r2, #255	; 0xff
 8005fb0:	bf8b      	itete	hi
 8005fb2:	238a      	movhi	r3, #138	; 0x8a
 8005fb4:	700a      	strbls	r2, [r1, #0]
 8005fb6:	6003      	strhi	r3, [r0, #0]
 8005fb8:	2001      	movls	r0, #1
 8005fba:	bf88      	it	hi
 8005fbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8005fc0:	4770      	bx	lr
 8005fc2:	4608      	mov	r0, r1
 8005fc4:	4770      	bx	lr

08005fc6 <quorem>:
 8005fc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fca:	6903      	ldr	r3, [r0, #16]
 8005fcc:	690c      	ldr	r4, [r1, #16]
 8005fce:	4680      	mov	r8, r0
 8005fd0:	42a3      	cmp	r3, r4
 8005fd2:	f2c0 8084 	blt.w	80060de <quorem+0x118>
 8005fd6:	3c01      	subs	r4, #1
 8005fd8:	f101 0714 	add.w	r7, r1, #20
 8005fdc:	f100 0614 	add.w	r6, r0, #20
 8005fe0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005fe4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005fe8:	3501      	adds	r5, #1
 8005fea:	fbb0 f5f5 	udiv	r5, r0, r5
 8005fee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005ff2:	eb06 030c 	add.w	r3, r6, ip
 8005ff6:	eb07 090c 	add.w	r9, r7, ip
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	b39d      	cbz	r5, 8006066 <quorem+0xa0>
 8005ffe:	f04f 0a00 	mov.w	sl, #0
 8006002:	4638      	mov	r0, r7
 8006004:	46b6      	mov	lr, r6
 8006006:	46d3      	mov	fp, sl
 8006008:	f850 2b04 	ldr.w	r2, [r0], #4
 800600c:	b293      	uxth	r3, r2
 800600e:	fb05 a303 	mla	r3, r5, r3, sl
 8006012:	0c12      	lsrs	r2, r2, #16
 8006014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006018:	fb05 a202 	mla	r2, r5, r2, sl
 800601c:	b29b      	uxth	r3, r3
 800601e:	ebab 0303 	sub.w	r3, fp, r3
 8006022:	f8de b000 	ldr.w	fp, [lr]
 8006026:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800602a:	fa1f fb8b 	uxth.w	fp, fp
 800602e:	445b      	add	r3, fp
 8006030:	fa1f fb82 	uxth.w	fp, r2
 8006034:	f8de 2000 	ldr.w	r2, [lr]
 8006038:	4581      	cmp	r9, r0
 800603a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800603e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006042:	b29b      	uxth	r3, r3
 8006044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006048:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800604c:	f84e 3b04 	str.w	r3, [lr], #4
 8006050:	d2da      	bcs.n	8006008 <quorem+0x42>
 8006052:	f856 300c 	ldr.w	r3, [r6, ip]
 8006056:	b933      	cbnz	r3, 8006066 <quorem+0xa0>
 8006058:	9b01      	ldr	r3, [sp, #4]
 800605a:	3b04      	subs	r3, #4
 800605c:	429e      	cmp	r6, r3
 800605e:	461a      	mov	r2, r3
 8006060:	d331      	bcc.n	80060c6 <quorem+0x100>
 8006062:	f8c8 4010 	str.w	r4, [r8, #16]
 8006066:	4640      	mov	r0, r8
 8006068:	f001 fb98 	bl	800779c <__mcmp>
 800606c:	2800      	cmp	r0, #0
 800606e:	db26      	blt.n	80060be <quorem+0xf8>
 8006070:	4630      	mov	r0, r6
 8006072:	f04f 0c00 	mov.w	ip, #0
 8006076:	3501      	adds	r5, #1
 8006078:	f857 1b04 	ldr.w	r1, [r7], #4
 800607c:	f8d0 e000 	ldr.w	lr, [r0]
 8006080:	b28b      	uxth	r3, r1
 8006082:	ebac 0303 	sub.w	r3, ip, r3
 8006086:	fa1f f28e 	uxth.w	r2, lr
 800608a:	4413      	add	r3, r2
 800608c:	0c0a      	lsrs	r2, r1, #16
 800608e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006092:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006096:	b29b      	uxth	r3, r3
 8006098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800609c:	45b9      	cmp	r9, r7
 800609e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060a2:	f840 3b04 	str.w	r3, [r0], #4
 80060a6:	d2e7      	bcs.n	8006078 <quorem+0xb2>
 80060a8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80060ac:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80060b0:	b92a      	cbnz	r2, 80060be <quorem+0xf8>
 80060b2:	3b04      	subs	r3, #4
 80060b4:	429e      	cmp	r6, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	d30b      	bcc.n	80060d2 <quorem+0x10c>
 80060ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80060be:	4628      	mov	r0, r5
 80060c0:	b003      	add	sp, #12
 80060c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	3b04      	subs	r3, #4
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	d1c9      	bne.n	8006062 <quorem+0x9c>
 80060ce:	3c01      	subs	r4, #1
 80060d0:	e7c4      	b.n	800605c <quorem+0x96>
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	3b04      	subs	r3, #4
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	d1ef      	bne.n	80060ba <quorem+0xf4>
 80060da:	3c01      	subs	r4, #1
 80060dc:	e7ea      	b.n	80060b4 <quorem+0xee>
 80060de:	2000      	movs	r0, #0
 80060e0:	e7ee      	b.n	80060c0 <quorem+0xfa>
 80060e2:	0000      	movs	r0, r0
 80060e4:	0000      	movs	r0, r0
	...

080060e8 <_dtoa_r>:
 80060e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ec:	4616      	mov	r6, r2
 80060ee:	461f      	mov	r7, r3
 80060f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060f2:	b095      	sub	sp, #84	; 0x54
 80060f4:	4604      	mov	r4, r0
 80060f6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80060fa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80060fe:	b93d      	cbnz	r5, 8006110 <_dtoa_r+0x28>
 8006100:	2010      	movs	r0, #16
 8006102:	f7fe fab1 	bl	8004668 <malloc>
 8006106:	6260      	str	r0, [r4, #36]	; 0x24
 8006108:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800610c:	6005      	str	r5, [r0, #0]
 800610e:	60c5      	str	r5, [r0, #12]
 8006110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	b151      	cbz	r1, 800612c <_dtoa_r+0x44>
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	2301      	movs	r3, #1
 800611a:	4093      	lsls	r3, r2
 800611c:	604a      	str	r2, [r1, #4]
 800611e:	608b      	str	r3, [r1, #8]
 8006120:	4620      	mov	r0, r4
 8006122:	f001 f91c 	bl	800735e <_Bfree>
 8006126:	2200      	movs	r2, #0
 8006128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	1e3b      	subs	r3, r7, #0
 800612e:	bfaf      	iteee	ge
 8006130:	2300      	movge	r3, #0
 8006132:	2201      	movlt	r2, #1
 8006134:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006138:	9303      	strlt	r3, [sp, #12]
 800613a:	bfac      	ite	ge
 800613c:	f8c8 3000 	strge.w	r3, [r8]
 8006140:	f8c8 2000 	strlt.w	r2, [r8]
 8006144:	4bae      	ldr	r3, [pc, #696]	; (8006400 <_dtoa_r+0x318>)
 8006146:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800614a:	ea33 0308 	bics.w	r3, r3, r8
 800614e:	d11b      	bne.n	8006188 <_dtoa_r+0xa0>
 8006150:	f242 730f 	movw	r3, #9999	; 0x270f
 8006154:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	9b02      	ldr	r3, [sp, #8]
 800615a:	b923      	cbnz	r3, 8006166 <_dtoa_r+0x7e>
 800615c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006160:	2800      	cmp	r0, #0
 8006162:	f000 8545 	beq.w	8006bf0 <_dtoa_r+0xb08>
 8006166:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006168:	b953      	cbnz	r3, 8006180 <_dtoa_r+0x98>
 800616a:	4ba6      	ldr	r3, [pc, #664]	; (8006404 <_dtoa_r+0x31c>)
 800616c:	e021      	b.n	80061b2 <_dtoa_r+0xca>
 800616e:	4ba6      	ldr	r3, [pc, #664]	; (8006408 <_dtoa_r+0x320>)
 8006170:	9306      	str	r3, [sp, #24]
 8006172:	3308      	adds	r3, #8
 8006174:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	9806      	ldr	r0, [sp, #24]
 800617a:	b015      	add	sp, #84	; 0x54
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	4ba0      	ldr	r3, [pc, #640]	; (8006404 <_dtoa_r+0x31c>)
 8006182:	9306      	str	r3, [sp, #24]
 8006184:	3303      	adds	r3, #3
 8006186:	e7f5      	b.n	8006174 <_dtoa_r+0x8c>
 8006188:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800618c:	2200      	movs	r2, #0
 800618e:	2300      	movs	r3, #0
 8006190:	4630      	mov	r0, r6
 8006192:	4639      	mov	r1, r7
 8006194:	f7fa fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8006198:	4682      	mov	sl, r0
 800619a:	b160      	cbz	r0, 80061b6 <_dtoa_r+0xce>
 800619c:	2301      	movs	r3, #1
 800619e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8520 	beq.w	8006bea <_dtoa_r+0xb02>
 80061aa:	4b98      	ldr	r3, [pc, #608]	; (800640c <_dtoa_r+0x324>)
 80061ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	9306      	str	r3, [sp, #24]
 80061b4:	e7e0      	b.n	8006178 <_dtoa_r+0x90>
 80061b6:	ab12      	add	r3, sp, #72	; 0x48
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	ab13      	add	r3, sp, #76	; 0x4c
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	4632      	mov	r2, r6
 80061c0:	463b      	mov	r3, r7
 80061c2:	4620      	mov	r0, r4
 80061c4:	f001 fbd8 	bl	8007978 <__d2b>
 80061c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80061cc:	4683      	mov	fp, r0
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	d07d      	beq.n	80062ce <_dtoa_r+0x1e6>
 80061d2:	46b0      	mov	r8, r6
 80061d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061d8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80061dc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80061e0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061e4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80061e8:	2200      	movs	r2, #0
 80061ea:	4b89      	ldr	r3, [pc, #548]	; (8006410 <_dtoa_r+0x328>)
 80061ec:	4640      	mov	r0, r8
 80061ee:	4649      	mov	r1, r9
 80061f0:	f7f9 ffba 	bl	8000168 <__aeabi_dsub>
 80061f4:	a37c      	add	r3, pc, #496	; (adr r3, 80063e8 <_dtoa_r+0x300>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7fa f96d 	bl	80004d8 <__aeabi_dmul>
 80061fe:	a37c      	add	r3, pc, #496	; (adr r3, 80063f0 <_dtoa_r+0x308>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f7f9 ffb2 	bl	800016c <__adddf3>
 8006208:	4606      	mov	r6, r0
 800620a:	4628      	mov	r0, r5
 800620c:	460f      	mov	r7, r1
 800620e:	f7fa f8f9 	bl	8000404 <__aeabi_i2d>
 8006212:	a379      	add	r3, pc, #484	; (adr r3, 80063f8 <_dtoa_r+0x310>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f7fa f95e 	bl	80004d8 <__aeabi_dmul>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4630      	mov	r0, r6
 8006222:	4639      	mov	r1, r7
 8006224:	f7f9 ffa2 	bl	800016c <__adddf3>
 8006228:	4606      	mov	r6, r0
 800622a:	460f      	mov	r7, r1
 800622c:	f7fa fc04 	bl	8000a38 <__aeabi_d2iz>
 8006230:	2200      	movs	r2, #0
 8006232:	4682      	mov	sl, r0
 8006234:	2300      	movs	r3, #0
 8006236:	4630      	mov	r0, r6
 8006238:	4639      	mov	r1, r7
 800623a:	f7fa fbbf 	bl	80009bc <__aeabi_dcmplt>
 800623e:	b148      	cbz	r0, 8006254 <_dtoa_r+0x16c>
 8006240:	4650      	mov	r0, sl
 8006242:	f7fa f8df 	bl	8000404 <__aeabi_i2d>
 8006246:	4632      	mov	r2, r6
 8006248:	463b      	mov	r3, r7
 800624a:	f7fa fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800624e:	b908      	cbnz	r0, 8006254 <_dtoa_r+0x16c>
 8006250:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006254:	f1ba 0f16 	cmp.w	sl, #22
 8006258:	d85a      	bhi.n	8006310 <_dtoa_r+0x228>
 800625a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800625e:	496d      	ldr	r1, [pc, #436]	; (8006414 <_dtoa_r+0x32c>)
 8006260:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006268:	f7fa fbc6 	bl	80009f8 <__aeabi_dcmpgt>
 800626c:	2800      	cmp	r0, #0
 800626e:	d051      	beq.n	8006314 <_dtoa_r+0x22c>
 8006270:	2300      	movs	r3, #0
 8006272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006276:	930d      	str	r3, [sp, #52]	; 0x34
 8006278:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800627a:	1b5d      	subs	r5, r3, r5
 800627c:	1e6b      	subs	r3, r5, #1
 800627e:	9307      	str	r3, [sp, #28]
 8006280:	bf43      	ittte	mi
 8006282:	2300      	movmi	r3, #0
 8006284:	f1c5 0901 	rsbmi	r9, r5, #1
 8006288:	9307      	strmi	r3, [sp, #28]
 800628a:	f04f 0900 	movpl.w	r9, #0
 800628e:	f1ba 0f00 	cmp.w	sl, #0
 8006292:	db41      	blt.n	8006318 <_dtoa_r+0x230>
 8006294:	9b07      	ldr	r3, [sp, #28]
 8006296:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800629a:	4453      	add	r3, sl
 800629c:	9307      	str	r3, [sp, #28]
 800629e:	2300      	movs	r3, #0
 80062a0:	9308      	str	r3, [sp, #32]
 80062a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	f200 808f 	bhi.w	80063c8 <_dtoa_r+0x2e0>
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	bfc4      	itt	gt
 80062ae:	3b04      	subgt	r3, #4
 80062b0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80062b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062b4:	bfc8      	it	gt
 80062b6:	2500      	movgt	r5, #0
 80062b8:	f1a3 0302 	sub.w	r3, r3, #2
 80062bc:	bfd8      	it	le
 80062be:	2501      	movle	r5, #1
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	f200 808d 	bhi.w	80063e0 <_dtoa_r+0x2f8>
 80062c6:	e8df f003 	tbb	[pc, r3]
 80062ca:	7d7b      	.short	0x7d7b
 80062cc:	6f2f      	.short	0x6f2f
 80062ce:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80062d2:	441d      	add	r5, r3
 80062d4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80062d8:	2820      	cmp	r0, #32
 80062da:	dd13      	ble.n	8006304 <_dtoa_r+0x21c>
 80062dc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80062e0:	9b02      	ldr	r3, [sp, #8]
 80062e2:	fa08 f800 	lsl.w	r8, r8, r0
 80062e6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80062ea:	fa23 f000 	lsr.w	r0, r3, r0
 80062ee:	ea48 0000 	orr.w	r0, r8, r0
 80062f2:	f7fa f877 	bl	80003e4 <__aeabi_ui2d>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4680      	mov	r8, r0
 80062fa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80062fe:	3d01      	subs	r5, #1
 8006300:	9310      	str	r3, [sp, #64]	; 0x40
 8006302:	e771      	b.n	80061e8 <_dtoa_r+0x100>
 8006304:	9b02      	ldr	r3, [sp, #8]
 8006306:	f1c0 0020 	rsb	r0, r0, #32
 800630a:	fa03 f000 	lsl.w	r0, r3, r0
 800630e:	e7f0      	b.n	80062f2 <_dtoa_r+0x20a>
 8006310:	2301      	movs	r3, #1
 8006312:	e7b0      	b.n	8006276 <_dtoa_r+0x18e>
 8006314:	900d      	str	r0, [sp, #52]	; 0x34
 8006316:	e7af      	b.n	8006278 <_dtoa_r+0x190>
 8006318:	f1ca 0300 	rsb	r3, sl, #0
 800631c:	9308      	str	r3, [sp, #32]
 800631e:	2300      	movs	r3, #0
 8006320:	eba9 090a 	sub.w	r9, r9, sl
 8006324:	930c      	str	r3, [sp, #48]	; 0x30
 8006326:	e7bc      	b.n	80062a2 <_dtoa_r+0x1ba>
 8006328:	2301      	movs	r3, #1
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
 800632c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800632e:	2b00      	cmp	r3, #0
 8006330:	dd74      	ble.n	800641c <_dtoa_r+0x334>
 8006332:	4698      	mov	r8, r3
 8006334:	9304      	str	r3, [sp, #16]
 8006336:	2200      	movs	r2, #0
 8006338:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800633a:	6072      	str	r2, [r6, #4]
 800633c:	2204      	movs	r2, #4
 800633e:	f102 0014 	add.w	r0, r2, #20
 8006342:	4298      	cmp	r0, r3
 8006344:	6871      	ldr	r1, [r6, #4]
 8006346:	d96e      	bls.n	8006426 <_dtoa_r+0x33e>
 8006348:	4620      	mov	r0, r4
 800634a:	f000 ffd4 	bl	80072f6 <_Balloc>
 800634e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006350:	6030      	str	r0, [r6, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f1b8 0f0e 	cmp.w	r8, #14
 8006358:	9306      	str	r3, [sp, #24]
 800635a:	f200 80ed 	bhi.w	8006538 <_dtoa_r+0x450>
 800635e:	2d00      	cmp	r5, #0
 8006360:	f000 80ea 	beq.w	8006538 <_dtoa_r+0x450>
 8006364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006368:	f1ba 0f00 	cmp.w	sl, #0
 800636c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006370:	dd77      	ble.n	8006462 <_dtoa_r+0x37a>
 8006372:	4a28      	ldr	r2, [pc, #160]	; (8006414 <_dtoa_r+0x32c>)
 8006374:	f00a 030f 	and.w	r3, sl, #15
 8006378:	ea4f 162a 	mov.w	r6, sl, asr #4
 800637c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006380:	06f0      	lsls	r0, r6, #27
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800638a:	d568      	bpl.n	800645e <_dtoa_r+0x376>
 800638c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006390:	4b21      	ldr	r3, [pc, #132]	; (8006418 <_dtoa_r+0x330>)
 8006392:	2503      	movs	r5, #3
 8006394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006398:	f7fa f9c8 	bl	800072c <__aeabi_ddiv>
 800639c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a0:	f006 060f 	and.w	r6, r6, #15
 80063a4:	4f1c      	ldr	r7, [pc, #112]	; (8006418 <_dtoa_r+0x330>)
 80063a6:	e04f      	b.n	8006448 <_dtoa_r+0x360>
 80063a8:	2301      	movs	r3, #1
 80063aa:	9309      	str	r3, [sp, #36]	; 0x24
 80063ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063ae:	4453      	add	r3, sl
 80063b0:	f103 0801 	add.w	r8, r3, #1
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	4643      	mov	r3, r8
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	bfb8      	it	lt
 80063bc:	2301      	movlt	r3, #1
 80063be:	e7ba      	b.n	8006336 <_dtoa_r+0x24e>
 80063c0:	2300      	movs	r3, #0
 80063c2:	e7b2      	b.n	800632a <_dtoa_r+0x242>
 80063c4:	2300      	movs	r3, #0
 80063c6:	e7f0      	b.n	80063aa <_dtoa_r+0x2c2>
 80063c8:	2501      	movs	r5, #1
 80063ca:	2300      	movs	r3, #0
 80063cc:	9509      	str	r5, [sp, #36]	; 0x24
 80063ce:	931e      	str	r3, [sp, #120]	; 0x78
 80063d0:	f04f 33ff 	mov.w	r3, #4294967295
 80063d4:	2200      	movs	r2, #0
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	4698      	mov	r8, r3
 80063da:	2312      	movs	r3, #18
 80063dc:	921f      	str	r2, [sp, #124]	; 0x7c
 80063de:	e7aa      	b.n	8006336 <_dtoa_r+0x24e>
 80063e0:	2301      	movs	r3, #1
 80063e2:	9309      	str	r3, [sp, #36]	; 0x24
 80063e4:	e7f4      	b.n	80063d0 <_dtoa_r+0x2e8>
 80063e6:	bf00      	nop
 80063e8:	636f4361 	.word	0x636f4361
 80063ec:	3fd287a7 	.word	0x3fd287a7
 80063f0:	8b60c8b3 	.word	0x8b60c8b3
 80063f4:	3fc68a28 	.word	0x3fc68a28
 80063f8:	509f79fb 	.word	0x509f79fb
 80063fc:	3fd34413 	.word	0x3fd34413
 8006400:	7ff00000 	.word	0x7ff00000
 8006404:	080080a7 	.word	0x080080a7
 8006408:	0800809e 	.word	0x0800809e
 800640c:	08007eff 	.word	0x08007eff
 8006410:	3ff80000 	.word	0x3ff80000
 8006414:	080080d8 	.word	0x080080d8
 8006418:	080080b0 	.word	0x080080b0
 800641c:	2301      	movs	r3, #1
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	4698      	mov	r8, r3
 8006422:	461a      	mov	r2, r3
 8006424:	e7da      	b.n	80063dc <_dtoa_r+0x2f4>
 8006426:	3101      	adds	r1, #1
 8006428:	6071      	str	r1, [r6, #4]
 800642a:	0052      	lsls	r2, r2, #1
 800642c:	e787      	b.n	800633e <_dtoa_r+0x256>
 800642e:	07f1      	lsls	r1, r6, #31
 8006430:	d508      	bpl.n	8006444 <_dtoa_r+0x35c>
 8006432:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800643a:	f7fa f84d 	bl	80004d8 <__aeabi_dmul>
 800643e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006442:	3501      	adds	r5, #1
 8006444:	1076      	asrs	r6, r6, #1
 8006446:	3708      	adds	r7, #8
 8006448:	2e00      	cmp	r6, #0
 800644a:	d1f0      	bne.n	800642e <_dtoa_r+0x346>
 800644c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006454:	f7fa f96a 	bl	800072c <__aeabi_ddiv>
 8006458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800645c:	e01b      	b.n	8006496 <_dtoa_r+0x3ae>
 800645e:	2502      	movs	r5, #2
 8006460:	e7a0      	b.n	80063a4 <_dtoa_r+0x2bc>
 8006462:	f000 80a4 	beq.w	80065ae <_dtoa_r+0x4c6>
 8006466:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800646a:	f1ca 0600 	rsb	r6, sl, #0
 800646e:	4ba0      	ldr	r3, [pc, #640]	; (80066f0 <_dtoa_r+0x608>)
 8006470:	f006 020f 	and.w	r2, r6, #15
 8006474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f7fa f82c 	bl	80004d8 <__aeabi_dmul>
 8006480:	2502      	movs	r5, #2
 8006482:	2300      	movs	r3, #0
 8006484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006488:	4f9a      	ldr	r7, [pc, #616]	; (80066f4 <_dtoa_r+0x60c>)
 800648a:	1136      	asrs	r6, r6, #4
 800648c:	2e00      	cmp	r6, #0
 800648e:	f040 8083 	bne.w	8006598 <_dtoa_r+0x4b0>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e0      	bne.n	8006458 <_dtoa_r+0x370>
 8006496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 808a 	beq.w	80065b2 <_dtoa_r+0x4ca>
 800649e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80064a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064aa:	2200      	movs	r2, #0
 80064ac:	4b92      	ldr	r3, [pc, #584]	; (80066f8 <_dtoa_r+0x610>)
 80064ae:	f7fa fa85 	bl	80009bc <__aeabi_dcmplt>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d07d      	beq.n	80065b2 <_dtoa_r+0x4ca>
 80064b6:	f1b8 0f00 	cmp.w	r8, #0
 80064ba:	d07a      	beq.n	80065b2 <_dtoa_r+0x4ca>
 80064bc:	9b04      	ldr	r3, [sp, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dd36      	ble.n	8006530 <_dtoa_r+0x448>
 80064c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064c6:	2200      	movs	r2, #0
 80064c8:	4b8c      	ldr	r3, [pc, #560]	; (80066fc <_dtoa_r+0x614>)
 80064ca:	f7fa f805 	bl	80004d8 <__aeabi_dmul>
 80064ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d2:	9e04      	ldr	r6, [sp, #16]
 80064d4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80064d8:	3501      	adds	r5, #1
 80064da:	4628      	mov	r0, r5
 80064dc:	f7f9 ff92 	bl	8000404 <__aeabi_i2d>
 80064e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064e4:	f7f9 fff8 	bl	80004d8 <__aeabi_dmul>
 80064e8:	2200      	movs	r2, #0
 80064ea:	4b85      	ldr	r3, [pc, #532]	; (8006700 <_dtoa_r+0x618>)
 80064ec:	f7f9 fe3e 	bl	800016c <__adddf3>
 80064f0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80064f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064f8:	950b      	str	r5, [sp, #44]	; 0x2c
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	d15c      	bne.n	80065b8 <_dtoa_r+0x4d0>
 80064fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	4b7f      	ldr	r3, [pc, #508]	; (8006704 <_dtoa_r+0x61c>)
 8006506:	f7f9 fe2f 	bl	8000168 <__aeabi_dsub>
 800650a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800650c:	462b      	mov	r3, r5
 800650e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006512:	f7fa fa71 	bl	80009f8 <__aeabi_dcmpgt>
 8006516:	2800      	cmp	r0, #0
 8006518:	f040 8281 	bne.w	8006a1e <_dtoa_r+0x936>
 800651c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006522:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006526:	f7fa fa49 	bl	80009bc <__aeabi_dcmplt>
 800652a:	2800      	cmp	r0, #0
 800652c:	f040 8275 	bne.w	8006a1a <_dtoa_r+0x932>
 8006530:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006538:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800653a:	2b00      	cmp	r3, #0
 800653c:	f2c0 814b 	blt.w	80067d6 <_dtoa_r+0x6ee>
 8006540:	f1ba 0f0e 	cmp.w	sl, #14
 8006544:	f300 8147 	bgt.w	80067d6 <_dtoa_r+0x6ee>
 8006548:	4b69      	ldr	r3, [pc, #420]	; (80066f0 <_dtoa_r+0x608>)
 800654a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006556:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006558:	2b00      	cmp	r3, #0
 800655a:	f280 80d7 	bge.w	800670c <_dtoa_r+0x624>
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	f300 80d3 	bgt.w	800670c <_dtoa_r+0x624>
 8006566:	f040 8257 	bne.w	8006a18 <_dtoa_r+0x930>
 800656a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800656e:	2200      	movs	r2, #0
 8006570:	4b64      	ldr	r3, [pc, #400]	; (8006704 <_dtoa_r+0x61c>)
 8006572:	f7f9 ffb1 	bl	80004d8 <__aeabi_dmul>
 8006576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800657a:	f7fa fa33 	bl	80009e4 <__aeabi_dcmpge>
 800657e:	4646      	mov	r6, r8
 8006580:	4647      	mov	r7, r8
 8006582:	2800      	cmp	r0, #0
 8006584:	f040 822d 	bne.w	80069e2 <_dtoa_r+0x8fa>
 8006588:	9b06      	ldr	r3, [sp, #24]
 800658a:	9a06      	ldr	r2, [sp, #24]
 800658c:	1c5d      	adds	r5, r3, #1
 800658e:	2331      	movs	r3, #49	; 0x31
 8006590:	f10a 0a01 	add.w	sl, sl, #1
 8006594:	7013      	strb	r3, [r2, #0]
 8006596:	e228      	b.n	80069ea <_dtoa_r+0x902>
 8006598:	07f2      	lsls	r2, r6, #31
 800659a:	d505      	bpl.n	80065a8 <_dtoa_r+0x4c0>
 800659c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a0:	f7f9 ff9a 	bl	80004d8 <__aeabi_dmul>
 80065a4:	2301      	movs	r3, #1
 80065a6:	3501      	adds	r5, #1
 80065a8:	1076      	asrs	r6, r6, #1
 80065aa:	3708      	adds	r7, #8
 80065ac:	e76e      	b.n	800648c <_dtoa_r+0x3a4>
 80065ae:	2502      	movs	r5, #2
 80065b0:	e771      	b.n	8006496 <_dtoa_r+0x3ae>
 80065b2:	4657      	mov	r7, sl
 80065b4:	4646      	mov	r6, r8
 80065b6:	e790      	b.n	80064da <_dtoa_r+0x3f2>
 80065b8:	4b4d      	ldr	r3, [pc, #308]	; (80066f0 <_dtoa_r+0x608>)
 80065ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065be:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80065c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d048      	beq.n	800665a <_dtoa_r+0x572>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	2000      	movs	r0, #0
 80065ce:	494e      	ldr	r1, [pc, #312]	; (8006708 <_dtoa_r+0x620>)
 80065d0:	f7fa f8ac 	bl	800072c <__aeabi_ddiv>
 80065d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065d8:	f7f9 fdc6 	bl	8000168 <__aeabi_dsub>
 80065dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065e0:	9d06      	ldr	r5, [sp, #24]
 80065e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e6:	f7fa fa27 	bl	8000a38 <__aeabi_d2iz>
 80065ea:	9011      	str	r0, [sp, #68]	; 0x44
 80065ec:	f7f9 ff0a 	bl	8000404 <__aeabi_i2d>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f8:	f7f9 fdb6 	bl	8000168 <__aeabi_dsub>
 80065fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006602:	3330      	adds	r3, #48	; 0x30
 8006604:	f805 3b01 	strb.w	r3, [r5], #1
 8006608:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800660c:	f7fa f9d6 	bl	80009bc <__aeabi_dcmplt>
 8006610:	2800      	cmp	r0, #0
 8006612:	d163      	bne.n	80066dc <_dtoa_r+0x5f4>
 8006614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006618:	2000      	movs	r0, #0
 800661a:	4937      	ldr	r1, [pc, #220]	; (80066f8 <_dtoa_r+0x610>)
 800661c:	f7f9 fda4 	bl	8000168 <__aeabi_dsub>
 8006620:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006624:	f7fa f9ca 	bl	80009bc <__aeabi_dcmplt>
 8006628:	2800      	cmp	r0, #0
 800662a:	f040 80b5 	bne.w	8006798 <_dtoa_r+0x6b0>
 800662e:	9b06      	ldr	r3, [sp, #24]
 8006630:	1aeb      	subs	r3, r5, r3
 8006632:	429e      	cmp	r6, r3
 8006634:	f77f af7c 	ble.w	8006530 <_dtoa_r+0x448>
 8006638:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800663c:	2200      	movs	r2, #0
 800663e:	4b2f      	ldr	r3, [pc, #188]	; (80066fc <_dtoa_r+0x614>)
 8006640:	f7f9 ff4a 	bl	80004d8 <__aeabi_dmul>
 8006644:	2200      	movs	r2, #0
 8006646:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800664a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800664e:	4b2b      	ldr	r3, [pc, #172]	; (80066fc <_dtoa_r+0x614>)
 8006650:	f7f9 ff42 	bl	80004d8 <__aeabi_dmul>
 8006654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006658:	e7c3      	b.n	80065e2 <_dtoa_r+0x4fa>
 800665a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800665e:	f7f9 ff3b 	bl	80004d8 <__aeabi_dmul>
 8006662:	9b06      	ldr	r3, [sp, #24]
 8006664:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006668:	199d      	adds	r5, r3, r6
 800666a:	461e      	mov	r6, r3
 800666c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006670:	f7fa f9e2 	bl	8000a38 <__aeabi_d2iz>
 8006674:	9011      	str	r0, [sp, #68]	; 0x44
 8006676:	f7f9 fec5 	bl	8000404 <__aeabi_i2d>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006682:	f7f9 fd71 	bl	8000168 <__aeabi_dsub>
 8006686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800668c:	3330      	adds	r3, #48	; 0x30
 800668e:	f806 3b01 	strb.w	r3, [r6], #1
 8006692:	42ae      	cmp	r6, r5
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	d124      	bne.n	80066e4 <_dtoa_r+0x5fc>
 800669a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800669e:	4b1a      	ldr	r3, [pc, #104]	; (8006708 <_dtoa_r+0x620>)
 80066a0:	f7f9 fd64 	bl	800016c <__adddf3>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ac:	f7fa f9a4 	bl	80009f8 <__aeabi_dcmpgt>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d171      	bne.n	8006798 <_dtoa_r+0x6b0>
 80066b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066b8:	2000      	movs	r0, #0
 80066ba:	4913      	ldr	r1, [pc, #76]	; (8006708 <_dtoa_r+0x620>)
 80066bc:	f7f9 fd54 	bl	8000168 <__aeabi_dsub>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c8:	f7fa f978 	bl	80009bc <__aeabi_dcmplt>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f43f af2f 	beq.w	8006530 <_dtoa_r+0x448>
 80066d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066d6:	1e6a      	subs	r2, r5, #1
 80066d8:	2b30      	cmp	r3, #48	; 0x30
 80066da:	d001      	beq.n	80066e0 <_dtoa_r+0x5f8>
 80066dc:	46ba      	mov	sl, r7
 80066de:	e04a      	b.n	8006776 <_dtoa_r+0x68e>
 80066e0:	4615      	mov	r5, r2
 80066e2:	e7f6      	b.n	80066d2 <_dtoa_r+0x5ea>
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <_dtoa_r+0x614>)
 80066e6:	f7f9 fef7 	bl	80004d8 <__aeabi_dmul>
 80066ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ee:	e7bd      	b.n	800666c <_dtoa_r+0x584>
 80066f0:	080080d8 	.word	0x080080d8
 80066f4:	080080b0 	.word	0x080080b0
 80066f8:	3ff00000 	.word	0x3ff00000
 80066fc:	40240000 	.word	0x40240000
 8006700:	401c0000 	.word	0x401c0000
 8006704:	40140000 	.word	0x40140000
 8006708:	3fe00000 	.word	0x3fe00000
 800670c:	9d06      	ldr	r5, [sp, #24]
 800670e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006716:	4630      	mov	r0, r6
 8006718:	4639      	mov	r1, r7
 800671a:	f7fa f807 	bl	800072c <__aeabi_ddiv>
 800671e:	f7fa f98b 	bl	8000a38 <__aeabi_d2iz>
 8006722:	4681      	mov	r9, r0
 8006724:	f7f9 fe6e 	bl	8000404 <__aeabi_i2d>
 8006728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800672c:	f7f9 fed4 	bl	80004d8 <__aeabi_dmul>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4630      	mov	r0, r6
 8006736:	4639      	mov	r1, r7
 8006738:	f7f9 fd16 	bl	8000168 <__aeabi_dsub>
 800673c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006740:	f805 6b01 	strb.w	r6, [r5], #1
 8006744:	9e06      	ldr	r6, [sp, #24]
 8006746:	4602      	mov	r2, r0
 8006748:	1bae      	subs	r6, r5, r6
 800674a:	45b0      	cmp	r8, r6
 800674c:	460b      	mov	r3, r1
 800674e:	d135      	bne.n	80067bc <_dtoa_r+0x6d4>
 8006750:	f7f9 fd0c 	bl	800016c <__adddf3>
 8006754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006758:	4606      	mov	r6, r0
 800675a:	460f      	mov	r7, r1
 800675c:	f7fa f94c 	bl	80009f8 <__aeabi_dcmpgt>
 8006760:	b9c8      	cbnz	r0, 8006796 <_dtoa_r+0x6ae>
 8006762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006766:	4630      	mov	r0, r6
 8006768:	4639      	mov	r1, r7
 800676a:	f7fa f91d 	bl	80009a8 <__aeabi_dcmpeq>
 800676e:	b110      	cbz	r0, 8006776 <_dtoa_r+0x68e>
 8006770:	f019 0f01 	tst.w	r9, #1
 8006774:	d10f      	bne.n	8006796 <_dtoa_r+0x6ae>
 8006776:	4659      	mov	r1, fp
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fdf0 	bl	800735e <_Bfree>
 800677e:	2300      	movs	r3, #0
 8006780:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006782:	702b      	strb	r3, [r5, #0]
 8006784:	f10a 0301 	add.w	r3, sl, #1
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800678c:	2b00      	cmp	r3, #0
 800678e:	f43f acf3 	beq.w	8006178 <_dtoa_r+0x90>
 8006792:	601d      	str	r5, [r3, #0]
 8006794:	e4f0      	b.n	8006178 <_dtoa_r+0x90>
 8006796:	4657      	mov	r7, sl
 8006798:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800679c:	1e6b      	subs	r3, r5, #1
 800679e:	2a39      	cmp	r2, #57	; 0x39
 80067a0:	d106      	bne.n	80067b0 <_dtoa_r+0x6c8>
 80067a2:	9a06      	ldr	r2, [sp, #24]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d107      	bne.n	80067b8 <_dtoa_r+0x6d0>
 80067a8:	2330      	movs	r3, #48	; 0x30
 80067aa:	7013      	strb	r3, [r2, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	3701      	adds	r7, #1
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	3201      	adds	r2, #1
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e791      	b.n	80066dc <_dtoa_r+0x5f4>
 80067b8:	461d      	mov	r5, r3
 80067ba:	e7ed      	b.n	8006798 <_dtoa_r+0x6b0>
 80067bc:	2200      	movs	r2, #0
 80067be:	4b99      	ldr	r3, [pc, #612]	; (8006a24 <_dtoa_r+0x93c>)
 80067c0:	f7f9 fe8a 	bl	80004d8 <__aeabi_dmul>
 80067c4:	2200      	movs	r2, #0
 80067c6:	2300      	movs	r3, #0
 80067c8:	4606      	mov	r6, r0
 80067ca:	460f      	mov	r7, r1
 80067cc:	f7fa f8ec 	bl	80009a8 <__aeabi_dcmpeq>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d09e      	beq.n	8006712 <_dtoa_r+0x62a>
 80067d4:	e7cf      	b.n	8006776 <_dtoa_r+0x68e>
 80067d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067d8:	2a00      	cmp	r2, #0
 80067da:	f000 8088 	beq.w	80068ee <_dtoa_r+0x806>
 80067de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80067e0:	2a01      	cmp	r2, #1
 80067e2:	dc6d      	bgt.n	80068c0 <_dtoa_r+0x7d8>
 80067e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	d066      	beq.n	80068b8 <_dtoa_r+0x7d0>
 80067ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067ee:	464d      	mov	r5, r9
 80067f0:	9e08      	ldr	r6, [sp, #32]
 80067f2:	9a07      	ldr	r2, [sp, #28]
 80067f4:	2101      	movs	r1, #1
 80067f6:	441a      	add	r2, r3
 80067f8:	4620      	mov	r0, r4
 80067fa:	4499      	add	r9, r3
 80067fc:	9207      	str	r2, [sp, #28]
 80067fe:	f000 fe8c 	bl	800751a <__i2b>
 8006802:	4607      	mov	r7, r0
 8006804:	2d00      	cmp	r5, #0
 8006806:	dd0b      	ble.n	8006820 <_dtoa_r+0x738>
 8006808:	9b07      	ldr	r3, [sp, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	dd08      	ble.n	8006820 <_dtoa_r+0x738>
 800680e:	42ab      	cmp	r3, r5
 8006810:	bfa8      	it	ge
 8006812:	462b      	movge	r3, r5
 8006814:	9a07      	ldr	r2, [sp, #28]
 8006816:	eba9 0903 	sub.w	r9, r9, r3
 800681a:	1aed      	subs	r5, r5, r3
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	9307      	str	r3, [sp, #28]
 8006820:	9b08      	ldr	r3, [sp, #32]
 8006822:	b1eb      	cbz	r3, 8006860 <_dtoa_r+0x778>
 8006824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	d065      	beq.n	80068f6 <_dtoa_r+0x80e>
 800682a:	b18e      	cbz	r6, 8006850 <_dtoa_r+0x768>
 800682c:	4639      	mov	r1, r7
 800682e:	4632      	mov	r2, r6
 8006830:	4620      	mov	r0, r4
 8006832:	f000 ff11 	bl	8007658 <__pow5mult>
 8006836:	465a      	mov	r2, fp
 8006838:	4601      	mov	r1, r0
 800683a:	4607      	mov	r7, r0
 800683c:	4620      	mov	r0, r4
 800683e:	f000 fe75 	bl	800752c <__multiply>
 8006842:	4659      	mov	r1, fp
 8006844:	900a      	str	r0, [sp, #40]	; 0x28
 8006846:	4620      	mov	r0, r4
 8006848:	f000 fd89 	bl	800735e <_Bfree>
 800684c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684e:	469b      	mov	fp, r3
 8006850:	9b08      	ldr	r3, [sp, #32]
 8006852:	1b9a      	subs	r2, r3, r6
 8006854:	d004      	beq.n	8006860 <_dtoa_r+0x778>
 8006856:	4659      	mov	r1, fp
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fefd 	bl	8007658 <__pow5mult>
 800685e:	4683      	mov	fp, r0
 8006860:	2101      	movs	r1, #1
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fe59 	bl	800751a <__i2b>
 8006868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800686a:	4606      	mov	r6, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 81c6 	beq.w	8006bfe <_dtoa_r+0xb16>
 8006872:	461a      	mov	r2, r3
 8006874:	4601      	mov	r1, r0
 8006876:	4620      	mov	r0, r4
 8006878:	f000 feee 	bl	8007658 <__pow5mult>
 800687c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800687e:	4606      	mov	r6, r0
 8006880:	2b01      	cmp	r3, #1
 8006882:	dc3e      	bgt.n	8006902 <_dtoa_r+0x81a>
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d137      	bne.n	80068fa <_dtoa_r+0x812>
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006890:	2b00      	cmp	r3, #0
 8006892:	d134      	bne.n	80068fe <_dtoa_r+0x816>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800689a:	0d1b      	lsrs	r3, r3, #20
 800689c:	051b      	lsls	r3, r3, #20
 800689e:	b12b      	cbz	r3, 80068ac <_dtoa_r+0x7c4>
 80068a0:	9b07      	ldr	r3, [sp, #28]
 80068a2:	f109 0901 	add.w	r9, r9, #1
 80068a6:	3301      	adds	r3, #1
 80068a8:	9307      	str	r3, [sp, #28]
 80068aa:	2301      	movs	r3, #1
 80068ac:	9308      	str	r3, [sp, #32]
 80068ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d128      	bne.n	8006906 <_dtoa_r+0x81e>
 80068b4:	2001      	movs	r0, #1
 80068b6:	e02e      	b.n	8006916 <_dtoa_r+0x82e>
 80068b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068be:	e796      	b.n	80067ee <_dtoa_r+0x706>
 80068c0:	9b08      	ldr	r3, [sp, #32]
 80068c2:	f108 36ff 	add.w	r6, r8, #4294967295
 80068c6:	42b3      	cmp	r3, r6
 80068c8:	bfb7      	itett	lt
 80068ca:	9b08      	ldrlt	r3, [sp, #32]
 80068cc:	1b9e      	subge	r6, r3, r6
 80068ce:	1af2      	sublt	r2, r6, r3
 80068d0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80068d2:	bfbf      	itttt	lt
 80068d4:	9608      	strlt	r6, [sp, #32]
 80068d6:	189b      	addlt	r3, r3, r2
 80068d8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80068da:	2600      	movlt	r6, #0
 80068dc:	f1b8 0f00 	cmp.w	r8, #0
 80068e0:	bfb9      	ittee	lt
 80068e2:	eba9 0508 	sublt.w	r5, r9, r8
 80068e6:	2300      	movlt	r3, #0
 80068e8:	464d      	movge	r5, r9
 80068ea:	4643      	movge	r3, r8
 80068ec:	e781      	b.n	80067f2 <_dtoa_r+0x70a>
 80068ee:	9e08      	ldr	r6, [sp, #32]
 80068f0:	464d      	mov	r5, r9
 80068f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068f4:	e786      	b.n	8006804 <_dtoa_r+0x71c>
 80068f6:	9a08      	ldr	r2, [sp, #32]
 80068f8:	e7ad      	b.n	8006856 <_dtoa_r+0x76e>
 80068fa:	2300      	movs	r3, #0
 80068fc:	e7d6      	b.n	80068ac <_dtoa_r+0x7c4>
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	e7d4      	b.n	80068ac <_dtoa_r+0x7c4>
 8006902:	2300      	movs	r3, #0
 8006904:	9308      	str	r3, [sp, #32]
 8006906:	6933      	ldr	r3, [r6, #16]
 8006908:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800690c:	6918      	ldr	r0, [r3, #16]
 800690e:	f000 fdb6 	bl	800747e <__hi0bits>
 8006912:	f1c0 0020 	rsb	r0, r0, #32
 8006916:	9b07      	ldr	r3, [sp, #28]
 8006918:	4418      	add	r0, r3
 800691a:	f010 001f 	ands.w	r0, r0, #31
 800691e:	d047      	beq.n	80069b0 <_dtoa_r+0x8c8>
 8006920:	f1c0 0320 	rsb	r3, r0, #32
 8006924:	2b04      	cmp	r3, #4
 8006926:	dd3b      	ble.n	80069a0 <_dtoa_r+0x8b8>
 8006928:	9b07      	ldr	r3, [sp, #28]
 800692a:	f1c0 001c 	rsb	r0, r0, #28
 800692e:	4481      	add	r9, r0
 8006930:	4405      	add	r5, r0
 8006932:	4403      	add	r3, r0
 8006934:	9307      	str	r3, [sp, #28]
 8006936:	f1b9 0f00 	cmp.w	r9, #0
 800693a:	dd05      	ble.n	8006948 <_dtoa_r+0x860>
 800693c:	4659      	mov	r1, fp
 800693e:	464a      	mov	r2, r9
 8006940:	4620      	mov	r0, r4
 8006942:	f000 fed7 	bl	80076f4 <__lshift>
 8006946:	4683      	mov	fp, r0
 8006948:	9b07      	ldr	r3, [sp, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	dd05      	ble.n	800695a <_dtoa_r+0x872>
 800694e:	4631      	mov	r1, r6
 8006950:	461a      	mov	r2, r3
 8006952:	4620      	mov	r0, r4
 8006954:	f000 fece 	bl	80076f4 <__lshift>
 8006958:	4606      	mov	r6, r0
 800695a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800695c:	b353      	cbz	r3, 80069b4 <_dtoa_r+0x8cc>
 800695e:	4631      	mov	r1, r6
 8006960:	4658      	mov	r0, fp
 8006962:	f000 ff1b 	bl	800779c <__mcmp>
 8006966:	2800      	cmp	r0, #0
 8006968:	da24      	bge.n	80069b4 <_dtoa_r+0x8cc>
 800696a:	2300      	movs	r3, #0
 800696c:	4659      	mov	r1, fp
 800696e:	220a      	movs	r2, #10
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fd0b 	bl	800738c <__multadd>
 8006976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006978:	f10a 3aff 	add.w	sl, sl, #4294967295
 800697c:	4683      	mov	fp, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8144 	beq.w	8006c0c <_dtoa_r+0xb24>
 8006984:	2300      	movs	r3, #0
 8006986:	4639      	mov	r1, r7
 8006988:	220a      	movs	r2, #10
 800698a:	4620      	mov	r0, r4
 800698c:	f000 fcfe 	bl	800738c <__multadd>
 8006990:	9b04      	ldr	r3, [sp, #16]
 8006992:	4607      	mov	r7, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	dc4d      	bgt.n	8006a34 <_dtoa_r+0x94c>
 8006998:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800699a:	2b02      	cmp	r3, #2
 800699c:	dd4a      	ble.n	8006a34 <_dtoa_r+0x94c>
 800699e:	e011      	b.n	80069c4 <_dtoa_r+0x8dc>
 80069a0:	d0c9      	beq.n	8006936 <_dtoa_r+0x84e>
 80069a2:	9a07      	ldr	r2, [sp, #28]
 80069a4:	331c      	adds	r3, #28
 80069a6:	441a      	add	r2, r3
 80069a8:	4499      	add	r9, r3
 80069aa:	441d      	add	r5, r3
 80069ac:	4613      	mov	r3, r2
 80069ae:	e7c1      	b.n	8006934 <_dtoa_r+0x84c>
 80069b0:	4603      	mov	r3, r0
 80069b2:	e7f6      	b.n	80069a2 <_dtoa_r+0x8ba>
 80069b4:	f1b8 0f00 	cmp.w	r8, #0
 80069b8:	dc36      	bgt.n	8006a28 <_dtoa_r+0x940>
 80069ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069bc:	2b02      	cmp	r3, #2
 80069be:	dd33      	ble.n	8006a28 <_dtoa_r+0x940>
 80069c0:	f8cd 8010 	str.w	r8, [sp, #16]
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	b963      	cbnz	r3, 80069e2 <_dtoa_r+0x8fa>
 80069c8:	4631      	mov	r1, r6
 80069ca:	2205      	movs	r2, #5
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fcdd 	bl	800738c <__multadd>
 80069d2:	4601      	mov	r1, r0
 80069d4:	4606      	mov	r6, r0
 80069d6:	4658      	mov	r0, fp
 80069d8:	f000 fee0 	bl	800779c <__mcmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	f73f add3 	bgt.w	8006588 <_dtoa_r+0x4a0>
 80069e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069e4:	9d06      	ldr	r5, [sp, #24]
 80069e6:	ea6f 0a03 	mvn.w	sl, r3
 80069ea:	f04f 0900 	mov.w	r9, #0
 80069ee:	4631      	mov	r1, r6
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fcb4 	bl	800735e <_Bfree>
 80069f6:	2f00      	cmp	r7, #0
 80069f8:	f43f aebd 	beq.w	8006776 <_dtoa_r+0x68e>
 80069fc:	f1b9 0f00 	cmp.w	r9, #0
 8006a00:	d005      	beq.n	8006a0e <_dtoa_r+0x926>
 8006a02:	45b9      	cmp	r9, r7
 8006a04:	d003      	beq.n	8006a0e <_dtoa_r+0x926>
 8006a06:	4649      	mov	r1, r9
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fca8 	bl	800735e <_Bfree>
 8006a0e:	4639      	mov	r1, r7
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fca4 	bl	800735e <_Bfree>
 8006a16:	e6ae      	b.n	8006776 <_dtoa_r+0x68e>
 8006a18:	2600      	movs	r6, #0
 8006a1a:	4637      	mov	r7, r6
 8006a1c:	e7e1      	b.n	80069e2 <_dtoa_r+0x8fa>
 8006a1e:	46ba      	mov	sl, r7
 8006a20:	4637      	mov	r7, r6
 8006a22:	e5b1      	b.n	8006588 <_dtoa_r+0x4a0>
 8006a24:	40240000 	.word	0x40240000
 8006a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 80f3 	beq.w	8006c1a <_dtoa_r+0xb32>
 8006a34:	2d00      	cmp	r5, #0
 8006a36:	dd05      	ble.n	8006a44 <_dtoa_r+0x95c>
 8006a38:	4639      	mov	r1, r7
 8006a3a:	462a      	mov	r2, r5
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 fe59 	bl	80076f4 <__lshift>
 8006a42:	4607      	mov	r7, r0
 8006a44:	9b08      	ldr	r3, [sp, #32]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d04c      	beq.n	8006ae4 <_dtoa_r+0x9fc>
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f000 fc52 	bl	80072f6 <_Balloc>
 8006a52:	4605      	mov	r5, r0
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	f107 010c 	add.w	r1, r7, #12
 8006a5a:	3202      	adds	r2, #2
 8006a5c:	0092      	lsls	r2, r2, #2
 8006a5e:	300c      	adds	r0, #12
 8006a60:	f000 fc3c 	bl	80072dc <memcpy>
 8006a64:	2201      	movs	r2, #1
 8006a66:	4629      	mov	r1, r5
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fe43 	bl	80076f4 <__lshift>
 8006a6e:	46b9      	mov	r9, r7
 8006a70:	4607      	mov	r7, r0
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	9307      	str	r3, [sp, #28]
 8006a76:	9b02      	ldr	r3, [sp, #8]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	9308      	str	r3, [sp, #32]
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4658      	mov	r0, fp
 8006a82:	f7ff faa0 	bl	8005fc6 <quorem>
 8006a86:	4649      	mov	r1, r9
 8006a88:	4605      	mov	r5, r0
 8006a8a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a8e:	4658      	mov	r0, fp
 8006a90:	f000 fe84 	bl	800779c <__mcmp>
 8006a94:	463a      	mov	r2, r7
 8006a96:	9002      	str	r0, [sp, #8]
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 fe98 	bl	80077d0 <__mdiff>
 8006aa0:	68c3      	ldr	r3, [r0, #12]
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	bb03      	cbnz	r3, 8006ae8 <_dtoa_r+0xa00>
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	9009      	str	r0, [sp, #36]	; 0x24
 8006aaa:	4658      	mov	r0, fp
 8006aac:	f000 fe76 	bl	800779c <__mcmp>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aba:	f000 fc50 	bl	800735e <_Bfree>
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	b9a3      	cbnz	r3, 8006aec <_dtoa_r+0xa04>
 8006ac2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ac4:	b992      	cbnz	r2, 8006aec <_dtoa_r+0xa04>
 8006ac6:	9a08      	ldr	r2, [sp, #32]
 8006ac8:	b982      	cbnz	r2, 8006aec <_dtoa_r+0xa04>
 8006aca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ace:	d029      	beq.n	8006b24 <_dtoa_r+0xa3c>
 8006ad0:	9b02      	ldr	r3, [sp, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dd01      	ble.n	8006ada <_dtoa_r+0x9f2>
 8006ad6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006ada:	9b07      	ldr	r3, [sp, #28]
 8006adc:	1c5d      	adds	r5, r3, #1
 8006ade:	f883 8000 	strb.w	r8, [r3]
 8006ae2:	e784      	b.n	80069ee <_dtoa_r+0x906>
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	e7c2      	b.n	8006a6e <_dtoa_r+0x986>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e7e3      	b.n	8006ab4 <_dtoa_r+0x9cc>
 8006aec:	9a02      	ldr	r2, [sp, #8]
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	db04      	blt.n	8006afc <_dtoa_r+0xa14>
 8006af2:	d123      	bne.n	8006b3c <_dtoa_r+0xa54>
 8006af4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006af6:	bb0a      	cbnz	r2, 8006b3c <_dtoa_r+0xa54>
 8006af8:	9a08      	ldr	r2, [sp, #32]
 8006afa:	b9fa      	cbnz	r2, 8006b3c <_dtoa_r+0xa54>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	ddec      	ble.n	8006ada <_dtoa_r+0x9f2>
 8006b00:	4659      	mov	r1, fp
 8006b02:	2201      	movs	r2, #1
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fdf5 	bl	80076f4 <__lshift>
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4683      	mov	fp, r0
 8006b0e:	f000 fe45 	bl	800779c <__mcmp>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	dc03      	bgt.n	8006b1e <_dtoa_r+0xa36>
 8006b16:	d1e0      	bne.n	8006ada <_dtoa_r+0x9f2>
 8006b18:	f018 0f01 	tst.w	r8, #1
 8006b1c:	d0dd      	beq.n	8006ada <_dtoa_r+0x9f2>
 8006b1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b22:	d1d8      	bne.n	8006ad6 <_dtoa_r+0x9ee>
 8006b24:	9b07      	ldr	r3, [sp, #28]
 8006b26:	9a07      	ldr	r2, [sp, #28]
 8006b28:	1c5d      	adds	r5, r3, #1
 8006b2a:	2339      	movs	r3, #57	; 0x39
 8006b2c:	7013      	strb	r3, [r2, #0]
 8006b2e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b32:	1e6a      	subs	r2, r5, #1
 8006b34:	2b39      	cmp	r3, #57	; 0x39
 8006b36:	d04d      	beq.n	8006bd4 <_dtoa_r+0xaec>
 8006b38:	3301      	adds	r3, #1
 8006b3a:	e052      	b.n	8006be2 <_dtoa_r+0xafa>
 8006b3c:	9a07      	ldr	r2, [sp, #28]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f102 0501 	add.w	r5, r2, #1
 8006b44:	dd06      	ble.n	8006b54 <_dtoa_r+0xa6c>
 8006b46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b4a:	d0eb      	beq.n	8006b24 <_dtoa_r+0xa3c>
 8006b4c:	f108 0801 	add.w	r8, r8, #1
 8006b50:	9b07      	ldr	r3, [sp, #28]
 8006b52:	e7c4      	b.n	8006ade <_dtoa_r+0x9f6>
 8006b54:	9b06      	ldr	r3, [sp, #24]
 8006b56:	9a04      	ldr	r2, [sp, #16]
 8006b58:	1aeb      	subs	r3, r5, r3
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b60:	d021      	beq.n	8006ba6 <_dtoa_r+0xabe>
 8006b62:	4659      	mov	r1, fp
 8006b64:	2300      	movs	r3, #0
 8006b66:	220a      	movs	r2, #10
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f000 fc0f 	bl	800738c <__multadd>
 8006b6e:	45b9      	cmp	r9, r7
 8006b70:	4683      	mov	fp, r0
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	f04f 020a 	mov.w	r2, #10
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	d105      	bne.n	8006b8c <_dtoa_r+0xaa4>
 8006b80:	f000 fc04 	bl	800738c <__multadd>
 8006b84:	4681      	mov	r9, r0
 8006b86:	4607      	mov	r7, r0
 8006b88:	9507      	str	r5, [sp, #28]
 8006b8a:	e778      	b.n	8006a7e <_dtoa_r+0x996>
 8006b8c:	f000 fbfe 	bl	800738c <__multadd>
 8006b90:	4639      	mov	r1, r7
 8006b92:	4681      	mov	r9, r0
 8006b94:	2300      	movs	r3, #0
 8006b96:	220a      	movs	r2, #10
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fbf7 	bl	800738c <__multadd>
 8006b9e:	4607      	mov	r7, r0
 8006ba0:	e7f2      	b.n	8006b88 <_dtoa_r+0xaa0>
 8006ba2:	f04f 0900 	mov.w	r9, #0
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 fda2 	bl	80076f4 <__lshift>
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4683      	mov	fp, r0
 8006bb4:	f000 fdf2 	bl	800779c <__mcmp>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	dcb8      	bgt.n	8006b2e <_dtoa_r+0xa46>
 8006bbc:	d102      	bne.n	8006bc4 <_dtoa_r+0xadc>
 8006bbe:	f018 0f01 	tst.w	r8, #1
 8006bc2:	d1b4      	bne.n	8006b2e <_dtoa_r+0xa46>
 8006bc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bc8:	1e6a      	subs	r2, r5, #1
 8006bca:	2b30      	cmp	r3, #48	; 0x30
 8006bcc:	f47f af0f 	bne.w	80069ee <_dtoa_r+0x906>
 8006bd0:	4615      	mov	r5, r2
 8006bd2:	e7f7      	b.n	8006bc4 <_dtoa_r+0xadc>
 8006bd4:	9b06      	ldr	r3, [sp, #24]
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d105      	bne.n	8006be6 <_dtoa_r+0xafe>
 8006bda:	2331      	movs	r3, #49	; 0x31
 8006bdc:	9a06      	ldr	r2, [sp, #24]
 8006bde:	f10a 0a01 	add.w	sl, sl, #1
 8006be2:	7013      	strb	r3, [r2, #0]
 8006be4:	e703      	b.n	80069ee <_dtoa_r+0x906>
 8006be6:	4615      	mov	r5, r2
 8006be8:	e7a1      	b.n	8006b2e <_dtoa_r+0xa46>
 8006bea:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <_dtoa_r+0xb60>)
 8006bec:	f7ff bae1 	b.w	80061b2 <_dtoa_r+0xca>
 8006bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f47f aabb 	bne.w	800616e <_dtoa_r+0x86>
 8006bf8:	4b14      	ldr	r3, [pc, #80]	; (8006c4c <_dtoa_r+0xb64>)
 8006bfa:	f7ff bada 	b.w	80061b2 <_dtoa_r+0xca>
 8006bfe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	f77f ae3f 	ble.w	8006884 <_dtoa_r+0x79c>
 8006c06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c08:	9308      	str	r3, [sp, #32]
 8006c0a:	e653      	b.n	80068b4 <_dtoa_r+0x7cc>
 8006c0c:	9b04      	ldr	r3, [sp, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	dc03      	bgt.n	8006c1a <_dtoa_r+0xb32>
 8006c12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	f73f aed5 	bgt.w	80069c4 <_dtoa_r+0x8dc>
 8006c1a:	9d06      	ldr	r5, [sp, #24]
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4658      	mov	r0, fp
 8006c20:	f7ff f9d1 	bl	8005fc6 <quorem>
 8006c24:	9b06      	ldr	r3, [sp, #24]
 8006c26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c2a:	f805 8b01 	strb.w	r8, [r5], #1
 8006c2e:	9a04      	ldr	r2, [sp, #16]
 8006c30:	1aeb      	subs	r3, r5, r3
 8006c32:	429a      	cmp	r2, r3
 8006c34:	ddb5      	ble.n	8006ba2 <_dtoa_r+0xaba>
 8006c36:	4659      	mov	r1, fp
 8006c38:	2300      	movs	r3, #0
 8006c3a:	220a      	movs	r2, #10
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 fba5 	bl	800738c <__multadd>
 8006c42:	4683      	mov	fp, r0
 8006c44:	e7ea      	b.n	8006c1c <_dtoa_r+0xb34>
 8006c46:	bf00      	nop
 8006c48:	08007efe 	.word	0x08007efe
 8006c4c:	0800809e 	.word	0x0800809e

08006c50 <rshift>:
 8006c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c52:	6906      	ldr	r6, [r0, #16]
 8006c54:	114b      	asrs	r3, r1, #5
 8006c56:	429e      	cmp	r6, r3
 8006c58:	f100 0414 	add.w	r4, r0, #20
 8006c5c:	dd31      	ble.n	8006cc2 <rshift+0x72>
 8006c5e:	f011 011f 	ands.w	r1, r1, #31
 8006c62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c66:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006c6a:	d108      	bne.n	8006c7e <rshift+0x2e>
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	42b2      	cmp	r2, r6
 8006c70:	460b      	mov	r3, r1
 8006c72:	d211      	bcs.n	8006c98 <rshift+0x48>
 8006c74:	f852 3b04 	ldr.w	r3, [r2], #4
 8006c78:	f841 3b04 	str.w	r3, [r1], #4
 8006c7c:	e7f7      	b.n	8006c6e <rshift+0x1e>
 8006c7e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006c82:	4623      	mov	r3, r4
 8006c84:	f1c1 0c20 	rsb	ip, r1, #32
 8006c88:	40cd      	lsrs	r5, r1
 8006c8a:	3204      	adds	r2, #4
 8006c8c:	42b2      	cmp	r2, r6
 8006c8e:	4617      	mov	r7, r2
 8006c90:	d30d      	bcc.n	8006cae <rshift+0x5e>
 8006c92:	601d      	str	r5, [r3, #0]
 8006c94:	b105      	cbz	r5, 8006c98 <rshift+0x48>
 8006c96:	3304      	adds	r3, #4
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	eba3 0204 	sub.w	r2, r3, r4
 8006c9e:	bf08      	it	eq
 8006ca0:	2300      	moveq	r3, #0
 8006ca2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ca6:	6102      	str	r2, [r0, #16]
 8006ca8:	bf08      	it	eq
 8006caa:	6143      	streq	r3, [r0, #20]
 8006cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cae:	683f      	ldr	r7, [r7, #0]
 8006cb0:	fa07 f70c 	lsl.w	r7, r7, ip
 8006cb4:	433d      	orrs	r5, r7
 8006cb6:	f843 5b04 	str.w	r5, [r3], #4
 8006cba:	f852 5b04 	ldr.w	r5, [r2], #4
 8006cbe:	40cd      	lsrs	r5, r1
 8006cc0:	e7e4      	b.n	8006c8c <rshift+0x3c>
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	e7e8      	b.n	8006c98 <rshift+0x48>

08006cc6 <__hexdig_fun>:
 8006cc6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	d802      	bhi.n	8006cd4 <__hexdig_fun+0xe>
 8006cce:	3820      	subs	r0, #32
 8006cd0:	b2c0      	uxtb	r0, r0
 8006cd2:	4770      	bx	lr
 8006cd4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006cd8:	2b05      	cmp	r3, #5
 8006cda:	d801      	bhi.n	8006ce0 <__hexdig_fun+0x1a>
 8006cdc:	3847      	subs	r0, #71	; 0x47
 8006cde:	e7f7      	b.n	8006cd0 <__hexdig_fun+0xa>
 8006ce0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ce4:	2b05      	cmp	r3, #5
 8006ce6:	d801      	bhi.n	8006cec <__hexdig_fun+0x26>
 8006ce8:	3827      	subs	r0, #39	; 0x27
 8006cea:	e7f1      	b.n	8006cd0 <__hexdig_fun+0xa>
 8006cec:	2000      	movs	r0, #0
 8006cee:	4770      	bx	lr

08006cf0 <__gethex>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	b08b      	sub	sp, #44	; 0x2c
 8006cf6:	9002      	str	r0, [sp, #8]
 8006cf8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006cfa:	468a      	mov	sl, r1
 8006cfc:	4690      	mov	r8, r2
 8006cfe:	9306      	str	r3, [sp, #24]
 8006d00:	f000 face 	bl	80072a0 <__localeconv_l>
 8006d04:	6803      	ldr	r3, [r0, #0]
 8006d06:	f04f 0b00 	mov.w	fp, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	9303      	str	r3, [sp, #12]
 8006d0e:	f7f9 fa1f 	bl	8000150 <strlen>
 8006d12:	9b03      	ldr	r3, [sp, #12]
 8006d14:	9001      	str	r0, [sp, #4]
 8006d16:	4403      	add	r3, r0
 8006d18:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006d1c:	9307      	str	r3, [sp, #28]
 8006d1e:	f8da 3000 	ldr.w	r3, [sl]
 8006d22:	3302      	adds	r3, #2
 8006d24:	461f      	mov	r7, r3
 8006d26:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d2a:	2830      	cmp	r0, #48	; 0x30
 8006d2c:	d06c      	beq.n	8006e08 <__gethex+0x118>
 8006d2e:	f7ff ffca 	bl	8006cc6 <__hexdig_fun>
 8006d32:	4604      	mov	r4, r0
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d16a      	bne.n	8006e0e <__gethex+0x11e>
 8006d38:	9a01      	ldr	r2, [sp, #4]
 8006d3a:	9903      	ldr	r1, [sp, #12]
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f7fe f9f0 	bl	8005122 <strncmp>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d166      	bne.n	8006e14 <__gethex+0x124>
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	5cf8      	ldrb	r0, [r7, r3]
 8006d4a:	18fe      	adds	r6, r7, r3
 8006d4c:	f7ff ffbb 	bl	8006cc6 <__hexdig_fun>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d062      	beq.n	8006e1a <__gethex+0x12a>
 8006d54:	4633      	mov	r3, r6
 8006d56:	7818      	ldrb	r0, [r3, #0]
 8006d58:	461f      	mov	r7, r3
 8006d5a:	2830      	cmp	r0, #48	; 0x30
 8006d5c:	f103 0301 	add.w	r3, r3, #1
 8006d60:	d0f9      	beq.n	8006d56 <__gethex+0x66>
 8006d62:	f7ff ffb0 	bl	8006cc6 <__hexdig_fun>
 8006d66:	fab0 f580 	clz	r5, r0
 8006d6a:	4634      	mov	r4, r6
 8006d6c:	f04f 0b01 	mov.w	fp, #1
 8006d70:	096d      	lsrs	r5, r5, #5
 8006d72:	463a      	mov	r2, r7
 8006d74:	4616      	mov	r6, r2
 8006d76:	7830      	ldrb	r0, [r6, #0]
 8006d78:	3201      	adds	r2, #1
 8006d7a:	f7ff ffa4 	bl	8006cc6 <__hexdig_fun>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d1f8      	bne.n	8006d74 <__gethex+0x84>
 8006d82:	9a01      	ldr	r2, [sp, #4]
 8006d84:	9903      	ldr	r1, [sp, #12]
 8006d86:	4630      	mov	r0, r6
 8006d88:	f7fe f9cb 	bl	8005122 <strncmp>
 8006d8c:	b950      	cbnz	r0, 8006da4 <__gethex+0xb4>
 8006d8e:	b954      	cbnz	r4, 8006da6 <__gethex+0xb6>
 8006d90:	9b01      	ldr	r3, [sp, #4]
 8006d92:	18f4      	adds	r4, r6, r3
 8006d94:	4622      	mov	r2, r4
 8006d96:	4616      	mov	r6, r2
 8006d98:	7830      	ldrb	r0, [r6, #0]
 8006d9a:	3201      	adds	r2, #1
 8006d9c:	f7ff ff93 	bl	8006cc6 <__hexdig_fun>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d1f8      	bne.n	8006d96 <__gethex+0xa6>
 8006da4:	b10c      	cbz	r4, 8006daa <__gethex+0xba>
 8006da6:	1ba4      	subs	r4, r4, r6
 8006da8:	00a4      	lsls	r4, r4, #2
 8006daa:	7833      	ldrb	r3, [r6, #0]
 8006dac:	2b50      	cmp	r3, #80	; 0x50
 8006dae:	d001      	beq.n	8006db4 <__gethex+0xc4>
 8006db0:	2b70      	cmp	r3, #112	; 0x70
 8006db2:	d140      	bne.n	8006e36 <__gethex+0x146>
 8006db4:	7873      	ldrb	r3, [r6, #1]
 8006db6:	2b2b      	cmp	r3, #43	; 0x2b
 8006db8:	d031      	beq.n	8006e1e <__gethex+0x12e>
 8006dba:	2b2d      	cmp	r3, #45	; 0x2d
 8006dbc:	d033      	beq.n	8006e26 <__gethex+0x136>
 8006dbe:	f04f 0900 	mov.w	r9, #0
 8006dc2:	1c71      	adds	r1, r6, #1
 8006dc4:	7808      	ldrb	r0, [r1, #0]
 8006dc6:	f7ff ff7e 	bl	8006cc6 <__hexdig_fun>
 8006dca:	1e43      	subs	r3, r0, #1
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b18      	cmp	r3, #24
 8006dd0:	d831      	bhi.n	8006e36 <__gethex+0x146>
 8006dd2:	f1a0 0210 	sub.w	r2, r0, #16
 8006dd6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006dda:	f7ff ff74 	bl	8006cc6 <__hexdig_fun>
 8006dde:	1e43      	subs	r3, r0, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b18      	cmp	r3, #24
 8006de4:	d922      	bls.n	8006e2c <__gethex+0x13c>
 8006de6:	f1b9 0f00 	cmp.w	r9, #0
 8006dea:	d000      	beq.n	8006dee <__gethex+0xfe>
 8006dec:	4252      	negs	r2, r2
 8006dee:	4414      	add	r4, r2
 8006df0:	f8ca 1000 	str.w	r1, [sl]
 8006df4:	b30d      	cbz	r5, 8006e3a <__gethex+0x14a>
 8006df6:	f1bb 0f00 	cmp.w	fp, #0
 8006dfa:	bf0c      	ite	eq
 8006dfc:	2706      	moveq	r7, #6
 8006dfe:	2700      	movne	r7, #0
 8006e00:	4638      	mov	r0, r7
 8006e02:	b00b      	add	sp, #44	; 0x2c
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	f10b 0b01 	add.w	fp, fp, #1
 8006e0c:	e78a      	b.n	8006d24 <__gethex+0x34>
 8006e0e:	2500      	movs	r5, #0
 8006e10:	462c      	mov	r4, r5
 8006e12:	e7ae      	b.n	8006d72 <__gethex+0x82>
 8006e14:	463e      	mov	r6, r7
 8006e16:	2501      	movs	r5, #1
 8006e18:	e7c7      	b.n	8006daa <__gethex+0xba>
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	e7fb      	b.n	8006e16 <__gethex+0x126>
 8006e1e:	f04f 0900 	mov.w	r9, #0
 8006e22:	1cb1      	adds	r1, r6, #2
 8006e24:	e7ce      	b.n	8006dc4 <__gethex+0xd4>
 8006e26:	f04f 0901 	mov.w	r9, #1
 8006e2a:	e7fa      	b.n	8006e22 <__gethex+0x132>
 8006e2c:	230a      	movs	r3, #10
 8006e2e:	fb03 0202 	mla	r2, r3, r2, r0
 8006e32:	3a10      	subs	r2, #16
 8006e34:	e7cf      	b.n	8006dd6 <__gethex+0xe6>
 8006e36:	4631      	mov	r1, r6
 8006e38:	e7da      	b.n	8006df0 <__gethex+0x100>
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	1bf3      	subs	r3, r6, r7
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	2b07      	cmp	r3, #7
 8006e42:	dc49      	bgt.n	8006ed8 <__gethex+0x1e8>
 8006e44:	9802      	ldr	r0, [sp, #8]
 8006e46:	f000 fa56 	bl	80072f6 <_Balloc>
 8006e4a:	f04f 0b00 	mov.w	fp, #0
 8006e4e:	4605      	mov	r5, r0
 8006e50:	46da      	mov	sl, fp
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	f100 0914 	add.w	r9, r0, #20
 8006e58:	f1c3 0301 	rsb	r3, r3, #1
 8006e5c:	f8cd 9010 	str.w	r9, [sp, #16]
 8006e60:	9308      	str	r3, [sp, #32]
 8006e62:	42b7      	cmp	r7, r6
 8006e64:	d33b      	bcc.n	8006ede <__gethex+0x1ee>
 8006e66:	9804      	ldr	r0, [sp, #16]
 8006e68:	f840 ab04 	str.w	sl, [r0], #4
 8006e6c:	eba0 0009 	sub.w	r0, r0, r9
 8006e70:	1080      	asrs	r0, r0, #2
 8006e72:	6128      	str	r0, [r5, #16]
 8006e74:	0147      	lsls	r7, r0, #5
 8006e76:	4650      	mov	r0, sl
 8006e78:	f000 fb01 	bl	800747e <__hi0bits>
 8006e7c:	f8d8 6000 	ldr.w	r6, [r8]
 8006e80:	1a3f      	subs	r7, r7, r0
 8006e82:	42b7      	cmp	r7, r6
 8006e84:	dd64      	ble.n	8006f50 <__gethex+0x260>
 8006e86:	1bbf      	subs	r7, r7, r6
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 fe0b 	bl	8007aa6 <__any_on>
 8006e90:	4682      	mov	sl, r0
 8006e92:	b178      	cbz	r0, 8006eb4 <__gethex+0x1c4>
 8006e94:	f04f 0a01 	mov.w	sl, #1
 8006e98:	1e7b      	subs	r3, r7, #1
 8006e9a:	1159      	asrs	r1, r3, #5
 8006e9c:	f003 021f 	and.w	r2, r3, #31
 8006ea0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ea4:	fa0a f202 	lsl.w	r2, sl, r2
 8006ea8:	420a      	tst	r2, r1
 8006eaa:	d003      	beq.n	8006eb4 <__gethex+0x1c4>
 8006eac:	4553      	cmp	r3, sl
 8006eae:	dc46      	bgt.n	8006f3e <__gethex+0x24e>
 8006eb0:	f04f 0a02 	mov.w	sl, #2
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f7ff feca 	bl	8006c50 <rshift>
 8006ebc:	443c      	add	r4, r7
 8006ebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ec2:	42a3      	cmp	r3, r4
 8006ec4:	da52      	bge.n	8006f6c <__gethex+0x27c>
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	9802      	ldr	r0, [sp, #8]
 8006eca:	f000 fa48 	bl	800735e <_Bfree>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ed2:	27a3      	movs	r7, #163	; 0xa3
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	e793      	b.n	8006e00 <__gethex+0x110>
 8006ed8:	3101      	adds	r1, #1
 8006eda:	105b      	asrs	r3, r3, #1
 8006edc:	e7b0      	b.n	8006e40 <__gethex+0x150>
 8006ede:	1e73      	subs	r3, r6, #1
 8006ee0:	9305      	str	r3, [sp, #20]
 8006ee2:	9a07      	ldr	r2, [sp, #28]
 8006ee4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d018      	beq.n	8006f1e <__gethex+0x22e>
 8006eec:	f1bb 0f20 	cmp.w	fp, #32
 8006ef0:	d107      	bne.n	8006f02 <__gethex+0x212>
 8006ef2:	9b04      	ldr	r3, [sp, #16]
 8006ef4:	f8c3 a000 	str.w	sl, [r3]
 8006ef8:	f04f 0a00 	mov.w	sl, #0
 8006efc:	46d3      	mov	fp, sl
 8006efe:	3304      	adds	r3, #4
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f06:	f7ff fede 	bl	8006cc6 <__hexdig_fun>
 8006f0a:	f000 000f 	and.w	r0, r0, #15
 8006f0e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f12:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f16:	f10b 0b04 	add.w	fp, fp, #4
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	e00d      	b.n	8006f3a <__gethex+0x24a>
 8006f1e:	9b05      	ldr	r3, [sp, #20]
 8006f20:	9a08      	ldr	r2, [sp, #32]
 8006f22:	4413      	add	r3, r2
 8006f24:	42bb      	cmp	r3, r7
 8006f26:	d3e1      	bcc.n	8006eec <__gethex+0x1fc>
 8006f28:	4618      	mov	r0, r3
 8006f2a:	9a01      	ldr	r2, [sp, #4]
 8006f2c:	9903      	ldr	r1, [sp, #12]
 8006f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f30:	f7fe f8f7 	bl	8005122 <strncmp>
 8006f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d1d8      	bne.n	8006eec <__gethex+0x1fc>
 8006f3a:	461e      	mov	r6, r3
 8006f3c:	e791      	b.n	8006e62 <__gethex+0x172>
 8006f3e:	1eb9      	subs	r1, r7, #2
 8006f40:	4628      	mov	r0, r5
 8006f42:	f000 fdb0 	bl	8007aa6 <__any_on>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d0b2      	beq.n	8006eb0 <__gethex+0x1c0>
 8006f4a:	f04f 0a03 	mov.w	sl, #3
 8006f4e:	e7b1      	b.n	8006eb4 <__gethex+0x1c4>
 8006f50:	da09      	bge.n	8006f66 <__gethex+0x276>
 8006f52:	1bf7      	subs	r7, r6, r7
 8006f54:	4629      	mov	r1, r5
 8006f56:	463a      	mov	r2, r7
 8006f58:	9802      	ldr	r0, [sp, #8]
 8006f5a:	f000 fbcb 	bl	80076f4 <__lshift>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	1be4      	subs	r4, r4, r7
 8006f62:	f100 0914 	add.w	r9, r0, #20
 8006f66:	f04f 0a00 	mov.w	sl, #0
 8006f6a:	e7a8      	b.n	8006ebe <__gethex+0x1ce>
 8006f6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f70:	42a0      	cmp	r0, r4
 8006f72:	dd6b      	ble.n	800704c <__gethex+0x35c>
 8006f74:	1b04      	subs	r4, r0, r4
 8006f76:	42a6      	cmp	r6, r4
 8006f78:	dc2e      	bgt.n	8006fd8 <__gethex+0x2e8>
 8006f7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d022      	beq.n	8006fc8 <__gethex+0x2d8>
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d024      	beq.n	8006fd0 <__gethex+0x2e0>
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d115      	bne.n	8006fb6 <__gethex+0x2c6>
 8006f8a:	42a6      	cmp	r6, r4
 8006f8c:	d113      	bne.n	8006fb6 <__gethex+0x2c6>
 8006f8e:	2e01      	cmp	r6, #1
 8006f90:	dc0b      	bgt.n	8006faa <__gethex+0x2ba>
 8006f92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f96:	9a06      	ldr	r2, [sp, #24]
 8006f98:	2762      	movs	r7, #98	; 0x62
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	612b      	str	r3, [r5, #16]
 8006fa0:	f8c9 3000 	str.w	r3, [r9]
 8006fa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fa6:	601d      	str	r5, [r3, #0]
 8006fa8:	e72a      	b.n	8006e00 <__gethex+0x110>
 8006faa:	1e71      	subs	r1, r6, #1
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 fd7a 	bl	8007aa6 <__any_on>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d1ed      	bne.n	8006f92 <__gethex+0x2a2>
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	9802      	ldr	r0, [sp, #8]
 8006fba:	f000 f9d0 	bl	800735e <_Bfree>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fc2:	2750      	movs	r7, #80	; 0x50
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e71b      	b.n	8006e00 <__gethex+0x110>
 8006fc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0e1      	beq.n	8006f92 <__gethex+0x2a2>
 8006fce:	e7f2      	b.n	8006fb6 <__gethex+0x2c6>
 8006fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1dd      	bne.n	8006f92 <__gethex+0x2a2>
 8006fd6:	e7ee      	b.n	8006fb6 <__gethex+0x2c6>
 8006fd8:	1e67      	subs	r7, r4, #1
 8006fda:	f1ba 0f00 	cmp.w	sl, #0
 8006fde:	d132      	bne.n	8007046 <__gethex+0x356>
 8006fe0:	b127      	cbz	r7, 8006fec <__gethex+0x2fc>
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f000 fd5e 	bl	8007aa6 <__any_on>
 8006fea:	4682      	mov	sl, r0
 8006fec:	2301      	movs	r3, #1
 8006fee:	117a      	asrs	r2, r7, #5
 8006ff0:	f007 071f 	and.w	r7, r7, #31
 8006ff4:	fa03 f707 	lsl.w	r7, r3, r7
 8006ff8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	421f      	tst	r7, r3
 8007000:	f04f 0702 	mov.w	r7, #2
 8007004:	4628      	mov	r0, r5
 8007006:	bf18      	it	ne
 8007008:	f04a 0a02 	orrne.w	sl, sl, #2
 800700c:	1b36      	subs	r6, r6, r4
 800700e:	f7ff fe1f 	bl	8006c50 <rshift>
 8007012:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007016:	f1ba 0f00 	cmp.w	sl, #0
 800701a:	d048      	beq.n	80070ae <__gethex+0x3be>
 800701c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007020:	2b02      	cmp	r3, #2
 8007022:	d015      	beq.n	8007050 <__gethex+0x360>
 8007024:	2b03      	cmp	r3, #3
 8007026:	d017      	beq.n	8007058 <__gethex+0x368>
 8007028:	2b01      	cmp	r3, #1
 800702a:	d109      	bne.n	8007040 <__gethex+0x350>
 800702c:	f01a 0f02 	tst.w	sl, #2
 8007030:	d006      	beq.n	8007040 <__gethex+0x350>
 8007032:	f8d9 3000 	ldr.w	r3, [r9]
 8007036:	ea4a 0a03 	orr.w	sl, sl, r3
 800703a:	f01a 0f01 	tst.w	sl, #1
 800703e:	d10e      	bne.n	800705e <__gethex+0x36e>
 8007040:	f047 0710 	orr.w	r7, r7, #16
 8007044:	e033      	b.n	80070ae <__gethex+0x3be>
 8007046:	f04f 0a01 	mov.w	sl, #1
 800704a:	e7cf      	b.n	8006fec <__gethex+0x2fc>
 800704c:	2701      	movs	r7, #1
 800704e:	e7e2      	b.n	8007016 <__gethex+0x326>
 8007050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007052:	f1c3 0301 	rsb	r3, r3, #1
 8007056:	9315      	str	r3, [sp, #84]	; 0x54
 8007058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f0      	beq.n	8007040 <__gethex+0x350>
 800705e:	f04f 0c00 	mov.w	ip, #0
 8007062:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007066:	f105 0314 	add.w	r3, r5, #20
 800706a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800706e:	eb03 010a 	add.w	r1, r3, sl
 8007072:	4618      	mov	r0, r3
 8007074:	f853 2b04 	ldr.w	r2, [r3], #4
 8007078:	f1b2 3fff 	cmp.w	r2, #4294967295
 800707c:	d01c      	beq.n	80070b8 <__gethex+0x3c8>
 800707e:	3201      	adds	r2, #1
 8007080:	6002      	str	r2, [r0, #0]
 8007082:	2f02      	cmp	r7, #2
 8007084:	f105 0314 	add.w	r3, r5, #20
 8007088:	d138      	bne.n	80070fc <__gethex+0x40c>
 800708a:	f8d8 2000 	ldr.w	r2, [r8]
 800708e:	3a01      	subs	r2, #1
 8007090:	42b2      	cmp	r2, r6
 8007092:	d10a      	bne.n	80070aa <__gethex+0x3ba>
 8007094:	2201      	movs	r2, #1
 8007096:	1171      	asrs	r1, r6, #5
 8007098:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800709c:	f006 061f 	and.w	r6, r6, #31
 80070a0:	fa02 f606 	lsl.w	r6, r2, r6
 80070a4:	421e      	tst	r6, r3
 80070a6:	bf18      	it	ne
 80070a8:	4617      	movne	r7, r2
 80070aa:	f047 0720 	orr.w	r7, r7, #32
 80070ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070b0:	601d      	str	r5, [r3, #0]
 80070b2:	9b06      	ldr	r3, [sp, #24]
 80070b4:	601c      	str	r4, [r3, #0]
 80070b6:	e6a3      	b.n	8006e00 <__gethex+0x110>
 80070b8:	4299      	cmp	r1, r3
 80070ba:	f843 cc04 	str.w	ip, [r3, #-4]
 80070be:	d8d8      	bhi.n	8007072 <__gethex+0x382>
 80070c0:	68ab      	ldr	r3, [r5, #8]
 80070c2:	4599      	cmp	r9, r3
 80070c4:	db12      	blt.n	80070ec <__gethex+0x3fc>
 80070c6:	6869      	ldr	r1, [r5, #4]
 80070c8:	9802      	ldr	r0, [sp, #8]
 80070ca:	3101      	adds	r1, #1
 80070cc:	f000 f913 	bl	80072f6 <_Balloc>
 80070d0:	4683      	mov	fp, r0
 80070d2:	692a      	ldr	r2, [r5, #16]
 80070d4:	f105 010c 	add.w	r1, r5, #12
 80070d8:	3202      	adds	r2, #2
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	300c      	adds	r0, #12
 80070de:	f000 f8fd 	bl	80072dc <memcpy>
 80070e2:	4629      	mov	r1, r5
 80070e4:	9802      	ldr	r0, [sp, #8]
 80070e6:	f000 f93a 	bl	800735e <_Bfree>
 80070ea:	465d      	mov	r5, fp
 80070ec:	692b      	ldr	r3, [r5, #16]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	612a      	str	r2, [r5, #16]
 80070f2:	2201      	movs	r2, #1
 80070f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80070f8:	615a      	str	r2, [r3, #20]
 80070fa:	e7c2      	b.n	8007082 <__gethex+0x392>
 80070fc:	692a      	ldr	r2, [r5, #16]
 80070fe:	454a      	cmp	r2, r9
 8007100:	dd0b      	ble.n	800711a <__gethex+0x42a>
 8007102:	2101      	movs	r1, #1
 8007104:	4628      	mov	r0, r5
 8007106:	f7ff fda3 	bl	8006c50 <rshift>
 800710a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800710e:	3401      	adds	r4, #1
 8007110:	42a3      	cmp	r3, r4
 8007112:	f6ff aed8 	blt.w	8006ec6 <__gethex+0x1d6>
 8007116:	2701      	movs	r7, #1
 8007118:	e7c7      	b.n	80070aa <__gethex+0x3ba>
 800711a:	f016 061f 	ands.w	r6, r6, #31
 800711e:	d0fa      	beq.n	8007116 <__gethex+0x426>
 8007120:	449a      	add	sl, r3
 8007122:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007126:	f000 f9aa 	bl	800747e <__hi0bits>
 800712a:	f1c6 0620 	rsb	r6, r6, #32
 800712e:	42b0      	cmp	r0, r6
 8007130:	dbe7      	blt.n	8007102 <__gethex+0x412>
 8007132:	e7f0      	b.n	8007116 <__gethex+0x426>

08007134 <L_shift>:
 8007134:	f1c2 0208 	rsb	r2, r2, #8
 8007138:	0092      	lsls	r2, r2, #2
 800713a:	b570      	push	{r4, r5, r6, lr}
 800713c:	f1c2 0620 	rsb	r6, r2, #32
 8007140:	6843      	ldr	r3, [r0, #4]
 8007142:	6804      	ldr	r4, [r0, #0]
 8007144:	fa03 f506 	lsl.w	r5, r3, r6
 8007148:	432c      	orrs	r4, r5
 800714a:	40d3      	lsrs	r3, r2
 800714c:	6004      	str	r4, [r0, #0]
 800714e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007152:	4288      	cmp	r0, r1
 8007154:	d3f4      	bcc.n	8007140 <L_shift+0xc>
 8007156:	bd70      	pop	{r4, r5, r6, pc}

08007158 <__match>:
 8007158:	b530      	push	{r4, r5, lr}
 800715a:	6803      	ldr	r3, [r0, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007162:	b914      	cbnz	r4, 800716a <__match+0x12>
 8007164:	6003      	str	r3, [r0, #0]
 8007166:	2001      	movs	r0, #1
 8007168:	bd30      	pop	{r4, r5, pc}
 800716a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800716e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007172:	2d19      	cmp	r5, #25
 8007174:	bf98      	it	ls
 8007176:	3220      	addls	r2, #32
 8007178:	42a2      	cmp	r2, r4
 800717a:	d0f0      	beq.n	800715e <__match+0x6>
 800717c:	2000      	movs	r0, #0
 800717e:	e7f3      	b.n	8007168 <__match+0x10>

08007180 <__hexnan>:
 8007180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007184:	2500      	movs	r5, #0
 8007186:	680b      	ldr	r3, [r1, #0]
 8007188:	4682      	mov	sl, r0
 800718a:	115f      	asrs	r7, r3, #5
 800718c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007190:	f013 031f 	ands.w	r3, r3, #31
 8007194:	bf18      	it	ne
 8007196:	3704      	addne	r7, #4
 8007198:	1f3e      	subs	r6, r7, #4
 800719a:	4690      	mov	r8, r2
 800719c:	46b1      	mov	r9, r6
 800719e:	4634      	mov	r4, r6
 80071a0:	46ab      	mov	fp, r5
 80071a2:	b087      	sub	sp, #28
 80071a4:	6801      	ldr	r1, [r0, #0]
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	f847 5c04 	str.w	r5, [r7, #-4]
 80071ac:	9502      	str	r5, [sp, #8]
 80071ae:	784a      	ldrb	r2, [r1, #1]
 80071b0:	1c4b      	adds	r3, r1, #1
 80071b2:	9303      	str	r3, [sp, #12]
 80071b4:	b342      	cbz	r2, 8007208 <__hexnan+0x88>
 80071b6:	4610      	mov	r0, r2
 80071b8:	9105      	str	r1, [sp, #20]
 80071ba:	9204      	str	r2, [sp, #16]
 80071bc:	f7ff fd83 	bl	8006cc6 <__hexdig_fun>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d143      	bne.n	800724c <__hexnan+0xcc>
 80071c4:	9a04      	ldr	r2, [sp, #16]
 80071c6:	9905      	ldr	r1, [sp, #20]
 80071c8:	2a20      	cmp	r2, #32
 80071ca:	d818      	bhi.n	80071fe <__hexnan+0x7e>
 80071cc:	9b02      	ldr	r3, [sp, #8]
 80071ce:	459b      	cmp	fp, r3
 80071d0:	dd13      	ble.n	80071fa <__hexnan+0x7a>
 80071d2:	454c      	cmp	r4, r9
 80071d4:	d206      	bcs.n	80071e4 <__hexnan+0x64>
 80071d6:	2d07      	cmp	r5, #7
 80071d8:	dc04      	bgt.n	80071e4 <__hexnan+0x64>
 80071da:	462a      	mov	r2, r5
 80071dc:	4649      	mov	r1, r9
 80071de:	4620      	mov	r0, r4
 80071e0:	f7ff ffa8 	bl	8007134 <L_shift>
 80071e4:	4544      	cmp	r4, r8
 80071e6:	d944      	bls.n	8007272 <__hexnan+0xf2>
 80071e8:	2300      	movs	r3, #0
 80071ea:	f1a4 0904 	sub.w	r9, r4, #4
 80071ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80071f2:	461d      	mov	r5, r3
 80071f4:	464c      	mov	r4, r9
 80071f6:	f8cd b008 	str.w	fp, [sp, #8]
 80071fa:	9903      	ldr	r1, [sp, #12]
 80071fc:	e7d7      	b.n	80071ae <__hexnan+0x2e>
 80071fe:	2a29      	cmp	r2, #41	; 0x29
 8007200:	d14a      	bne.n	8007298 <__hexnan+0x118>
 8007202:	3102      	adds	r1, #2
 8007204:	f8ca 1000 	str.w	r1, [sl]
 8007208:	f1bb 0f00 	cmp.w	fp, #0
 800720c:	d044      	beq.n	8007298 <__hexnan+0x118>
 800720e:	454c      	cmp	r4, r9
 8007210:	d206      	bcs.n	8007220 <__hexnan+0xa0>
 8007212:	2d07      	cmp	r5, #7
 8007214:	dc04      	bgt.n	8007220 <__hexnan+0xa0>
 8007216:	462a      	mov	r2, r5
 8007218:	4649      	mov	r1, r9
 800721a:	4620      	mov	r0, r4
 800721c:	f7ff ff8a 	bl	8007134 <L_shift>
 8007220:	4544      	cmp	r4, r8
 8007222:	d928      	bls.n	8007276 <__hexnan+0xf6>
 8007224:	4643      	mov	r3, r8
 8007226:	f854 2b04 	ldr.w	r2, [r4], #4
 800722a:	42a6      	cmp	r6, r4
 800722c:	f843 2b04 	str.w	r2, [r3], #4
 8007230:	d2f9      	bcs.n	8007226 <__hexnan+0xa6>
 8007232:	2200      	movs	r2, #0
 8007234:	f843 2b04 	str.w	r2, [r3], #4
 8007238:	429e      	cmp	r6, r3
 800723a:	d2fb      	bcs.n	8007234 <__hexnan+0xb4>
 800723c:	6833      	ldr	r3, [r6, #0]
 800723e:	b91b      	cbnz	r3, 8007248 <__hexnan+0xc8>
 8007240:	4546      	cmp	r6, r8
 8007242:	d127      	bne.n	8007294 <__hexnan+0x114>
 8007244:	2301      	movs	r3, #1
 8007246:	6033      	str	r3, [r6, #0]
 8007248:	2005      	movs	r0, #5
 800724a:	e026      	b.n	800729a <__hexnan+0x11a>
 800724c:	3501      	adds	r5, #1
 800724e:	2d08      	cmp	r5, #8
 8007250:	f10b 0b01 	add.w	fp, fp, #1
 8007254:	dd06      	ble.n	8007264 <__hexnan+0xe4>
 8007256:	4544      	cmp	r4, r8
 8007258:	d9cf      	bls.n	80071fa <__hexnan+0x7a>
 800725a:	2300      	movs	r3, #0
 800725c:	2501      	movs	r5, #1
 800725e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007262:	3c04      	subs	r4, #4
 8007264:	6822      	ldr	r2, [r4, #0]
 8007266:	f000 000f 	and.w	r0, r0, #15
 800726a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800726e:	6020      	str	r0, [r4, #0]
 8007270:	e7c3      	b.n	80071fa <__hexnan+0x7a>
 8007272:	2508      	movs	r5, #8
 8007274:	e7c1      	b.n	80071fa <__hexnan+0x7a>
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0df      	beq.n	800723c <__hexnan+0xbc>
 800727c:	f04f 32ff 	mov.w	r2, #4294967295
 8007280:	f1c3 0320 	rsb	r3, r3, #32
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
 8007288:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800728c:	401a      	ands	r2, r3
 800728e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007292:	e7d3      	b.n	800723c <__hexnan+0xbc>
 8007294:	3e04      	subs	r6, #4
 8007296:	e7d1      	b.n	800723c <__hexnan+0xbc>
 8007298:	2004      	movs	r0, #4
 800729a:	b007      	add	sp, #28
 800729c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072a0 <__localeconv_l>:
 80072a0:	30f0      	adds	r0, #240	; 0xf0
 80072a2:	4770      	bx	lr

080072a4 <_localeconv_r>:
 80072a4:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <_localeconv_r+0x14>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a18      	ldr	r0, [r3, #32]
 80072aa:	4b04      	ldr	r3, [pc, #16]	; (80072bc <_localeconv_r+0x18>)
 80072ac:	2800      	cmp	r0, #0
 80072ae:	bf08      	it	eq
 80072b0:	4618      	moveq	r0, r3
 80072b2:	30f0      	adds	r0, #240	; 0xf0
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	2000000c 	.word	0x2000000c
 80072bc:	20000070 	.word	0x20000070

080072c0 <memchr>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	b2c9      	uxtb	r1, r1
 80072c4:	4402      	add	r2, r0
 80072c6:	4290      	cmp	r0, r2
 80072c8:	4603      	mov	r3, r0
 80072ca:	d101      	bne.n	80072d0 <memchr+0x10>
 80072cc:	2300      	movs	r3, #0
 80072ce:	e003      	b.n	80072d8 <memchr+0x18>
 80072d0:	781c      	ldrb	r4, [r3, #0]
 80072d2:	3001      	adds	r0, #1
 80072d4:	428c      	cmp	r4, r1
 80072d6:	d1f6      	bne.n	80072c6 <memchr+0x6>
 80072d8:	4618      	mov	r0, r3
 80072da:	bd10      	pop	{r4, pc}

080072dc <memcpy>:
 80072dc:	b510      	push	{r4, lr}
 80072de:	1e43      	subs	r3, r0, #1
 80072e0:	440a      	add	r2, r1
 80072e2:	4291      	cmp	r1, r2
 80072e4:	d100      	bne.n	80072e8 <memcpy+0xc>
 80072e6:	bd10      	pop	{r4, pc}
 80072e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f0:	e7f7      	b.n	80072e2 <memcpy+0x6>

080072f2 <__malloc_lock>:
 80072f2:	4770      	bx	lr

080072f4 <__malloc_unlock>:
 80072f4:	4770      	bx	lr

080072f6 <_Balloc>:
 80072f6:	b570      	push	{r4, r5, r6, lr}
 80072f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072fa:	4604      	mov	r4, r0
 80072fc:	460e      	mov	r6, r1
 80072fe:	b93d      	cbnz	r5, 8007310 <_Balloc+0x1a>
 8007300:	2010      	movs	r0, #16
 8007302:	f7fd f9b1 	bl	8004668 <malloc>
 8007306:	6260      	str	r0, [r4, #36]	; 0x24
 8007308:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800730c:	6005      	str	r5, [r0, #0]
 800730e:	60c5      	str	r5, [r0, #12]
 8007310:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007312:	68eb      	ldr	r3, [r5, #12]
 8007314:	b183      	cbz	r3, 8007338 <_Balloc+0x42>
 8007316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800731e:	b9b8      	cbnz	r0, 8007350 <_Balloc+0x5a>
 8007320:	2101      	movs	r1, #1
 8007322:	fa01 f506 	lsl.w	r5, r1, r6
 8007326:	1d6a      	adds	r2, r5, #5
 8007328:	0092      	lsls	r2, r2, #2
 800732a:	4620      	mov	r0, r4
 800732c:	f000 fbdc 	bl	8007ae8 <_calloc_r>
 8007330:	b160      	cbz	r0, 800734c <_Balloc+0x56>
 8007332:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007336:	e00e      	b.n	8007356 <_Balloc+0x60>
 8007338:	2221      	movs	r2, #33	; 0x21
 800733a:	2104      	movs	r1, #4
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fbd3 	bl	8007ae8 <_calloc_r>
 8007342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007344:	60e8      	str	r0, [r5, #12]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e4      	bne.n	8007316 <_Balloc+0x20>
 800734c:	2000      	movs	r0, #0
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	6802      	ldr	r2, [r0, #0]
 8007352:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007356:	2300      	movs	r3, #0
 8007358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800735c:	e7f7      	b.n	800734e <_Balloc+0x58>

0800735e <_Bfree>:
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007362:	4606      	mov	r6, r0
 8007364:	460d      	mov	r5, r1
 8007366:	b93c      	cbnz	r4, 8007378 <_Bfree+0x1a>
 8007368:	2010      	movs	r0, #16
 800736a:	f7fd f97d 	bl	8004668 <malloc>
 800736e:	6270      	str	r0, [r6, #36]	; 0x24
 8007370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007374:	6004      	str	r4, [r0, #0]
 8007376:	60c4      	str	r4, [r0, #12]
 8007378:	b13d      	cbz	r5, 800738a <_Bfree+0x2c>
 800737a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800737c:	686a      	ldr	r2, [r5, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007384:	6029      	str	r1, [r5, #0]
 8007386:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800738a:	bd70      	pop	{r4, r5, r6, pc}

0800738c <__multadd>:
 800738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007390:	461f      	mov	r7, r3
 8007392:	4606      	mov	r6, r0
 8007394:	460c      	mov	r4, r1
 8007396:	2300      	movs	r3, #0
 8007398:	690d      	ldr	r5, [r1, #16]
 800739a:	f101 0c14 	add.w	ip, r1, #20
 800739e:	f8dc 0000 	ldr.w	r0, [ip]
 80073a2:	3301      	adds	r3, #1
 80073a4:	b281      	uxth	r1, r0
 80073a6:	fb02 7101 	mla	r1, r2, r1, r7
 80073aa:	0c00      	lsrs	r0, r0, #16
 80073ac:	0c0f      	lsrs	r7, r1, #16
 80073ae:	fb02 7000 	mla	r0, r2, r0, r7
 80073b2:	b289      	uxth	r1, r1
 80073b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80073b8:	429d      	cmp	r5, r3
 80073ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80073be:	f84c 1b04 	str.w	r1, [ip], #4
 80073c2:	dcec      	bgt.n	800739e <__multadd+0x12>
 80073c4:	b1d7      	cbz	r7, 80073fc <__multadd+0x70>
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	42ab      	cmp	r3, r5
 80073ca:	dc12      	bgt.n	80073f2 <__multadd+0x66>
 80073cc:	6861      	ldr	r1, [r4, #4]
 80073ce:	4630      	mov	r0, r6
 80073d0:	3101      	adds	r1, #1
 80073d2:	f7ff ff90 	bl	80072f6 <_Balloc>
 80073d6:	4680      	mov	r8, r0
 80073d8:	6922      	ldr	r2, [r4, #16]
 80073da:	f104 010c 	add.w	r1, r4, #12
 80073de:	3202      	adds	r2, #2
 80073e0:	0092      	lsls	r2, r2, #2
 80073e2:	300c      	adds	r0, #12
 80073e4:	f7ff ff7a 	bl	80072dc <memcpy>
 80073e8:	4621      	mov	r1, r4
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7ff ffb7 	bl	800735e <_Bfree>
 80073f0:	4644      	mov	r4, r8
 80073f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073f6:	3501      	adds	r5, #1
 80073f8:	615f      	str	r7, [r3, #20]
 80073fa:	6125      	str	r5, [r4, #16]
 80073fc:	4620      	mov	r0, r4
 80073fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007402 <__s2b>:
 8007402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007406:	4615      	mov	r5, r2
 8007408:	2209      	movs	r2, #9
 800740a:	461f      	mov	r7, r3
 800740c:	3308      	adds	r3, #8
 800740e:	460c      	mov	r4, r1
 8007410:	fb93 f3f2 	sdiv	r3, r3, r2
 8007414:	4606      	mov	r6, r0
 8007416:	2201      	movs	r2, #1
 8007418:	2100      	movs	r1, #0
 800741a:	429a      	cmp	r2, r3
 800741c:	db20      	blt.n	8007460 <__s2b+0x5e>
 800741e:	4630      	mov	r0, r6
 8007420:	f7ff ff69 	bl	80072f6 <_Balloc>
 8007424:	9b08      	ldr	r3, [sp, #32]
 8007426:	2d09      	cmp	r5, #9
 8007428:	6143      	str	r3, [r0, #20]
 800742a:	f04f 0301 	mov.w	r3, #1
 800742e:	6103      	str	r3, [r0, #16]
 8007430:	dd19      	ble.n	8007466 <__s2b+0x64>
 8007432:	f104 0809 	add.w	r8, r4, #9
 8007436:	46c1      	mov	r9, r8
 8007438:	442c      	add	r4, r5
 800743a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800743e:	4601      	mov	r1, r0
 8007440:	3b30      	subs	r3, #48	; 0x30
 8007442:	220a      	movs	r2, #10
 8007444:	4630      	mov	r0, r6
 8007446:	f7ff ffa1 	bl	800738c <__multadd>
 800744a:	45a1      	cmp	r9, r4
 800744c:	d1f5      	bne.n	800743a <__s2b+0x38>
 800744e:	eb08 0405 	add.w	r4, r8, r5
 8007452:	3c08      	subs	r4, #8
 8007454:	1b2d      	subs	r5, r5, r4
 8007456:	1963      	adds	r3, r4, r5
 8007458:	42bb      	cmp	r3, r7
 800745a:	db07      	blt.n	800746c <__s2b+0x6a>
 800745c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007460:	0052      	lsls	r2, r2, #1
 8007462:	3101      	adds	r1, #1
 8007464:	e7d9      	b.n	800741a <__s2b+0x18>
 8007466:	340a      	adds	r4, #10
 8007468:	2509      	movs	r5, #9
 800746a:	e7f3      	b.n	8007454 <__s2b+0x52>
 800746c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007470:	4601      	mov	r1, r0
 8007472:	3b30      	subs	r3, #48	; 0x30
 8007474:	220a      	movs	r2, #10
 8007476:	4630      	mov	r0, r6
 8007478:	f7ff ff88 	bl	800738c <__multadd>
 800747c:	e7eb      	b.n	8007456 <__s2b+0x54>

0800747e <__hi0bits>:
 800747e:	0c02      	lsrs	r2, r0, #16
 8007480:	0412      	lsls	r2, r2, #16
 8007482:	4603      	mov	r3, r0
 8007484:	b9b2      	cbnz	r2, 80074b4 <__hi0bits+0x36>
 8007486:	0403      	lsls	r3, r0, #16
 8007488:	2010      	movs	r0, #16
 800748a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800748e:	bf04      	itt	eq
 8007490:	021b      	lsleq	r3, r3, #8
 8007492:	3008      	addeq	r0, #8
 8007494:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007498:	bf04      	itt	eq
 800749a:	011b      	lsleq	r3, r3, #4
 800749c:	3004      	addeq	r0, #4
 800749e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80074a2:	bf04      	itt	eq
 80074a4:	009b      	lsleq	r3, r3, #2
 80074a6:	3002      	addeq	r0, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	db06      	blt.n	80074ba <__hi0bits+0x3c>
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	d503      	bpl.n	80074b8 <__hi0bits+0x3a>
 80074b0:	3001      	adds	r0, #1
 80074b2:	4770      	bx	lr
 80074b4:	2000      	movs	r0, #0
 80074b6:	e7e8      	b.n	800748a <__hi0bits+0xc>
 80074b8:	2020      	movs	r0, #32
 80074ba:	4770      	bx	lr

080074bc <__lo0bits>:
 80074bc:	6803      	ldr	r3, [r0, #0]
 80074be:	4601      	mov	r1, r0
 80074c0:	f013 0207 	ands.w	r2, r3, #7
 80074c4:	d00b      	beq.n	80074de <__lo0bits+0x22>
 80074c6:	07da      	lsls	r2, r3, #31
 80074c8:	d423      	bmi.n	8007512 <__lo0bits+0x56>
 80074ca:	0798      	lsls	r0, r3, #30
 80074cc:	bf49      	itett	mi
 80074ce:	085b      	lsrmi	r3, r3, #1
 80074d0:	089b      	lsrpl	r3, r3, #2
 80074d2:	2001      	movmi	r0, #1
 80074d4:	600b      	strmi	r3, [r1, #0]
 80074d6:	bf5c      	itt	pl
 80074d8:	600b      	strpl	r3, [r1, #0]
 80074da:	2002      	movpl	r0, #2
 80074dc:	4770      	bx	lr
 80074de:	b298      	uxth	r0, r3
 80074e0:	b9a8      	cbnz	r0, 800750e <__lo0bits+0x52>
 80074e2:	2010      	movs	r0, #16
 80074e4:	0c1b      	lsrs	r3, r3, #16
 80074e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074ea:	bf04      	itt	eq
 80074ec:	0a1b      	lsreq	r3, r3, #8
 80074ee:	3008      	addeq	r0, #8
 80074f0:	071a      	lsls	r2, r3, #28
 80074f2:	bf04      	itt	eq
 80074f4:	091b      	lsreq	r3, r3, #4
 80074f6:	3004      	addeq	r0, #4
 80074f8:	079a      	lsls	r2, r3, #30
 80074fa:	bf04      	itt	eq
 80074fc:	089b      	lsreq	r3, r3, #2
 80074fe:	3002      	addeq	r0, #2
 8007500:	07da      	lsls	r2, r3, #31
 8007502:	d402      	bmi.n	800750a <__lo0bits+0x4e>
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	d006      	beq.n	8007516 <__lo0bits+0x5a>
 8007508:	3001      	adds	r0, #1
 800750a:	600b      	str	r3, [r1, #0]
 800750c:	4770      	bx	lr
 800750e:	4610      	mov	r0, r2
 8007510:	e7e9      	b.n	80074e6 <__lo0bits+0x2a>
 8007512:	2000      	movs	r0, #0
 8007514:	4770      	bx	lr
 8007516:	2020      	movs	r0, #32
 8007518:	4770      	bx	lr

0800751a <__i2b>:
 800751a:	b510      	push	{r4, lr}
 800751c:	460c      	mov	r4, r1
 800751e:	2101      	movs	r1, #1
 8007520:	f7ff fee9 	bl	80072f6 <_Balloc>
 8007524:	2201      	movs	r2, #1
 8007526:	6144      	str	r4, [r0, #20]
 8007528:	6102      	str	r2, [r0, #16]
 800752a:	bd10      	pop	{r4, pc}

0800752c <__multiply>:
 800752c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	4614      	mov	r4, r2
 8007532:	690a      	ldr	r2, [r1, #16]
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	4688      	mov	r8, r1
 8007538:	429a      	cmp	r2, r3
 800753a:	bfbe      	ittt	lt
 800753c:	460b      	movlt	r3, r1
 800753e:	46a0      	movlt	r8, r4
 8007540:	461c      	movlt	r4, r3
 8007542:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007546:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800754a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800754e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007552:	eb07 0609 	add.w	r6, r7, r9
 8007556:	42b3      	cmp	r3, r6
 8007558:	bfb8      	it	lt
 800755a:	3101      	addlt	r1, #1
 800755c:	f7ff fecb 	bl	80072f6 <_Balloc>
 8007560:	f100 0514 	add.w	r5, r0, #20
 8007564:	462b      	mov	r3, r5
 8007566:	2200      	movs	r2, #0
 8007568:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800756c:	4573      	cmp	r3, lr
 800756e:	d316      	bcc.n	800759e <__multiply+0x72>
 8007570:	f104 0214 	add.w	r2, r4, #20
 8007574:	f108 0114 	add.w	r1, r8, #20
 8007578:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800757c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	9b00      	ldr	r3, [sp, #0]
 8007584:	9201      	str	r2, [sp, #4]
 8007586:	4293      	cmp	r3, r2
 8007588:	d80c      	bhi.n	80075a4 <__multiply+0x78>
 800758a:	2e00      	cmp	r6, #0
 800758c:	dd03      	ble.n	8007596 <__multiply+0x6a>
 800758e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007592:	2b00      	cmp	r3, #0
 8007594:	d05d      	beq.n	8007652 <__multiply+0x126>
 8007596:	6106      	str	r6, [r0, #16]
 8007598:	b003      	add	sp, #12
 800759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759e:	f843 2b04 	str.w	r2, [r3], #4
 80075a2:	e7e3      	b.n	800756c <__multiply+0x40>
 80075a4:	f8b2 b000 	ldrh.w	fp, [r2]
 80075a8:	f1bb 0f00 	cmp.w	fp, #0
 80075ac:	d023      	beq.n	80075f6 <__multiply+0xca>
 80075ae:	4689      	mov	r9, r1
 80075b0:	46ac      	mov	ip, r5
 80075b2:	f04f 0800 	mov.w	r8, #0
 80075b6:	f859 4b04 	ldr.w	r4, [r9], #4
 80075ba:	f8dc a000 	ldr.w	sl, [ip]
 80075be:	b2a3      	uxth	r3, r4
 80075c0:	fa1f fa8a 	uxth.w	sl, sl
 80075c4:	fb0b a303 	mla	r3, fp, r3, sl
 80075c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80075cc:	f8dc 4000 	ldr.w	r4, [ip]
 80075d0:	4443      	add	r3, r8
 80075d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80075d6:	fb0b 840a 	mla	r4, fp, sl, r8
 80075da:	46e2      	mov	sl, ip
 80075dc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80075e6:	454f      	cmp	r7, r9
 80075e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80075ec:	f84a 3b04 	str.w	r3, [sl], #4
 80075f0:	d82b      	bhi.n	800764a <__multiply+0x11e>
 80075f2:	f8cc 8004 	str.w	r8, [ip, #4]
 80075f6:	9b01      	ldr	r3, [sp, #4]
 80075f8:	3204      	adds	r2, #4
 80075fa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80075fe:	f1ba 0f00 	cmp.w	sl, #0
 8007602:	d020      	beq.n	8007646 <__multiply+0x11a>
 8007604:	4689      	mov	r9, r1
 8007606:	46a8      	mov	r8, r5
 8007608:	f04f 0b00 	mov.w	fp, #0
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	f8b9 c000 	ldrh.w	ip, [r9]
 8007612:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007616:	b29b      	uxth	r3, r3
 8007618:	fb0a 440c 	mla	r4, sl, ip, r4
 800761c:	46c4      	mov	ip, r8
 800761e:	445c      	add	r4, fp
 8007620:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007624:	f84c 3b04 	str.w	r3, [ip], #4
 8007628:	f859 3b04 	ldr.w	r3, [r9], #4
 800762c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007630:	0c1b      	lsrs	r3, r3, #16
 8007632:	fb0a b303 	mla	r3, sl, r3, fp
 8007636:	454f      	cmp	r7, r9
 8007638:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800763c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007640:	d805      	bhi.n	800764e <__multiply+0x122>
 8007642:	f8c8 3004 	str.w	r3, [r8, #4]
 8007646:	3504      	adds	r5, #4
 8007648:	e79b      	b.n	8007582 <__multiply+0x56>
 800764a:	46d4      	mov	ip, sl
 800764c:	e7b3      	b.n	80075b6 <__multiply+0x8a>
 800764e:	46e0      	mov	r8, ip
 8007650:	e7dd      	b.n	800760e <__multiply+0xe2>
 8007652:	3e01      	subs	r6, #1
 8007654:	e799      	b.n	800758a <__multiply+0x5e>
	...

08007658 <__pow5mult>:
 8007658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800765c:	4615      	mov	r5, r2
 800765e:	f012 0203 	ands.w	r2, r2, #3
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	d007      	beq.n	8007678 <__pow5mult+0x20>
 8007668:	4c21      	ldr	r4, [pc, #132]	; (80076f0 <__pow5mult+0x98>)
 800766a:	3a01      	subs	r2, #1
 800766c:	2300      	movs	r3, #0
 800766e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007672:	f7ff fe8b 	bl	800738c <__multadd>
 8007676:	4607      	mov	r7, r0
 8007678:	10ad      	asrs	r5, r5, #2
 800767a:	d035      	beq.n	80076e8 <__pow5mult+0x90>
 800767c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800767e:	b93c      	cbnz	r4, 8007690 <__pow5mult+0x38>
 8007680:	2010      	movs	r0, #16
 8007682:	f7fc fff1 	bl	8004668 <malloc>
 8007686:	6270      	str	r0, [r6, #36]	; 0x24
 8007688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800768c:	6004      	str	r4, [r0, #0]
 800768e:	60c4      	str	r4, [r0, #12]
 8007690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007698:	b94c      	cbnz	r4, 80076ae <__pow5mult+0x56>
 800769a:	f240 2171 	movw	r1, #625	; 0x271
 800769e:	4630      	mov	r0, r6
 80076a0:	f7ff ff3b 	bl	800751a <__i2b>
 80076a4:	2300      	movs	r3, #0
 80076a6:	4604      	mov	r4, r0
 80076a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80076ac:	6003      	str	r3, [r0, #0]
 80076ae:	f04f 0800 	mov.w	r8, #0
 80076b2:	07eb      	lsls	r3, r5, #31
 80076b4:	d50a      	bpl.n	80076cc <__pow5mult+0x74>
 80076b6:	4639      	mov	r1, r7
 80076b8:	4622      	mov	r2, r4
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7ff ff36 	bl	800752c <__multiply>
 80076c0:	4681      	mov	r9, r0
 80076c2:	4639      	mov	r1, r7
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7ff fe4a 	bl	800735e <_Bfree>
 80076ca:	464f      	mov	r7, r9
 80076cc:	106d      	asrs	r5, r5, #1
 80076ce:	d00b      	beq.n	80076e8 <__pow5mult+0x90>
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	b938      	cbnz	r0, 80076e4 <__pow5mult+0x8c>
 80076d4:	4622      	mov	r2, r4
 80076d6:	4621      	mov	r1, r4
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff ff27 	bl	800752c <__multiply>
 80076de:	6020      	str	r0, [r4, #0]
 80076e0:	f8c0 8000 	str.w	r8, [r0]
 80076e4:	4604      	mov	r4, r0
 80076e6:	e7e4      	b.n	80076b2 <__pow5mult+0x5a>
 80076e8:	4638      	mov	r0, r7
 80076ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ee:	bf00      	nop
 80076f0:	080081a0 	.word	0x080081a0

080076f4 <__lshift>:
 80076f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	460c      	mov	r4, r1
 80076fa:	4607      	mov	r7, r0
 80076fc:	4616      	mov	r6, r2
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007704:	eb0a 0903 	add.w	r9, sl, r3
 8007708:	6849      	ldr	r1, [r1, #4]
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	f109 0501 	add.w	r5, r9, #1
 8007710:	42ab      	cmp	r3, r5
 8007712:	db32      	blt.n	800777a <__lshift+0x86>
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff fdee 	bl	80072f6 <_Balloc>
 800771a:	2300      	movs	r3, #0
 800771c:	4680      	mov	r8, r0
 800771e:	461a      	mov	r2, r3
 8007720:	f100 0114 	add.w	r1, r0, #20
 8007724:	4553      	cmp	r3, sl
 8007726:	db2b      	blt.n	8007780 <__lshift+0x8c>
 8007728:	6920      	ldr	r0, [r4, #16]
 800772a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800772e:	f104 0314 	add.w	r3, r4, #20
 8007732:	f016 021f 	ands.w	r2, r6, #31
 8007736:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800773a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800773e:	d025      	beq.n	800778c <__lshift+0x98>
 8007740:	2000      	movs	r0, #0
 8007742:	f1c2 0e20 	rsb	lr, r2, #32
 8007746:	468a      	mov	sl, r1
 8007748:	681e      	ldr	r6, [r3, #0]
 800774a:	4096      	lsls	r6, r2
 800774c:	4330      	orrs	r0, r6
 800774e:	f84a 0b04 	str.w	r0, [sl], #4
 8007752:	f853 0b04 	ldr.w	r0, [r3], #4
 8007756:	459c      	cmp	ip, r3
 8007758:	fa20 f00e 	lsr.w	r0, r0, lr
 800775c:	d814      	bhi.n	8007788 <__lshift+0x94>
 800775e:	6048      	str	r0, [r1, #4]
 8007760:	b108      	cbz	r0, 8007766 <__lshift+0x72>
 8007762:	f109 0502 	add.w	r5, r9, #2
 8007766:	3d01      	subs	r5, #1
 8007768:	4638      	mov	r0, r7
 800776a:	f8c8 5010 	str.w	r5, [r8, #16]
 800776e:	4621      	mov	r1, r4
 8007770:	f7ff fdf5 	bl	800735e <_Bfree>
 8007774:	4640      	mov	r0, r8
 8007776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777a:	3101      	adds	r1, #1
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	e7c7      	b.n	8007710 <__lshift+0x1c>
 8007780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007784:	3301      	adds	r3, #1
 8007786:	e7cd      	b.n	8007724 <__lshift+0x30>
 8007788:	4651      	mov	r1, sl
 800778a:	e7dc      	b.n	8007746 <__lshift+0x52>
 800778c:	3904      	subs	r1, #4
 800778e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007792:	459c      	cmp	ip, r3
 8007794:	f841 2f04 	str.w	r2, [r1, #4]!
 8007798:	d8f9      	bhi.n	800778e <__lshift+0x9a>
 800779a:	e7e4      	b.n	8007766 <__lshift+0x72>

0800779c <__mcmp>:
 800779c:	6903      	ldr	r3, [r0, #16]
 800779e:	690a      	ldr	r2, [r1, #16]
 80077a0:	b530      	push	{r4, r5, lr}
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	d10c      	bne.n	80077c0 <__mcmp+0x24>
 80077a6:	0092      	lsls	r2, r2, #2
 80077a8:	3014      	adds	r0, #20
 80077aa:	3114      	adds	r1, #20
 80077ac:	1884      	adds	r4, r0, r2
 80077ae:	4411      	add	r1, r2
 80077b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077b8:	4295      	cmp	r5, r2
 80077ba:	d003      	beq.n	80077c4 <__mcmp+0x28>
 80077bc:	d305      	bcc.n	80077ca <__mcmp+0x2e>
 80077be:	2301      	movs	r3, #1
 80077c0:	4618      	mov	r0, r3
 80077c2:	bd30      	pop	{r4, r5, pc}
 80077c4:	42a0      	cmp	r0, r4
 80077c6:	d3f3      	bcc.n	80077b0 <__mcmp+0x14>
 80077c8:	e7fa      	b.n	80077c0 <__mcmp+0x24>
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	e7f7      	b.n	80077c0 <__mcmp+0x24>

080077d0 <__mdiff>:
 80077d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d4:	460d      	mov	r5, r1
 80077d6:	4607      	mov	r7, r0
 80077d8:	4611      	mov	r1, r2
 80077da:	4628      	mov	r0, r5
 80077dc:	4614      	mov	r4, r2
 80077de:	f7ff ffdd 	bl	800779c <__mcmp>
 80077e2:	1e06      	subs	r6, r0, #0
 80077e4:	d108      	bne.n	80077f8 <__mdiff+0x28>
 80077e6:	4631      	mov	r1, r6
 80077e8:	4638      	mov	r0, r7
 80077ea:	f7ff fd84 	bl	80072f6 <_Balloc>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f8:	bfa4      	itt	ge
 80077fa:	4623      	movge	r3, r4
 80077fc:	462c      	movge	r4, r5
 80077fe:	4638      	mov	r0, r7
 8007800:	6861      	ldr	r1, [r4, #4]
 8007802:	bfa6      	itte	ge
 8007804:	461d      	movge	r5, r3
 8007806:	2600      	movge	r6, #0
 8007808:	2601      	movlt	r6, #1
 800780a:	f7ff fd74 	bl	80072f6 <_Balloc>
 800780e:	f04f 0e00 	mov.w	lr, #0
 8007812:	60c6      	str	r6, [r0, #12]
 8007814:	692b      	ldr	r3, [r5, #16]
 8007816:	6926      	ldr	r6, [r4, #16]
 8007818:	f104 0214 	add.w	r2, r4, #20
 800781c:	f105 0914 	add.w	r9, r5, #20
 8007820:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007824:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007828:	f100 0114 	add.w	r1, r0, #20
 800782c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007830:	f859 5b04 	ldr.w	r5, [r9], #4
 8007834:	fa1f f38a 	uxth.w	r3, sl
 8007838:	4473      	add	r3, lr
 800783a:	b2ac      	uxth	r4, r5
 800783c:	1b1b      	subs	r3, r3, r4
 800783e:	0c2c      	lsrs	r4, r5, #16
 8007840:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007844:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007848:	b29b      	uxth	r3, r3
 800784a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800784e:	45c8      	cmp	r8, r9
 8007850:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007854:	4694      	mov	ip, r2
 8007856:	f841 4b04 	str.w	r4, [r1], #4
 800785a:	d8e7      	bhi.n	800782c <__mdiff+0x5c>
 800785c:	45bc      	cmp	ip, r7
 800785e:	d304      	bcc.n	800786a <__mdiff+0x9a>
 8007860:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007864:	b183      	cbz	r3, 8007888 <__mdiff+0xb8>
 8007866:	6106      	str	r6, [r0, #16]
 8007868:	e7c4      	b.n	80077f4 <__mdiff+0x24>
 800786a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800786e:	b2a2      	uxth	r2, r4
 8007870:	4472      	add	r2, lr
 8007872:	1413      	asrs	r3, r2, #16
 8007874:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007878:	b292      	uxth	r2, r2
 800787a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800787e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007882:	f841 2b04 	str.w	r2, [r1], #4
 8007886:	e7e9      	b.n	800785c <__mdiff+0x8c>
 8007888:	3e01      	subs	r6, #1
 800788a:	e7e9      	b.n	8007860 <__mdiff+0x90>

0800788c <__ulp>:
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <__ulp+0x44>)
 800788e:	400b      	ands	r3, r1
 8007890:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007894:	2b00      	cmp	r3, #0
 8007896:	dd02      	ble.n	800789e <__ulp+0x12>
 8007898:	2000      	movs	r0, #0
 800789a:	4619      	mov	r1, r3
 800789c:	4770      	bx	lr
 800789e:	425b      	negs	r3, r3
 80078a0:	151b      	asrs	r3, r3, #20
 80078a2:	2b13      	cmp	r3, #19
 80078a4:	f04f 0000 	mov.w	r0, #0
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	dc04      	bgt.n	80078b8 <__ulp+0x2c>
 80078ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80078b2:	fa42 f103 	asr.w	r1, r2, r3
 80078b6:	4770      	bx	lr
 80078b8:	2201      	movs	r2, #1
 80078ba:	3b14      	subs	r3, #20
 80078bc:	2b1e      	cmp	r3, #30
 80078be:	bfce      	itee	gt
 80078c0:	4613      	movgt	r3, r2
 80078c2:	f1c3 031f 	rsble	r3, r3, #31
 80078c6:	fa02 f303 	lslle.w	r3, r2, r3
 80078ca:	4618      	mov	r0, r3
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	7ff00000 	.word	0x7ff00000

080078d4 <__b2d>:
 80078d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d8:	6907      	ldr	r7, [r0, #16]
 80078da:	f100 0914 	add.w	r9, r0, #20
 80078de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80078e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80078e6:	f1a7 0804 	sub.w	r8, r7, #4
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff fdc7 	bl	800747e <__hi0bits>
 80078f0:	f1c0 0320 	rsb	r3, r0, #32
 80078f4:	280a      	cmp	r0, #10
 80078f6:	600b      	str	r3, [r1, #0]
 80078f8:	491e      	ldr	r1, [pc, #120]	; (8007974 <__b2d+0xa0>)
 80078fa:	dc17      	bgt.n	800792c <__b2d+0x58>
 80078fc:	45c1      	cmp	r9, r8
 80078fe:	bf28      	it	cs
 8007900:	2200      	movcs	r2, #0
 8007902:	f1c0 0c0b 	rsb	ip, r0, #11
 8007906:	fa26 f30c 	lsr.w	r3, r6, ip
 800790a:	bf38      	it	cc
 800790c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007910:	ea43 0501 	orr.w	r5, r3, r1
 8007914:	f100 0315 	add.w	r3, r0, #21
 8007918:	fa06 f303 	lsl.w	r3, r6, r3
 800791c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007920:	ea43 0402 	orr.w	r4, r3, r2
 8007924:	4620      	mov	r0, r4
 8007926:	4629      	mov	r1, r5
 8007928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792c:	45c1      	cmp	r9, r8
 800792e:	bf3a      	itte	cc
 8007930:	f1a7 0808 	subcc.w	r8, r7, #8
 8007934:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007938:	2200      	movcs	r2, #0
 800793a:	f1b0 030b 	subs.w	r3, r0, #11
 800793e:	d015      	beq.n	800796c <__b2d+0x98>
 8007940:	409e      	lsls	r6, r3
 8007942:	f1c3 0720 	rsb	r7, r3, #32
 8007946:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800794a:	fa22 f107 	lsr.w	r1, r2, r7
 800794e:	45c8      	cmp	r8, r9
 8007950:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007954:	ea46 0501 	orr.w	r5, r6, r1
 8007958:	bf94      	ite	ls
 800795a:	2100      	movls	r1, #0
 800795c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007960:	fa02 f003 	lsl.w	r0, r2, r3
 8007964:	40f9      	lsrs	r1, r7
 8007966:	ea40 0401 	orr.w	r4, r0, r1
 800796a:	e7db      	b.n	8007924 <__b2d+0x50>
 800796c:	ea46 0501 	orr.w	r5, r6, r1
 8007970:	4614      	mov	r4, r2
 8007972:	e7d7      	b.n	8007924 <__b2d+0x50>
 8007974:	3ff00000 	.word	0x3ff00000

08007978 <__d2b>:
 8007978:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800797c:	461c      	mov	r4, r3
 800797e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007982:	2101      	movs	r1, #1
 8007984:	4690      	mov	r8, r2
 8007986:	f7ff fcb6 	bl	80072f6 <_Balloc>
 800798a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800798e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007992:	4607      	mov	r7, r0
 8007994:	bb34      	cbnz	r4, 80079e4 <__d2b+0x6c>
 8007996:	9201      	str	r2, [sp, #4]
 8007998:	f1b8 0200 	subs.w	r2, r8, #0
 800799c:	d027      	beq.n	80079ee <__d2b+0x76>
 800799e:	a802      	add	r0, sp, #8
 80079a0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80079a4:	f7ff fd8a 	bl	80074bc <__lo0bits>
 80079a8:	9900      	ldr	r1, [sp, #0]
 80079aa:	b1f0      	cbz	r0, 80079ea <__d2b+0x72>
 80079ac:	9a01      	ldr	r2, [sp, #4]
 80079ae:	f1c0 0320 	rsb	r3, r0, #32
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	430b      	orrs	r3, r1
 80079b8:	40c2      	lsrs	r2, r0
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	9201      	str	r2, [sp, #4]
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bf14      	ite	ne
 80079c4:	2102      	movne	r1, #2
 80079c6:	2101      	moveq	r1, #1
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	6139      	str	r1, [r7, #16]
 80079cc:	b1c4      	cbz	r4, 8007a00 <__d2b+0x88>
 80079ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80079d2:	4404      	add	r4, r0
 80079d4:	6034      	str	r4, [r6, #0]
 80079d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079da:	6028      	str	r0, [r5, #0]
 80079dc:	4638      	mov	r0, r7
 80079de:	b002      	add	sp, #8
 80079e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80079e8:	e7d5      	b.n	8007996 <__d2b+0x1e>
 80079ea:	6179      	str	r1, [r7, #20]
 80079ec:	e7e7      	b.n	80079be <__d2b+0x46>
 80079ee:	a801      	add	r0, sp, #4
 80079f0:	f7ff fd64 	bl	80074bc <__lo0bits>
 80079f4:	2101      	movs	r1, #1
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	6139      	str	r1, [r7, #16]
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	3020      	adds	r0, #32
 80079fe:	e7e5      	b.n	80079cc <__d2b+0x54>
 8007a00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a04:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007a08:	6030      	str	r0, [r6, #0]
 8007a0a:	6918      	ldr	r0, [r3, #16]
 8007a0c:	f7ff fd37 	bl	800747e <__hi0bits>
 8007a10:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007a14:	e7e1      	b.n	80079da <__d2b+0x62>

08007a16 <__ratio>:
 8007a16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	4688      	mov	r8, r1
 8007a1c:	4669      	mov	r1, sp
 8007a1e:	4681      	mov	r9, r0
 8007a20:	f7ff ff58 	bl	80078d4 <__b2d>
 8007a24:	468b      	mov	fp, r1
 8007a26:	4606      	mov	r6, r0
 8007a28:	460f      	mov	r7, r1
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	a901      	add	r1, sp, #4
 8007a2e:	f7ff ff51 	bl	80078d4 <__b2d>
 8007a32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	eba3 0c02 	sub.w	ip, r3, r2
 8007a40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bfd5      	itete	le
 8007a4e:	460a      	movle	r2, r1
 8007a50:	463a      	movgt	r2, r7
 8007a52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007a5a:	bfd8      	it	le
 8007a5c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007a60:	462b      	mov	r3, r5
 8007a62:	4602      	mov	r2, r0
 8007a64:	4659      	mov	r1, fp
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7f8 fe60 	bl	800072c <__aeabi_ddiv>
 8007a6c:	b003      	add	sp, #12
 8007a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a72 <__copybits>:
 8007a72:	3901      	subs	r1, #1
 8007a74:	b510      	push	{r4, lr}
 8007a76:	1149      	asrs	r1, r1, #5
 8007a78:	6914      	ldr	r4, [r2, #16]
 8007a7a:	3101      	adds	r1, #1
 8007a7c:	f102 0314 	add.w	r3, r2, #20
 8007a80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	d303      	bcc.n	8007a96 <__copybits+0x24>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	428a      	cmp	r2, r1
 8007a92:	d305      	bcc.n	8007aa0 <__copybits+0x2e>
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a9a:	f840 2b04 	str.w	r2, [r0], #4
 8007a9e:	e7f3      	b.n	8007a88 <__copybits+0x16>
 8007aa0:	f842 3b04 	str.w	r3, [r2], #4
 8007aa4:	e7f4      	b.n	8007a90 <__copybits+0x1e>

08007aa6 <__any_on>:
 8007aa6:	f100 0214 	add.w	r2, r0, #20
 8007aaa:	6900      	ldr	r0, [r0, #16]
 8007aac:	114b      	asrs	r3, r1, #5
 8007aae:	4298      	cmp	r0, r3
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	db11      	blt.n	8007ad8 <__any_on+0x32>
 8007ab4:	dd0a      	ble.n	8007acc <__any_on+0x26>
 8007ab6:	f011 011f 	ands.w	r1, r1, #31
 8007aba:	d007      	beq.n	8007acc <__any_on+0x26>
 8007abc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ac0:	fa24 f001 	lsr.w	r0, r4, r1
 8007ac4:	fa00 f101 	lsl.w	r1, r0, r1
 8007ac8:	428c      	cmp	r4, r1
 8007aca:	d10b      	bne.n	8007ae4 <__any_on+0x3e>
 8007acc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d803      	bhi.n	8007adc <__any_on+0x36>
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	bd10      	pop	{r4, pc}
 8007ad8:	4603      	mov	r3, r0
 8007ada:	e7f7      	b.n	8007acc <__any_on+0x26>
 8007adc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d0f5      	beq.n	8007ad0 <__any_on+0x2a>
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	e7f6      	b.n	8007ad6 <__any_on+0x30>

08007ae8 <_calloc_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	fb02 f401 	mul.w	r4, r2, r1
 8007aee:	4621      	mov	r1, r4
 8007af0:	f7fc fe28 	bl	8004744 <_malloc_r>
 8007af4:	4605      	mov	r5, r0
 8007af6:	b118      	cbz	r0, 8007b00 <_calloc_r+0x18>
 8007af8:	4622      	mov	r2, r4
 8007afa:	2100      	movs	r1, #0
 8007afc:	f7fc fdce 	bl	800469c <memset>
 8007b00:	4628      	mov	r0, r5
 8007b02:	bd38      	pop	{r3, r4, r5, pc}

08007b04 <__ssputs_r>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	688e      	ldr	r6, [r1, #8]
 8007b0a:	4682      	mov	sl, r0
 8007b0c:	429e      	cmp	r6, r3
 8007b0e:	460c      	mov	r4, r1
 8007b10:	4690      	mov	r8, r2
 8007b12:	4699      	mov	r9, r3
 8007b14:	d837      	bhi.n	8007b86 <__ssputs_r+0x82>
 8007b16:	898a      	ldrh	r2, [r1, #12]
 8007b18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b1c:	d031      	beq.n	8007b82 <__ssputs_r+0x7e>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	6825      	ldr	r5, [r4, #0]
 8007b22:	6909      	ldr	r1, [r1, #16]
 8007b24:	1a6f      	subs	r7, r5, r1
 8007b26:	6965      	ldr	r5, [r4, #20]
 8007b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b30:	f109 0301 	add.w	r3, r9, #1
 8007b34:	443b      	add	r3, r7
 8007b36:	429d      	cmp	r5, r3
 8007b38:	bf38      	it	cc
 8007b3a:	461d      	movcc	r5, r3
 8007b3c:	0553      	lsls	r3, r2, #21
 8007b3e:	d530      	bpl.n	8007ba2 <__ssputs_r+0x9e>
 8007b40:	4629      	mov	r1, r5
 8007b42:	f7fc fdff 	bl	8004744 <_malloc_r>
 8007b46:	4606      	mov	r6, r0
 8007b48:	b950      	cbnz	r0, 8007b60 <__ssputs_r+0x5c>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	f8ca 3000 	str.w	r3, [sl]
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b60:	463a      	mov	r2, r7
 8007b62:	6921      	ldr	r1, [r4, #16]
 8007b64:	f7ff fbba 	bl	80072dc <memcpy>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b72:	81a3      	strh	r3, [r4, #12]
 8007b74:	6126      	str	r6, [r4, #16]
 8007b76:	443e      	add	r6, r7
 8007b78:	6026      	str	r6, [r4, #0]
 8007b7a:	464e      	mov	r6, r9
 8007b7c:	6165      	str	r5, [r4, #20]
 8007b7e:	1bed      	subs	r5, r5, r7
 8007b80:	60a5      	str	r5, [r4, #8]
 8007b82:	454e      	cmp	r6, r9
 8007b84:	d900      	bls.n	8007b88 <__ssputs_r+0x84>
 8007b86:	464e      	mov	r6, r9
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	f000 f90b 	bl	8007da8 <memmove>
 8007b92:	68a3      	ldr	r3, [r4, #8]
 8007b94:	2000      	movs	r0, #0
 8007b96:	1b9b      	subs	r3, r3, r6
 8007b98:	60a3      	str	r3, [r4, #8]
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	441e      	add	r6, r3
 8007b9e:	6026      	str	r6, [r4, #0]
 8007ba0:	e7dc      	b.n	8007b5c <__ssputs_r+0x58>
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	f000 f919 	bl	8007dda <_realloc_r>
 8007ba8:	4606      	mov	r6, r0
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d1e2      	bne.n	8007b74 <__ssputs_r+0x70>
 8007bae:	6921      	ldr	r1, [r4, #16]
 8007bb0:	4650      	mov	r0, sl
 8007bb2:	f7fc fd7b 	bl	80046ac <_free_r>
 8007bb6:	e7c8      	b.n	8007b4a <__ssputs_r+0x46>

08007bb8 <_svfiprintf_r>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	461d      	mov	r5, r3
 8007bbe:	898b      	ldrh	r3, [r1, #12]
 8007bc0:	b09d      	sub	sp, #116	; 0x74
 8007bc2:	061f      	lsls	r7, r3, #24
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	4616      	mov	r6, r2
 8007bca:	d50f      	bpl.n	8007bec <_svfiprintf_r+0x34>
 8007bcc:	690b      	ldr	r3, [r1, #16]
 8007bce:	b96b      	cbnz	r3, 8007bec <_svfiprintf_r+0x34>
 8007bd0:	2140      	movs	r1, #64	; 0x40
 8007bd2:	f7fc fdb7 	bl	8004744 <_malloc_r>
 8007bd6:	6020      	str	r0, [r4, #0]
 8007bd8:	6120      	str	r0, [r4, #16]
 8007bda:	b928      	cbnz	r0, 8007be8 <_svfiprintf_r+0x30>
 8007bdc:	230c      	movs	r3, #12
 8007bde:	f8c8 3000 	str.w	r3, [r8]
 8007be2:	f04f 30ff 	mov.w	r0, #4294967295
 8007be6:	e0c8      	b.n	8007d7a <_svfiprintf_r+0x1c2>
 8007be8:	2340      	movs	r3, #64	; 0x40
 8007bea:	6163      	str	r3, [r4, #20]
 8007bec:	2300      	movs	r3, #0
 8007bee:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf0:	2320      	movs	r3, #32
 8007bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bf6:	2330      	movs	r3, #48	; 0x30
 8007bf8:	f04f 0b01 	mov.w	fp, #1
 8007bfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c00:	9503      	str	r5, [sp, #12]
 8007c02:	4637      	mov	r7, r6
 8007c04:	463d      	mov	r5, r7
 8007c06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c0a:	b10b      	cbz	r3, 8007c10 <_svfiprintf_r+0x58>
 8007c0c:	2b25      	cmp	r3, #37	; 0x25
 8007c0e:	d13e      	bne.n	8007c8e <_svfiprintf_r+0xd6>
 8007c10:	ebb7 0a06 	subs.w	sl, r7, r6
 8007c14:	d00b      	beq.n	8007c2e <_svfiprintf_r+0x76>
 8007c16:	4653      	mov	r3, sl
 8007c18:	4632      	mov	r2, r6
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	f7ff ff71 	bl	8007b04 <__ssputs_r>
 8007c22:	3001      	adds	r0, #1
 8007c24:	f000 80a4 	beq.w	8007d70 <_svfiprintf_r+0x1b8>
 8007c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2a:	4453      	add	r3, sl
 8007c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c2e:	783b      	ldrb	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 809d 	beq.w	8007d70 <_svfiprintf_r+0x1b8>
 8007c36:	2300      	movs	r3, #0
 8007c38:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	9307      	str	r3, [sp, #28]
 8007c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c48:	931a      	str	r3, [sp, #104]	; 0x68
 8007c4a:	462f      	mov	r7, r5
 8007c4c:	2205      	movs	r2, #5
 8007c4e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c52:	4850      	ldr	r0, [pc, #320]	; (8007d94 <_svfiprintf_r+0x1dc>)
 8007c54:	f7ff fb34 	bl	80072c0 <memchr>
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	b9d0      	cbnz	r0, 8007c92 <_svfiprintf_r+0xda>
 8007c5c:	06d9      	lsls	r1, r3, #27
 8007c5e:	bf44      	itt	mi
 8007c60:	2220      	movmi	r2, #32
 8007c62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c66:	071a      	lsls	r2, r3, #28
 8007c68:	bf44      	itt	mi
 8007c6a:	222b      	movmi	r2, #43	; 0x2b
 8007c6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c70:	782a      	ldrb	r2, [r5, #0]
 8007c72:	2a2a      	cmp	r2, #42	; 0x2a
 8007c74:	d015      	beq.n	8007ca2 <_svfiprintf_r+0xea>
 8007c76:	462f      	mov	r7, r5
 8007c78:	2000      	movs	r0, #0
 8007c7a:	250a      	movs	r5, #10
 8007c7c:	9a07      	ldr	r2, [sp, #28]
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c84:	3b30      	subs	r3, #48	; 0x30
 8007c86:	2b09      	cmp	r3, #9
 8007c88:	d94d      	bls.n	8007d26 <_svfiprintf_r+0x16e>
 8007c8a:	b1b8      	cbz	r0, 8007cbc <_svfiprintf_r+0x104>
 8007c8c:	e00f      	b.n	8007cae <_svfiprintf_r+0xf6>
 8007c8e:	462f      	mov	r7, r5
 8007c90:	e7b8      	b.n	8007c04 <_svfiprintf_r+0x4c>
 8007c92:	4a40      	ldr	r2, [pc, #256]	; (8007d94 <_svfiprintf_r+0x1dc>)
 8007c94:	463d      	mov	r5, r7
 8007c96:	1a80      	subs	r0, r0, r2
 8007c98:	fa0b f000 	lsl.w	r0, fp, r0
 8007c9c:	4318      	orrs	r0, r3
 8007c9e:	9004      	str	r0, [sp, #16]
 8007ca0:	e7d3      	b.n	8007c4a <_svfiprintf_r+0x92>
 8007ca2:	9a03      	ldr	r2, [sp, #12]
 8007ca4:	1d11      	adds	r1, r2, #4
 8007ca6:	6812      	ldr	r2, [r2, #0]
 8007ca8:	9103      	str	r1, [sp, #12]
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	db01      	blt.n	8007cb2 <_svfiprintf_r+0xfa>
 8007cae:	9207      	str	r2, [sp, #28]
 8007cb0:	e004      	b.n	8007cbc <_svfiprintf_r+0x104>
 8007cb2:	4252      	negs	r2, r2
 8007cb4:	f043 0302 	orr.w	r3, r3, #2
 8007cb8:	9207      	str	r2, [sp, #28]
 8007cba:	9304      	str	r3, [sp, #16]
 8007cbc:	783b      	ldrb	r3, [r7, #0]
 8007cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc0:	d10c      	bne.n	8007cdc <_svfiprintf_r+0x124>
 8007cc2:	787b      	ldrb	r3, [r7, #1]
 8007cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc6:	d133      	bne.n	8007d30 <_svfiprintf_r+0x178>
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	3702      	adds	r7, #2
 8007ccc:	1d1a      	adds	r2, r3, #4
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	9203      	str	r2, [sp, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bfb8      	it	lt
 8007cd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	4d2e      	ldr	r5, [pc, #184]	; (8007d98 <_svfiprintf_r+0x1e0>)
 8007cde:	2203      	movs	r2, #3
 8007ce0:	7839      	ldrb	r1, [r7, #0]
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7ff faec 	bl	80072c0 <memchr>
 8007ce8:	b138      	cbz	r0, 8007cfa <_svfiprintf_r+0x142>
 8007cea:	2340      	movs	r3, #64	; 0x40
 8007cec:	1b40      	subs	r0, r0, r5
 8007cee:	fa03 f000 	lsl.w	r0, r3, r0
 8007cf2:	9b04      	ldr	r3, [sp, #16]
 8007cf4:	3701      	adds	r7, #1
 8007cf6:	4303      	orrs	r3, r0
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	7839      	ldrb	r1, [r7, #0]
 8007cfc:	2206      	movs	r2, #6
 8007cfe:	4827      	ldr	r0, [pc, #156]	; (8007d9c <_svfiprintf_r+0x1e4>)
 8007d00:	1c7e      	adds	r6, r7, #1
 8007d02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d06:	f7ff fadb 	bl	80072c0 <memchr>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d038      	beq.n	8007d80 <_svfiprintf_r+0x1c8>
 8007d0e:	4b24      	ldr	r3, [pc, #144]	; (8007da0 <_svfiprintf_r+0x1e8>)
 8007d10:	bb13      	cbnz	r3, 8007d58 <_svfiprintf_r+0x1a0>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	3307      	adds	r3, #7
 8007d16:	f023 0307 	bic.w	r3, r3, #7
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	9303      	str	r3, [sp, #12]
 8007d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d20:	444b      	add	r3, r9
 8007d22:	9309      	str	r3, [sp, #36]	; 0x24
 8007d24:	e76d      	b.n	8007c02 <_svfiprintf_r+0x4a>
 8007d26:	fb05 3202 	mla	r2, r5, r2, r3
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	460f      	mov	r7, r1
 8007d2e:	e7a6      	b.n	8007c7e <_svfiprintf_r+0xc6>
 8007d30:	2300      	movs	r3, #0
 8007d32:	250a      	movs	r5, #10
 8007d34:	4619      	mov	r1, r3
 8007d36:	3701      	adds	r7, #1
 8007d38:	9305      	str	r3, [sp, #20]
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d40:	3a30      	subs	r2, #48	; 0x30
 8007d42:	2a09      	cmp	r2, #9
 8007d44:	d903      	bls.n	8007d4e <_svfiprintf_r+0x196>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0c8      	beq.n	8007cdc <_svfiprintf_r+0x124>
 8007d4a:	9105      	str	r1, [sp, #20]
 8007d4c:	e7c6      	b.n	8007cdc <_svfiprintf_r+0x124>
 8007d4e:	fb05 2101 	mla	r1, r5, r1, r2
 8007d52:	2301      	movs	r3, #1
 8007d54:	4607      	mov	r7, r0
 8007d56:	e7f0      	b.n	8007d3a <_svfiprintf_r+0x182>
 8007d58:	ab03      	add	r3, sp, #12
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <_svfiprintf_r+0x1ec>)
 8007d60:	a904      	add	r1, sp, #16
 8007d62:	4640      	mov	r0, r8
 8007d64:	f7fc fdda 	bl	800491c <_printf_float>
 8007d68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d6c:	4681      	mov	r9, r0
 8007d6e:	d1d6      	bne.n	8007d1e <_svfiprintf_r+0x166>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	065b      	lsls	r3, r3, #25
 8007d74:	f53f af35 	bmi.w	8007be2 <_svfiprintf_r+0x2a>
 8007d78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d7a:	b01d      	add	sp, #116	; 0x74
 8007d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d80:	ab03      	add	r3, sp, #12
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	4622      	mov	r2, r4
 8007d86:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <_svfiprintf_r+0x1ec>)
 8007d88:	a904      	add	r1, sp, #16
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7fd f872 	bl	8004e74 <_printf_i>
 8007d90:	e7ea      	b.n	8007d68 <_svfiprintf_r+0x1b0>
 8007d92:	bf00      	nop
 8007d94:	080081ac 	.word	0x080081ac
 8007d98:	080081b2 	.word	0x080081b2
 8007d9c:	080081b6 	.word	0x080081b6
 8007da0:	0800491d 	.word	0x0800491d
 8007da4:	08007b05 	.word	0x08007b05

08007da8 <memmove>:
 8007da8:	4288      	cmp	r0, r1
 8007daa:	b510      	push	{r4, lr}
 8007dac:	eb01 0302 	add.w	r3, r1, r2
 8007db0:	d807      	bhi.n	8007dc2 <memmove+0x1a>
 8007db2:	1e42      	subs	r2, r0, #1
 8007db4:	4299      	cmp	r1, r3
 8007db6:	d00a      	beq.n	8007dce <memmove+0x26>
 8007db8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dbc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007dc0:	e7f8      	b.n	8007db4 <memmove+0xc>
 8007dc2:	4283      	cmp	r3, r0
 8007dc4:	d9f5      	bls.n	8007db2 <memmove+0xa>
 8007dc6:	1881      	adds	r1, r0, r2
 8007dc8:	1ad2      	subs	r2, r2, r3
 8007dca:	42d3      	cmn	r3, r2
 8007dcc:	d100      	bne.n	8007dd0 <memmove+0x28>
 8007dce:	bd10      	pop	{r4, pc}
 8007dd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dd4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007dd8:	e7f7      	b.n	8007dca <memmove+0x22>

08007dda <_realloc_r>:
 8007dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ddc:	4607      	mov	r7, r0
 8007dde:	4614      	mov	r4, r2
 8007de0:	460e      	mov	r6, r1
 8007de2:	b921      	cbnz	r1, 8007dee <_realloc_r+0x14>
 8007de4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007de8:	4611      	mov	r1, r2
 8007dea:	f7fc bcab 	b.w	8004744 <_malloc_r>
 8007dee:	b922      	cbnz	r2, 8007dfa <_realloc_r+0x20>
 8007df0:	f7fc fc5c 	bl	80046ac <_free_r>
 8007df4:	4625      	mov	r5, r4
 8007df6:	4628      	mov	r0, r5
 8007df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dfa:	f000 f814 	bl	8007e26 <_malloc_usable_size_r>
 8007dfe:	42a0      	cmp	r0, r4
 8007e00:	d20f      	bcs.n	8007e22 <_realloc_r+0x48>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4638      	mov	r0, r7
 8007e06:	f7fc fc9d 	bl	8004744 <_malloc_r>
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d0f2      	beq.n	8007df6 <_realloc_r+0x1c>
 8007e10:	4631      	mov	r1, r6
 8007e12:	4622      	mov	r2, r4
 8007e14:	f7ff fa62 	bl	80072dc <memcpy>
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	f7fc fc46 	bl	80046ac <_free_r>
 8007e20:	e7e9      	b.n	8007df6 <_realloc_r+0x1c>
 8007e22:	4635      	mov	r5, r6
 8007e24:	e7e7      	b.n	8007df6 <_realloc_r+0x1c>

08007e26 <_malloc_usable_size_r>:
 8007e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e2a:	1f18      	subs	r0, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bfbc      	itt	lt
 8007e30:	580b      	ldrlt	r3, [r1, r0]
 8007e32:	18c0      	addlt	r0, r0, r3
 8007e34:	4770      	bx	lr
	...

08007e38 <_init>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr

08007e44 <_fini>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	bf00      	nop
 8007e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4a:	bc08      	pop	{r3}
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	4770      	bx	lr
