
praca_przejsciowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800452c  0800452c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800452c  0800452c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800452c  0800452c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e0  08004710  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08004710  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d25b  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e3  00000000  00000000  0002d460  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce0  00000000  00000000  0002f548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a35  00000000  00000000  00030de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba0d  00000000  00000000  00049815  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b102  00000000  00000000  00055222  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0324  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b24  00000000  00000000  000e03a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004320 	.word	0x08004320

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08004320 	.word	0x08004320

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__gedf2>:
 80004d4:	f04f 3cff 	mov.w	ip, #4294967295
 80004d8:	e006      	b.n	80004e8 <__cmpdf2+0x4>
 80004da:	bf00      	nop

080004dc <__ledf2>:
 80004dc:	f04f 0c01 	mov.w	ip, #1
 80004e0:	e002      	b.n	80004e8 <__cmpdf2+0x4>
 80004e2:	bf00      	nop

080004e4 <__cmpdf2>:
 80004e4:	f04f 0c01 	mov.w	ip, #1
 80004e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004f8:	bf18      	it	ne
 80004fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004fe:	d01b      	beq.n	8000538 <__cmpdf2+0x54>
 8000500:	b001      	add	sp, #4
 8000502:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000506:	bf0c      	ite	eq
 8000508:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800050c:	ea91 0f03 	teqne	r1, r3
 8000510:	bf02      	ittt	eq
 8000512:	ea90 0f02 	teqeq	r0, r2
 8000516:	2000      	moveq	r0, #0
 8000518:	4770      	bxeq	lr
 800051a:	f110 0f00 	cmn.w	r0, #0
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf58      	it	pl
 8000524:	4299      	cmppl	r1, r3
 8000526:	bf08      	it	eq
 8000528:	4290      	cmpeq	r0, r2
 800052a:	bf2c      	ite	cs
 800052c:	17d8      	asrcs	r0, r3, #31
 800052e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000532:	f040 0001 	orr.w	r0, r0, #1
 8000536:	4770      	bx	lr
 8000538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d102      	bne.n	8000548 <__cmpdf2+0x64>
 8000542:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000546:	d107      	bne.n	8000558 <__cmpdf2+0x74>
 8000548:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800054c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000550:	d1d6      	bne.n	8000500 <__cmpdf2+0x1c>
 8000552:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000556:	d0d3      	beq.n	8000500 <__cmpdf2+0x1c>
 8000558:	f85d 0b04 	ldr.w	r0, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__aeabi_cdrcmple>:
 8000560:	4684      	mov	ip, r0
 8000562:	4610      	mov	r0, r2
 8000564:	4662      	mov	r2, ip
 8000566:	468c      	mov	ip, r1
 8000568:	4619      	mov	r1, r3
 800056a:	4663      	mov	r3, ip
 800056c:	e000      	b.n	8000570 <__aeabi_cdcmpeq>
 800056e:	bf00      	nop

08000570 <__aeabi_cdcmpeq>:
 8000570:	b501      	push	{r0, lr}
 8000572:	f7ff ffb7 	bl	80004e4 <__cmpdf2>
 8000576:	2800      	cmp	r0, #0
 8000578:	bf48      	it	mi
 800057a:	f110 0f00 	cmnmi.w	r0, #0
 800057e:	bd01      	pop	{r0, pc}

08000580 <__aeabi_dcmpeq>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff fff4 	bl	8000570 <__aeabi_cdcmpeq>
 8000588:	bf0c      	ite	eq
 800058a:	2001      	moveq	r0, #1
 800058c:	2000      	movne	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_dcmplt>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffea 	bl	8000570 <__aeabi_cdcmpeq>
 800059c:	bf34      	ite	cc
 800059e:	2001      	movcc	r0, #1
 80005a0:	2000      	movcs	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_dcmple>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffe0 	bl	8000570 <__aeabi_cdcmpeq>
 80005b0:	bf94      	ite	ls
 80005b2:	2001      	movls	r0, #1
 80005b4:	2000      	movhi	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_dcmpge>:
 80005bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c0:	f7ff ffce 	bl	8000560 <__aeabi_cdrcmple>
 80005c4:	bf94      	ite	ls
 80005c6:	2001      	movls	r0, #1
 80005c8:	2000      	movhi	r0, #0
 80005ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ce:	bf00      	nop

080005d0 <__aeabi_dcmpgt>:
 80005d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d4:	f7ff ffc4 	bl	8000560 <__aeabi_cdrcmple>
 80005d8:	bf34      	ite	cc
 80005da:	2001      	movcc	r0, #1
 80005dc:	2000      	movcs	r0, #0
 80005de:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e2:	bf00      	nop

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_DMA_Init+0x48>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a0f      	ldr	r2, [pc, #60]	; (800062c <MX_DMA_Init+0x48>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_DMA_Init+0x48>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2010      	movs	r0, #16
 8000608:	f000 fcad 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800060c:	2010      	movs	r0, #16
 800060e:	f000 fcc6 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2011      	movs	r0, #17
 8000618:	f000 fca5 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800061c:	2011      	movs	r0, #17
 800061e:	f000 fcbe 	bl	8000f9e <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a2c      	ldr	r2, [pc, #176]	; (80006fc <MX_GPIO_Init+0xcc>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <MX_GPIO_Init+0xcc>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a26      	ldr	r2, [pc, #152]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_GPIO_Init+0xcc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a20      	ldr	r2, [pc, #128]	; (80006fc <MX_GPIO_Init+0xcc>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_GPIO_Init+0xcc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_GPIO_Init+0xcc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	4815      	ldr	r0, [pc, #84]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006aa:	f001 f851 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_GPIO_Init+0xd4>)
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_GPIO_Init+0xd8>)
 80006c4:	f000 feea 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c8:	2320      	movs	r3, #32
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006e0:	f000 fedc 	bl	800149c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	2028      	movs	r0, #40	; 0x28
 80006ea:	f000 fc3c 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ee:	2028      	movs	r0, #40	; 0x28
 80006f0:	f000 fc55 	bl	8000f9e <HAL_NVIC_EnableIRQ>

}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800
 8000704:	10110000 	.word	0x10110000
 8000708:	40011000 	.word	0x40011000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 faf0 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f812 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f7ff ff8a 	bl	8000630 <MX_GPIO_Init>
  MX_DMA_Init();
 800071c:	f7ff ff62 	bl	80005e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000720:	f000 f9fe 	bl	8000b20 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000724:	f000 f96c 	bl	8000a00 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 8000728:	221c      	movs	r2, #28
 800072a:	4902      	ldr	r1, [pc, #8]	; (8000734 <main+0x28>)
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <main+0x2c>)
 800072e:	f002 f8d3 	bl	80028d8 <HAL_UART_Receive_DMA>
	//initOneWayList();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000732:	e7fe      	b.n	8000732 <main+0x26>
 8000734:	20000230 	.word	0x20000230
 8000738:	2000037c 	.word	0x2000037c

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b090      	sub	sp, #64	; 0x40
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2228      	movs	r2, #40	; 0x28
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 f910 	bl	8003970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000762:	2301      	movs	r3, #1
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2310      	movs	r3, #16
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800076e:	2300      	movs	r3, #0
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000772:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0318 	add.w	r3, r7, #24
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f83b 	bl	80017f8 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000788:	f000 f84e 	bl	8000828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2102      	movs	r1, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 faa6 	bl	8001cf8 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007b2:	f000 f839 	bl	8000828 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3740      	adds	r7, #64	; 0x40
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	//przerwanie co 1 sekundę

	startCounterTime++;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a03      	ldr	r2, [pc, #12]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000200 	.word	0x20000200

080007e0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_UART_RxCpltCallback+0x34>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d10c      	bne.n	800080c <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_DMA(&huart2, odebranaWiadomosc, SIZE_OF_MSG);
 80007f2:	221c      	movs	r2, #28
 80007f4:	4908      	ldr	r1, [pc, #32]	; (8000818 <HAL_UART_RxCpltCallback+0x38>)
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <HAL_UART_RxCpltCallback+0x3c>)
 80007f8:	f002 f86e 	bl	80028d8 <HAL_UART_Receive_DMA>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007fc:	2120      	movs	r1, #32
 80007fe:	4808      	ldr	r0, [pc, #32]	; (8000820 <HAL_UART_RxCpltCallback+0x40>)
 8000800:	f000 ffbe 	bl	8001780 <HAL_GPIO_TogglePin>
		convertToStucture(odebranaWiadomosc, &head);
 8000804:	4907      	ldr	r1, [pc, #28]	; (8000824 <HAL_UART_RxCpltCallback+0x44>)
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <HAL_UART_RxCpltCallback+0x38>)
 8000808:	f002 fc88 	bl	800311c <convertToStucture>

	}
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004400 	.word	0x40004400
 8000818:	20000230 	.word	0x20000230
 800081c:	2000037c 	.word	0x2000037c
 8000820:	40010800 	.word	0x40010800
 8000824:	20000228 	.word	0x20000228

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <HAL_MspInit+0x5c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_MspInit+0x5c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_MspInit+0x5c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x5c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_MspInit+0x60>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_MspInit+0x60>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000
 8000894:	40010000 	.word	0x40010000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <HardFault_Handler+0x4>

080008aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <MemManage_Handler+0x4>

080008b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <BusFault_Handler+0x4>

080008b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <UsageFault_Handler+0x4>

080008bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 fa4c 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <DMA1_Channel6_IRQHandler+0x10>)
 80008f2:	f000 fc9f 	bl	8001234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200002f4 	.word	0x200002f4

08000900 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <DMA1_Channel7_IRQHandler+0x10>)
 8000906:	f000 fc95 	bl	8001234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000338 	.word	0x20000338

08000914 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM1_BRK_IRQHandler+0x10>)
 800091a:	f001 fbd8 	bl	80020ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200002ac 	.word	0x200002ac

08000928 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM1_UP_IRQHandler+0x10>)
 800092e:	f001 fbce 	bl	80020ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200002ac 	.word	0x200002ac

0800093c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <TIM1_TRG_COM_IRQHandler+0x10>)
 8000942:	f001 fbc4 	bl	80020ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200002ac 	.word	0x200002ac

08000950 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <TIM1_CC_IRQHandler+0x10>)
 8000956:	f001 fbba 	bl	80020ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200002ac 	.word	0x200002ac

08000964 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <USART2_IRQHandler+0x10>)
 800096a:	f002 f835 	bl	80029d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000037c 	.word	0x2000037c

08000978 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800097c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000980:	f000 ff18 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f002 ff7c 	bl	80038b4 <__errno>
 80009bc:	4602      	mov	r2, r0
 80009be:	230c      	movs	r3, #12
 80009c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20005000 	.word	0x20005000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	20000204 	.word	0x20000204
 80009f0:	200003c8 	.word	0x200003c8

080009f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a1e:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a32:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a4a:	4814      	ldr	r0, [pc, #80]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a4c:	f001 faf0 	bl	8002030 <HAL_TIM_Base_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a56:	f7ff fee7 	bl	8000828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	4619      	mov	r1, r3
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a68:	f001 fc39 	bl	80022de <HAL_TIM_ConfigClockSource>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a72:	f7ff fed9 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4619      	mov	r1, r3
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <MX_TIM1_Init+0x9c>)
 8000a84:	f001 fdfe 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000a8e:	f7ff fecb 	bl	8000828 <Error_Handler>
  }

}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200002ac 	.word	0x200002ac
 8000aa0:	40012c00 	.word	0x40012c00

08000aa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_TIM_Base_MspInit+0x74>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_TIM_Base_MspInit+0x78>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <HAL_TIM_Base_MspInit+0x78>)
 8000abc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_TIM_Base_MspInit+0x78>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2018      	movs	r0, #24
 8000ad4:	f000 fa47 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000ad8:	2018      	movs	r0, #24
 8000ada:	f000 fa60 	bl	8000f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2019      	movs	r0, #25
 8000ae4:	f000 fa3f 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ae8:	2019      	movs	r0, #25
 8000aea:	f000 fa58 	bl	8000f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	201a      	movs	r0, #26
 8000af4:	f000 fa37 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000af8:	201a      	movs	r0, #26
 8000afa:	f000 fa50 	bl	8000f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	201b      	movs	r0, #27
 8000b04:	f000 fa2f 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b08:	201b      	movs	r0, #27
 8000b0a:	f000 fa48 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	40021000 	.word	0x40021000

08000b20 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_USART2_UART_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b58:	f001 fe04 	bl	8002764 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b62:	f7ff fe61 	bl	8000828 <Error_Handler>
  }

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000037c 	.word	0x2000037c
 8000b70:	40004400 	.word	0x40004400

08000b74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a3f      	ldr	r2, [pc, #252]	; (8000c8c <HAL_UART_MspInit+0x118>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d177      	bne.n	8000c84 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b94:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <HAL_UART_MspInit+0x11c>)
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	4a3d      	ldr	r2, [pc, #244]	; (8000c90 <HAL_UART_MspInit+0x11c>)
 8000b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9e:	61d3      	str	r3, [r2, #28]
 8000ba0:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <HAL_UART_MspInit+0x11c>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <HAL_UART_MspInit+0x11c>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a37      	ldr	r2, [pc, #220]	; (8000c90 <HAL_UART_MspInit+0x11c>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <HAL_UART_MspInit+0x11c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	482f      	ldr	r0, [pc, #188]	; (8000c94 <HAL_UART_MspInit+0x120>)
 8000bd8:	f000 fc60 	bl	800149c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000bde:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <HAL_UART_MspInit+0x128>)
 8000be0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be2:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfa:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c06:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c0c:	4822      	ldr	r0, [pc, #136]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000c0e:	f000 f9e1 	bl	8000fd4 <HAL_DMA_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8000c18:	f7ff fe06 	bl	8000828 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
 8000c22:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <HAL_UART_MspInit+0x124>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_UART_MspInit+0x130>)
 8000c2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c30:	2210      	movs	r2, #16
 8000c32:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c5a:	f000 f9bb 	bl	8000fd4 <HAL_DMA_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000c64:	f7ff fde0 	bl	8000828 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <HAL_UART_MspInit+0x12c>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2026      	movs	r0, #38	; 0x26
 8000c7a:	f000 f974 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7e:	2026      	movs	r0, #38	; 0x26
 8000c80:	f000 f98d 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010800 	.word	0x40010800
 8000c98:	200002f4 	.word	0x200002f4
 8000c9c:	4002006c 	.word	0x4002006c
 8000ca0:	20000338 	.word	0x20000338
 8000ca4:	40020080 	.word	0x40020080

08000ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ca8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000caa:	e003      	b.n	8000cb4 <LoopCopyDataInit>

08000cac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cb2:	3104      	adds	r1, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cbc:	d3f6      	bcc.n	8000cac <CopyDataInit>
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000cc0:	e002      	b.n	8000cc8 <LoopFillZerobss>

08000cc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000cc4:	f842 3b04 	str.w	r3, [r2], #4

08000cc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000cca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ccc:	d3f9      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cce:	f7ff fe91 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f002 fdf5 	bl	80038c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff fd19 	bl	800070c <main>
  bx lr
 8000cda:	4770      	bx	lr
  ldr r3, =_sidata
 8000cdc:	08004534 	.word	0x08004534
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ce4:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000ce8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000cec:	200003c4 	.word	0x200003c4

08000cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_2_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x28>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x28>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f923 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fd90 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f93b 	bl	8000fba <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f903 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x20>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <HAL_IncTick+0x20>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	200003bc 	.word	0x200003bc

08000da4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <HAL_GetTick+0x10>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	200003bc 	.word	0x200003bc

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4906      	ldr	r1, [pc, #24]	; (8000e50 <__NVIC_EnableIRQ+0x34>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff90 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff2d 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff42 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff90 	bl	8000ea8 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5f 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff35 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e043      	b.n	8001072 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_DMA_Init+0xa8>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_DMA_Init+0xac>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	009a      	lsls	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <HAL_DMA_Init+0xb0>)
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2202      	movs	r2, #2
 800100c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800101e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001022:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800102c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	bffdfff8 	.word	0xbffdfff8
 8001080:	cccccccd 	.word	0xcccccccd
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <HAL_DMA_Start_IT+0x20>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e04a      	b.n	800113e <HAL_DMA_Start_IT+0xb6>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d13a      	bne.n	8001130 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2202      	movs	r2, #2
 80010be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f9ae 	bl	8001440 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 020e 	orr.w	r2, r2, #14
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e00f      	b.n	800111e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0204 	bic.w	r2, r2, #4
 800110c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 020a 	orr.w	r2, r2, #10
 800111c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e005      	b.n	800113c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001138:	2302      	movs	r3, #2
 800113a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800113c:	7dfb      	ldrb	r3, [r7, #23]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800115a:	2b02      	cmp	r3, #2
 800115c:	d005      	beq.n	800116a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2204      	movs	r2, #4
 8001162:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e051      	b.n	800120e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 020e 	bic.w	r2, r2, #14
 8001178:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0201 	bic.w	r2, r2, #1
 8001188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a22      	ldr	r2, [pc, #136]	; (8001218 <HAL_DMA_Abort_IT+0xd0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d029      	beq.n	80011e8 <HAL_DMA_Abort_IT+0xa0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a20      	ldr	r2, [pc, #128]	; (800121c <HAL_DMA_Abort_IT+0xd4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d022      	beq.n	80011e4 <HAL_DMA_Abort_IT+0x9c>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_DMA_Abort_IT+0xd8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d01a      	beq.n	80011de <HAL_DMA_Abort_IT+0x96>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_DMA_Abort_IT+0xdc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d012      	beq.n	80011d8 <HAL_DMA_Abort_IT+0x90>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <HAL_DMA_Abort_IT+0xe0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d00a      	beq.n	80011d2 <HAL_DMA_Abort_IT+0x8a>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1a      	ldr	r2, [pc, #104]	; (800122c <HAL_DMA_Abort_IT+0xe4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d102      	bne.n	80011cc <HAL_DMA_Abort_IT+0x84>
 80011c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011ca:	e00e      	b.n	80011ea <HAL_DMA_Abort_IT+0xa2>
 80011cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011d0:	e00b      	b.n	80011ea <HAL_DMA_Abort_IT+0xa2>
 80011d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d6:	e008      	b.n	80011ea <HAL_DMA_Abort_IT+0xa2>
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	e005      	b.n	80011ea <HAL_DMA_Abort_IT+0xa2>
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	e002      	b.n	80011ea <HAL_DMA_Abort_IT+0xa2>
 80011e4:	2310      	movs	r3, #16
 80011e6:	e000      	b.n	80011ea <HAL_DMA_Abort_IT+0xa2>
 80011e8:	2301      	movs	r3, #1
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_DMA_Abort_IT+0xe8>)
 80011ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4798      	blx	r3
    } 
  }
  return status;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020008 	.word	0x40020008
 800121c:	4002001c 	.word	0x4002001c
 8001220:	40020030 	.word	0x40020030
 8001224:	40020044 	.word	0x40020044
 8001228:	40020058 	.word	0x40020058
 800122c:	4002006c 	.word	0x4002006c
 8001230:	40020000 	.word	0x40020000

08001234 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	2204      	movs	r2, #4
 8001252:	409a      	lsls	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d04f      	beq.n	80012fc <HAL_DMA_IRQHandler+0xc8>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	2b00      	cmp	r3, #0
 8001264:	d04a      	beq.n	80012fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0320 	and.w	r3, r3, #32
 8001270:	2b00      	cmp	r3, #0
 8001272:	d107      	bne.n	8001284 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0204 	bic.w	r2, r2, #4
 8001282:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a66      	ldr	r2, [pc, #408]	; (8001424 <HAL_DMA_IRQHandler+0x1f0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d029      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xae>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a65      	ldr	r2, [pc, #404]	; (8001428 <HAL_DMA_IRQHandler+0x1f4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d022      	beq.n	80012de <HAL_DMA_IRQHandler+0xaa>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a63      	ldr	r2, [pc, #396]	; (800142c <HAL_DMA_IRQHandler+0x1f8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01a      	beq.n	80012d8 <HAL_DMA_IRQHandler+0xa4>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a62      	ldr	r2, [pc, #392]	; (8001430 <HAL_DMA_IRQHandler+0x1fc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d012      	beq.n	80012d2 <HAL_DMA_IRQHandler+0x9e>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a60      	ldr	r2, [pc, #384]	; (8001434 <HAL_DMA_IRQHandler+0x200>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00a      	beq.n	80012cc <HAL_DMA_IRQHandler+0x98>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a5f      	ldr	r2, [pc, #380]	; (8001438 <HAL_DMA_IRQHandler+0x204>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d102      	bne.n	80012c6 <HAL_DMA_IRQHandler+0x92>
 80012c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c4:	e00e      	b.n	80012e4 <HAL_DMA_IRQHandler+0xb0>
 80012c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012ca:	e00b      	b.n	80012e4 <HAL_DMA_IRQHandler+0xb0>
 80012cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012d0:	e008      	b.n	80012e4 <HAL_DMA_IRQHandler+0xb0>
 80012d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012d6:	e005      	b.n	80012e4 <HAL_DMA_IRQHandler+0xb0>
 80012d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012dc:	e002      	b.n	80012e4 <HAL_DMA_IRQHandler+0xb0>
 80012de:	2340      	movs	r3, #64	; 0x40
 80012e0:	e000      	b.n	80012e4 <HAL_DMA_IRQHandler+0xb0>
 80012e2:	2304      	movs	r3, #4
 80012e4:	4a55      	ldr	r2, [pc, #340]	; (800143c <HAL_DMA_IRQHandler+0x208>)
 80012e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 8094 	beq.w	800141a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012fa:	e08e      	b.n	800141a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	2202      	movs	r2, #2
 8001302:	409a      	lsls	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d056      	beq.n	80013ba <HAL_DMA_IRQHandler+0x186>
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d051      	beq.n	80013ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0320 	and.w	r3, r3, #32
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10b      	bne.n	800133c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 020a 	bic.w	r2, r2, #10
 8001332:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a38      	ldr	r2, [pc, #224]	; (8001424 <HAL_DMA_IRQHandler+0x1f0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d029      	beq.n	800139a <HAL_DMA_IRQHandler+0x166>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a37      	ldr	r2, [pc, #220]	; (8001428 <HAL_DMA_IRQHandler+0x1f4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d022      	beq.n	8001396 <HAL_DMA_IRQHandler+0x162>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a35      	ldr	r2, [pc, #212]	; (800142c <HAL_DMA_IRQHandler+0x1f8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d01a      	beq.n	8001390 <HAL_DMA_IRQHandler+0x15c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a34      	ldr	r2, [pc, #208]	; (8001430 <HAL_DMA_IRQHandler+0x1fc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d012      	beq.n	800138a <HAL_DMA_IRQHandler+0x156>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_DMA_IRQHandler+0x200>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00a      	beq.n	8001384 <HAL_DMA_IRQHandler+0x150>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a31      	ldr	r2, [pc, #196]	; (8001438 <HAL_DMA_IRQHandler+0x204>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d102      	bne.n	800137e <HAL_DMA_IRQHandler+0x14a>
 8001378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800137c:	e00e      	b.n	800139c <HAL_DMA_IRQHandler+0x168>
 800137e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001382:	e00b      	b.n	800139c <HAL_DMA_IRQHandler+0x168>
 8001384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001388:	e008      	b.n	800139c <HAL_DMA_IRQHandler+0x168>
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	e005      	b.n	800139c <HAL_DMA_IRQHandler+0x168>
 8001390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001394:	e002      	b.n	800139c <HAL_DMA_IRQHandler+0x168>
 8001396:	2320      	movs	r3, #32
 8001398:	e000      	b.n	800139c <HAL_DMA_IRQHandler+0x168>
 800139a:	2302      	movs	r3, #2
 800139c:	4a27      	ldr	r2, [pc, #156]	; (800143c <HAL_DMA_IRQHandler+0x208>)
 800139e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d034      	beq.n	800141a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013b8:	e02f      	b.n	800141a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	2208      	movs	r2, #8
 80013c0:	409a      	lsls	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d028      	beq.n	800141c <HAL_DMA_IRQHandler+0x1e8>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d023      	beq.n	800141c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 020e 	bic.w	r2, r2, #14
 80013e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ec:	2101      	movs	r1, #1
 80013ee:	fa01 f202 	lsl.w	r2, r1, r2
 80013f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	4798      	blx	r3
    }
  }
  return;
 800141a:	bf00      	nop
 800141c:	bf00      	nop
}
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40020008 	.word	0x40020008
 8001428:	4002001c 	.word	0x4002001c
 800142c:	40020030 	.word	0x40020030
 8001430:	40020044 	.word	0x40020044
 8001434:	40020058 	.word	0x40020058
 8001438:	4002006c 	.word	0x4002006c
 800143c:	40020000 	.word	0x40020000

08001440 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f202 	lsl.w	r2, r1, r2
 800145c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b10      	cmp	r3, #16
 800146c:	d108      	bne.n	8001480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800147e:	e007      	b.n	8001490 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	60da      	str	r2, [r3, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b08b      	sub	sp, #44	; 0x2c
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e127      	b.n	8001700 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b0:	2201      	movs	r2, #1
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8116 	bne.w	80016fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b12      	cmp	r3, #18
 80014d4:	d034      	beq.n	8001540 <HAL_GPIO_Init+0xa4>
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d80d      	bhi.n	80014f6 <HAL_GPIO_Init+0x5a>
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d02b      	beq.n	8001536 <HAL_GPIO_Init+0x9a>
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d804      	bhi.n	80014ec <HAL_GPIO_Init+0x50>
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d031      	beq.n	800154a <HAL_GPIO_Init+0xae>
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d01c      	beq.n	8001524 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ea:	e048      	b.n	800157e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d043      	beq.n	8001578 <HAL_GPIO_Init+0xdc>
 80014f0:	2b11      	cmp	r3, #17
 80014f2:	d01b      	beq.n	800152c <HAL_GPIO_Init+0x90>
          break;
 80014f4:	e043      	b.n	800157e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014f6:	4a89      	ldr	r2, [pc, #548]	; (800171c <HAL_GPIO_Init+0x280>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d026      	beq.n	800154a <HAL_GPIO_Init+0xae>
 80014fc:	4a87      	ldr	r2, [pc, #540]	; (800171c <HAL_GPIO_Init+0x280>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d806      	bhi.n	8001510 <HAL_GPIO_Init+0x74>
 8001502:	4a87      	ldr	r2, [pc, #540]	; (8001720 <HAL_GPIO_Init+0x284>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d020      	beq.n	800154a <HAL_GPIO_Init+0xae>
 8001508:	4a86      	ldr	r2, [pc, #536]	; (8001724 <HAL_GPIO_Init+0x288>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01d      	beq.n	800154a <HAL_GPIO_Init+0xae>
          break;
 800150e:	e036      	b.n	800157e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001510:	4a85      	ldr	r2, [pc, #532]	; (8001728 <HAL_GPIO_Init+0x28c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d019      	beq.n	800154a <HAL_GPIO_Init+0xae>
 8001516:	4a85      	ldr	r2, [pc, #532]	; (800172c <HAL_GPIO_Init+0x290>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d016      	beq.n	800154a <HAL_GPIO_Init+0xae>
 800151c:	4a84      	ldr	r2, [pc, #528]	; (8001730 <HAL_GPIO_Init+0x294>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xae>
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e028      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e023      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01e      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e019      	b.n	800157e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e012      	b.n	800157e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e008      	b.n	800157e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2bff      	cmp	r3, #255	; 0xff
 8001582:	d801      	bhi.n	8001588 <HAL_GPIO_Init+0xec>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	e001      	b.n	800158c <HAL_GPIO_Init+0xf0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3304      	adds	r3, #4
 800158c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2bff      	cmp	r3, #255	; 0xff
 8001592:	d802      	bhi.n	800159a <HAL_GPIO_Init+0xfe>
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x104>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3b08      	subs	r3, #8
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	210f      	movs	r1, #15
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	401a      	ands	r2, r3
 80015b2:	6a39      	ldr	r1, [r7, #32]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	431a      	orrs	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8096 	beq.w	80016fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ce:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_GPIO_Init+0x298>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_GPIO_Init+0x298>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_GPIO_Init+0x298>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e6:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_GPIO_Init+0x29c>)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4b      	ldr	r2, [pc, #300]	; (800173c <HAL_GPIO_Init+0x2a0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x19e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4a      	ldr	r2, [pc, #296]	; (8001740 <HAL_GPIO_Init+0x2a4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x19a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a49      	ldr	r2, [pc, #292]	; (8001744 <HAL_GPIO_Init+0x2a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x196>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a48      	ldr	r2, [pc, #288]	; (8001748 <HAL_GPIO_Init+0x2ac>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x192>
 800162a:	2303      	movs	r3, #3
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 800162e:	2304      	movs	r3, #4
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 800163a:	2300      	movs	r3, #0
 800163c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164c:	493a      	ldr	r1, [pc, #232]	; (8001738 <HAL_GPIO_Init+0x29c>)
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4938      	ldr	r1, [pc, #224]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
 8001672:	e006      	b.n	8001682 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	43db      	mvns	r3, r3
 800167c:	4933      	ldr	r1, [pc, #204]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800167e:	4013      	ands	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800168e:	4b2f      	ldr	r3, [pc, #188]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	492e      	ldr	r1, [pc, #184]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4929      	ldr	r1, [pc, #164]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	4924      	ldr	r1, [pc, #144]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	491f      	ldr	r1, [pc, #124]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	491a      	ldr	r1, [pc, #104]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60cb      	str	r3, [r1, #12]
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4915      	ldr	r1, [pc, #84]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f aed0 	bne.w	80014b0 <HAL_GPIO_Init+0x14>
  }
}
 8001710:	bf00      	nop
 8001712:	372c      	adds	r7, #44	; 0x2c
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	10210000 	.word	0x10210000
 8001720:	10110000 	.word	0x10110000
 8001724:	10120000 	.word	0x10120000
 8001728:	10310000 	.word	0x10310000
 800172c:	10320000 	.word	0x10320000
 8001730:	10220000 	.word	0x10220000
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40011000 	.word	0x40011000
 8001748:	40011400 	.word	0x40011400
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800176c:	e003      	b.n	8001776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	041a      	lsls	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4013      	ands	r3, r2
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43d9      	mvns	r1, r3
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	400b      	ands	r3, r1
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	611a      	str	r2, [r3, #16]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
	...

080017b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f806 	bl	80017e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e26c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8087 	beq.w	8001926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001818:	4b92      	ldr	r3, [pc, #584]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b04      	cmp	r3, #4
 8001822:	d00c      	beq.n	800183e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001824:	4b8f      	ldr	r3, [pc, #572]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d112      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
 8001830:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d10b      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183e:	4b89      	ldr	r3, [pc, #548]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d06c      	beq.n	8001924 <HAL_RCC_OscConfig+0x12c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d168      	bne.n	8001924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e246      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x76>
 8001860:	4b80      	ldr	r3, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a7f      	ldr	r2, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e02e      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x98>
 8001876:	4b7b      	ldr	r3, [pc, #492]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7a      	ldr	r2, [pc, #488]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xbc>
 800189a:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a71      	ldr	r2, [pc, #452]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 80018b4:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6a      	ldr	r2, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a67      	ldr	r2, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fa66 	bl	8000da4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fa62 	bl	8000da4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1fa      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xe4>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fa52 	bl	8000da4 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fa4e 	bl	8000da4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1e6      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x10c>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d063      	beq.n	80019fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001932:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11c      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1ba      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	e03a      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fa07 	bl	8000da4 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fa03 	bl	8000da4 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e19b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4927      	ldr	r1, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff f9e6 	bl	8000da4 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff f9e2 	bl	8000da4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e17a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03a      	beq.n	8001a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff f9c6 	bl	8000da4 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff f9c2 	bl	8000da4 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e15a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f000 fada 	bl	8001ff4 <RCC_Delay>
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff f9ac 	bl	8000da4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4e:	e00f      	b.n	8001a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff f9a8 	bl	8000da4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d908      	bls.n	8001a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e140      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	42420000 	.word	0x42420000
 8001a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	4b9e      	ldr	r3, [pc, #632]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e9      	bne.n	8001a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80a6 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b97      	ldr	r3, [pc, #604]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b94      	ldr	r3, [pc, #592]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a93      	ldr	r2, [pc, #588]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b91      	ldr	r3, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b8e      	ldr	r3, [pc, #568]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a8a      	ldr	r2, [pc, #552]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff f969 	bl	8000da4 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff f965 	bl	8000da4 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	; 0x64
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0fd      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x312>
 8001afc:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	e02d      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x334>
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a75      	ldr	r2, [pc, #468]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	e01c      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x356>
 8001b34:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a6c      	ldr	r2, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a69      	ldr	r2, [pc, #420]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a66      	ldr	r2, [pc, #408]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b64      	ldr	r3, [pc, #400]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a63      	ldr	r2, [pc, #396]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d015      	beq.n	8001b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f919 	bl	8000da4 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff f915 	bl	8000da4 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0ab      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCC_OscConfig+0x37e>
 8001b98:	e014      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f903 	bl	8000da4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f8ff 	bl	8000da4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e095      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a47      	ldr	r2, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8081 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be0:	4b42      	ldr	r3, [pc, #264]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d061      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d146      	bne.n	8001c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f8d3 	bl	8000da4 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff f8cf 	bl	8000da4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e067      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d108      	bne.n	8001c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	492d      	ldr	r1, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a19      	ldr	r1, [r3, #32]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	4927      	ldr	r1, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f8a3 	bl	8000da4 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff f89f 	bl	8000da4 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e037      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x46a>
 8001c80:	e02f      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff f88c 	bl	8000da4 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff f888 	bl	8000da4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e020      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x498>
 8001cae:	e018      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e013      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42420060 	.word	0x42420060

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0d0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4965      	ldr	r1, [pc, #404]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d040      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e073      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4936      	ldr	r1, [pc, #216]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7fe ffdc 	bl	8000da4 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7fe ffd8 	bl	8000da4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e053      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d210      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe ff3a 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	080043d4 	.word	0x080043d4
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b490      	push	{r4, r7}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ed4:	1d3c      	adds	r4, r7, #4
 8001ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x46>
 8001f0a:	e02d      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	e02d      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f1e:	4413      	add	r3, r2
 8001f20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c5b      	lsrs	r3, r3, #17
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f3e:	4413      	add	r3, r2
 8001f40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4a:	fb02 f203 	mul.w	r2, r2, r3
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	e004      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	623b      	str	r3, [r7, #32]
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f6a:	623b      	str	r3, [r7, #32]
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc90      	pop	{r4, r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	08004338 	.word	0x08004338
 8001f80:	08004348 	.word	0x08004348
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	f7ff fff2 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fac:	4601      	mov	r1, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4a03      	ldr	r2, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	080043e4 	.word	0x080043e4

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4601      	mov	r1, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	0adb      	lsrs	r3, r3, #11
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	080043e4 	.word	0x080043e4

08001ff4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <RCC_Delay+0x34>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <RCC_Delay+0x38>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0a5b      	lsrs	r3, r3, #9
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002010:	bf00      	nop
  }
  while (Delay --);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	60fa      	str	r2, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f9      	bne.n	8002010 <RCC_Delay+0x1c>
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000000 	.word	0x20000000
 800202c:	10624dd3 	.word	0x10624dd3

08002030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e041      	b.n	80020c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fd24 	bl	8000aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f000 fa10 	bl	8002494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d122      	bne.n	800212a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d11b      	bne.n	800212a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f06f 0202 	mvn.w	r2, #2
 80020fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f9a4 	bl	800245e <HAL_TIM_IC_CaptureCallback>
 8002116:	e005      	b.n	8002124 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f997 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f9a6 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d122      	bne.n	800217e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d11b      	bne.n	800217e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f06f 0204 	mvn.w	r2, #4
 800214e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f97a 	bl	800245e <HAL_TIM_IC_CaptureCallback>
 800216a:	e005      	b.n	8002178 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f96d 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f97c 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b08      	cmp	r3, #8
 800218a:	d122      	bne.n	80021d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d11b      	bne.n	80021d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f06f 0208 	mvn.w	r2, #8
 80021a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2204      	movs	r2, #4
 80021a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f950 	bl	800245e <HAL_TIM_IC_CaptureCallback>
 80021be:	e005      	b.n	80021cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f943 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f952 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d122      	bne.n	8002226 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d11b      	bne.n	8002226 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f06f 0210 	mvn.w	r2, #16
 80021f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2208      	movs	r2, #8
 80021fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f926 	bl	800245e <HAL_TIM_IC_CaptureCallback>
 8002212:	e005      	b.n	8002220 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f919 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f928 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10e      	bne.n	8002252 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f06f 0201 	mvn.w	r2, #1
 800224a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7fe fab7 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d10e      	bne.n	800227e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d107      	bne.n	800227e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fa6a 	bl	8002752 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b40      	cmp	r3, #64	; 0x40
 800228a:	d10e      	bne.n	80022aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d107      	bne.n	80022aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f8ec 	bl	8002482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d10e      	bne.n	80022d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d107      	bne.n	80022d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f06f 0220 	mvn.w	r2, #32
 80022ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fa35 	bl	8002740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_ConfigClockSource+0x18>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0a6      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x166>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002314:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800231c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d067      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x120>
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d80b      	bhi.n	800234a <HAL_TIM_ConfigClockSource+0x6c>
 8002332:	2b10      	cmp	r3, #16
 8002334:	d073      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x140>
 8002336:	2b10      	cmp	r3, #16
 8002338:	d802      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x62>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d06f      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800233e:	e078      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002340:	2b20      	cmp	r3, #32
 8002342:	d06c      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x140>
 8002344:	2b30      	cmp	r3, #48	; 0x30
 8002346:	d06a      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002348:	e073      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800234a:	2b70      	cmp	r3, #112	; 0x70
 800234c:	d00d      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x8c>
 800234e:	2b70      	cmp	r3, #112	; 0x70
 8002350:	d804      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x7e>
 8002352:	2b50      	cmp	r3, #80	; 0x50
 8002354:	d033      	beq.n	80023be <HAL_TIM_ConfigClockSource+0xe0>
 8002356:	2b60      	cmp	r3, #96	; 0x60
 8002358:	d041      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x100>
      break;
 800235a:	e06a      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800235c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002360:	d066      	beq.n	8002430 <HAL_TIM_ConfigClockSource+0x152>
 8002362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002366:	d017      	beq.n	8002398 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002368:	e063      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f000 f964 	bl	8002646 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800238c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	609a      	str	r2, [r3, #8]
      break;
 8002396:	e04c      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6899      	ldr	r1, [r3, #8]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f000 f94d 	bl	8002646 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ba:	609a      	str	r2, [r3, #8]
      break;
 80023bc:	e039      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f000 f8c4 	bl	8002558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2150      	movs	r1, #80	; 0x50
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f91b 	bl	8002612 <TIM_ITRx_SetConfig>
      break;
 80023dc:	e029      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f000 f8e2 	bl	80025b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2160      	movs	r1, #96	; 0x60
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f90b 	bl	8002612 <TIM_ITRx_SetConfig>
      break;
 80023fc:	e019      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	461a      	mov	r2, r3
 800240c:	f000 f8a4 	bl	8002558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f8fb 	bl	8002612 <TIM_ITRx_SetConfig>
      break;
 800241c:	e009      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f000 f8f2 	bl	8002612 <TIM_ITRx_SetConfig>
        break;
 800242e:	e000      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002430:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a29      	ldr	r2, [pc, #164]	; (800254c <TIM_Base_SetConfig+0xb8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00b      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b2:	d007      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a26      	ldr	r2, [pc, #152]	; (8002550 <TIM_Base_SetConfig+0xbc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a25      	ldr	r2, [pc, #148]	; (8002554 <TIM_Base_SetConfig+0xc0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d108      	bne.n	80024d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	; (800254c <TIM_Base_SetConfig+0xb8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00b      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d007      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a19      	ldr	r2, [pc, #100]	; (8002550 <TIM_Base_SetConfig+0xbc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <TIM_Base_SetConfig+0xc0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d108      	bne.n	8002508 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <TIM_Base_SetConfig+0xb8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d103      	bne.n	800253c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	615a      	str	r2, [r3, #20]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40000400 	.word	0x40000400
 8002554:	40000800 	.word	0x40000800

08002558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f023 0201 	bic.w	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f023 030a 	bic.w	r3, r3, #10
 8002594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	621a      	str	r2, [r3, #32]
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 0210 	bic.w	r2, r3, #16
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	031b      	lsls	r3, r3, #12
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	621a      	str	r2, [r3, #32]
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	f043 0307 	orr.w	r3, r3, #7
 8002634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002646:	b480      	push	{r7}
 8002648:	b087      	sub	sp, #28
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002660:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	021a      	lsls	r2, r3, #8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	431a      	orrs	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4313      	orrs	r3, r2
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002698:	2302      	movs	r3, #2
 800269a:	e046      	b.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d009      	beq.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a10      	ldr	r2, [pc, #64]	; (800273c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10c      	bne.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4313      	orrs	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40000400 	.word	0x40000400
 800273c:	40000800 	.word	0x40000800

08002740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e03f      	b.n	80027f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe f9f2 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	; 0x24
 8002794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fc29 	bl	8003000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b20      	cmp	r3, #32
 8002818:	d153      	bne.n	80028c2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_UART_Transmit_DMA+0x26>
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e04c      	b.n	80028c4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_UART_Transmit_DMA+0x38>
 8002834:	2302      	movs	r3, #2
 8002836:	e045      	b.n	80028c4 <HAL_UART_Transmit_DMA+0xc4>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	88fa      	ldrh	r2, [r7, #6]
 800284a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2221      	movs	r2, #33	; 0x21
 800285c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_UART_Transmit_DMA+0xcc>)
 8002866:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_UART_Transmit_DMA+0xd0>)
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_UART_Transmit_DMA+0xd4>)
 8002876:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	2200      	movs	r2, #0
 800287e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3304      	adds	r3, #4
 8002894:	461a      	mov	r2, r3
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	f7fe fbf6 	bl	8001088 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028bc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	08002c21 	.word	0x08002c21
 80028d0:	08002c73 	.word	0x08002c73
 80028d4:	08002d13 	.word	0x08002d13

080028d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d166      	bne.n	80029c0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_UART_Receive_DMA+0x26>
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e05f      	b.n	80029c2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_UART_Receive_DMA+0x38>
 800290c:	2302      	movs	r3, #2
 800290e:	e058      	b.n	80029c2 <HAL_UART_Receive_DMA+0xea>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2222      	movs	r2, #34	; 0x22
 800292e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002936:	4a25      	ldr	r2, [pc, #148]	; (80029cc <HAL_UART_Receive_DMA+0xf4>)
 8002938:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	4a24      	ldr	r2, [pc, #144]	; (80029d0 <HAL_UART_Receive_DMA+0xf8>)
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	4a23      	ldr	r2, [pc, #140]	; (80029d4 <HAL_UART_Receive_DMA+0xfc>)
 8002948:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	2200      	movs	r2, #0
 8002950:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	f7fe fb8d 	bl	8001088 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ba:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	08002c8f 	.word	0x08002c8f
 80029d0:	08002cf7 	.word	0x08002cf7
 80029d4:	08002d13 	.word	0x08002d13

080029d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10d      	bne.n	8002a2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_UART_IRQHandler+0x52>
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa6c 	bl	8002f00 <UART_Receive_IT>
      return;
 8002a28:	e0d1      	b.n	8002bce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80b0 	beq.w	8002b92 <HAL_UART_IRQHandler+0x1ba>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_UART_IRQHandler+0x70>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80a5 	beq.w	8002b92 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_UART_IRQHandler+0x90>
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_UART_IRQHandler+0xb0>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a80:	f043 0202 	orr.w	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_UART_IRQHandler+0xd0>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	f043 0204 	orr.w	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00f      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xfa>
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <HAL_UART_IRQHandler+0xee>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	f043 0208 	orr.w	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d078      	beq.n	8002bcc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_UART_IRQHandler+0x11c>
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa06 	bl	8002f00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <HAL_UART_IRQHandler+0x144>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d031      	beq.n	8002b80 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f957 	bl	8002dd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d023      	beq.n	8002b78 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <HAL_UART_IRQHandler+0x1fc>)
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe faf7 	bl	8001148 <HAL_DMA_Abort_IT>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d016      	beq.n	8002b8e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6e:	e00e      	b.n	8002b8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f84c 	bl	8002c0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b76:	e00a      	b.n	8002b8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f848 	bl	8002c0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7e:	e006      	b.n	8002b8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f844 	bl	8002c0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b8c:	e01e      	b.n	8002bcc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8e:	bf00      	nop
    return;
 8002b90:	e01c      	b.n	8002bcc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_UART_IRQHandler+0x1d6>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f943 	bl	8002e32 <UART_Transmit_IT>
    return;
 8002bac:	e00f      	b.n	8002bce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_UART_IRQHandler+0x1f6>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f984 	bl	8002ed0 <UART_EndTransmit_IT>
    return;
 8002bc8:	bf00      	nop
 8002bca:	e000      	b.n	8002bce <HAL_UART_IRQHandler+0x1f6>
    return;
 8002bcc:	bf00      	nop
  }
}
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	08002e0b 	.word	0x08002e0b

08002bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d113      	bne.n	8002c64 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c50:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c60:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c62:	e002      	b.n	8002c6a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff ffb7 	bl	8002bd8 <HAL_UART_TxCpltCallback>
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7ff ffb2 	bl	8002bea <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d11e      	bne.n	8002ce8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cbe:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cde:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7fd fd79 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff ff79 	bl	8002bfc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b21      	cmp	r3, #33	; 0x21
 8002d44:	d108      	bne.n	8002d58 <UART_DMAError+0x46>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d52:	68b8      	ldr	r0, [r7, #8]
 8002d54:	f000 f827 	bl	8002da6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf14      	ite	ne
 8002d66:	2301      	movne	r3, #1
 8002d68:	2300      	moveq	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b22      	cmp	r3, #34	; 0x22
 8002d78:	d108      	bne.n	8002d8c <UART_DMAError+0x7a>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d86:	68b8      	ldr	r0, [r7, #8]
 8002d88:	f000 f822 	bl	8002dd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	f043 0210 	orr.w	r2, r3, #16
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d98:	68b8      	ldr	r0, [r7, #8]
 8002d9a:	f7ff ff38 	bl	8002c0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002dbc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002de6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fef2 	bl	8002c0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b21      	cmp	r3, #33	; 0x21
 8002e44:	d13e      	bne.n	8002ec4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4e:	d114      	bne.n	8002e7a <UART_Transmit_IT+0x48>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d110      	bne.n	8002e7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	1c9a      	adds	r2, r3, #2
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	621a      	str	r2, [r3, #32]
 8002e78:	e008      	b.n	8002e8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	1c59      	adds	r1, r3, #1
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6211      	str	r1, [r2, #32]
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10f      	bne.n	8002ec0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ebe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fe71 	bl	8002bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b22      	cmp	r3, #34	; 0x22
 8002f12:	d170      	bne.n	8002ff6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1c:	d117      	bne.n	8002f4e <UART_Receive_IT+0x4e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d113      	bne.n	8002f4e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	1c9a      	adds	r2, r3, #2
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f4c:	e026      	b.n	8002f9c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d007      	beq.n	8002f72 <UART_Receive_IT+0x72>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <UART_Receive_IT+0x80>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e008      	b.n	8002f92 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d120      	bne.n	8002ff2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0220 	bic.w	r2, r2, #32
 8002fbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7fd fbf9 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e002      	b.n	8002ff8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e000      	b.n	8002ff8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
  }
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800303a:	f023 030c 	bic.w	r3, r3, #12
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	430b      	orrs	r3, r1
 8003046:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2c      	ldr	r2, [pc, #176]	; (8003114 <UART_SetConfig+0x114>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d103      	bne.n	8003070 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003068:	f7fe ffb0 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	e002      	b.n	8003076 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003070:	f7fe ff98 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8003074:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009a      	lsls	r2, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	4a22      	ldr	r2, [pc, #136]	; (8003118 <UART_SetConfig+0x118>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	0119      	lsls	r1, r3, #4
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	009a      	lsls	r2, r3, #2
 80030a0:	441a      	add	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <UART_SetConfig+0x118>)
 80030ae:	fba3 0302 	umull	r0, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	2064      	movs	r0, #100	; 0x64
 80030b6:	fb00 f303 	mul.w	r3, r0, r3
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	3332      	adds	r3, #50	; 0x32
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <UART_SetConfig+0x118>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030cc:	4419      	add	r1, r3
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009a      	lsls	r2, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <UART_SetConfig+0x118>)
 80030e6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2064      	movs	r0, #100	; 0x64
 80030ee:	fb00 f303 	mul.w	r3, r0, r3
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	3332      	adds	r3, #50	; 0x32
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <UART_SetConfig+0x118>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	440a      	add	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40013800 	.word	0x40013800
 8003118:	51eb851f 	.word	0x51eb851f

0800311c <convertToStucture>:
#include <string.h>
#include<ctype.h>
#include<stdlib.h>
#include<main.h>
#include<stm32f1xx.h>
void convertToStucture(uint8_t *msg, struct List **prog) {
 800311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311e:	b0a7      	sub	sp, #156	; 0x9c
 8003120:	af0a      	add	r7, sp, #40	; 0x28
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
	uint8_t buffor[10];
	uint8_t i = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	Subroutine tempData;
	static uint8_t ID = 0;
	//wypelnienie tablicy name[] i heatingCycle zerami
	for (int i = 0; i < sizeof(tempData.name); i++) {
 800312c:	2300      	movs	r3, #0
 800312e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003130:	e008      	b.n	8003144 <convertToStucture+0x28>
		tempData.name[i] = 0;
 8003132:	f107 0211 	add.w	r2, r7, #17
 8003136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003138:	4413      	add	r3, r2
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tempData.name); i++) {
 800313e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003140:	3301      	adds	r3, #1
 8003142:	66bb      	str	r3, [r7, #104]	; 0x68
 8003144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003146:	2b13      	cmp	r3, #19
 8003148:	d9f3      	bls.n	8003132 <convertToStucture+0x16>
	}
	for (int i = 0; i < 5; i++)
 800314a:	2300      	movs	r3, #0
 800314c:	667b      	str	r3, [r7, #100]	; 0x64
 800314e:	e015      	b.n	800317c <convertToStucture+0x60>
		for (int j = 0; j < 2; j++)
 8003150:	2300      	movs	r3, #0
 8003152:	663b      	str	r3, [r7, #96]	; 0x60
 8003154:	e00c      	b.n	8003170 <convertToStucture+0x54>
			tempData.heatingCycle[i][j] = 0;
 8003156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800315e:	441a      	add	r2, r3
 8003160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003162:	4413      	add	r3, r2
 8003164:	3b4b      	subs	r3, #75	; 0x4b
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 2; j++)
 800316a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800316c:	3301      	adds	r3, #1
 800316e:	663b      	str	r3, [r7, #96]	; 0x60
 8003170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003172:	2b01      	cmp	r3, #1
 8003174:	ddef      	ble.n	8003156 <convertToStucture+0x3a>
	for (int i = 0; i < 5; i++)
 8003176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003178:	3301      	adds	r3, #1
 800317a:	667b      	str	r3, [r7, #100]	; 0x64
 800317c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317e:	2b04      	cmp	r3, #4
 8003180:	dde6      	ble.n	8003150 <convertToStucture+0x34>

	//przewin do ' ' i pobierz komendę do buffora, aby ją porównać
	while ((buffor[i++] = *msg++) != ' ')
 8003182:	bf00      	nop
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800318e:	1c51      	adds	r1, r2, #1
 8003190:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8003194:	7819      	ldrb	r1, [r3, #0]
 8003196:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800319a:	4413      	add	r3, r2
 800319c:	f803 1c2c 	strb.w	r1, [r3, #-44]
 80031a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031a4:	4413      	add	r3, r2
 80031a6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d1ea      	bne.n	8003184 <convertToStucture+0x68>
		;
	//-----------odszyfrowanie komend--------------
	if (strncmp((char*) buffor, "NEW", 3) == 0) { //------------NEW---------
 80031ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031b2:	2203      	movs	r2, #3
 80031b4:	4999      	ldr	r1, [pc, #612]	; (800341c <convertToStucture+0x300>)
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fcc5 	bl	8003b46 <strncmp>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d15a      	bne.n	8003278 <convertToStucture+0x15c>
		//stworzenie nowego programu na liscie

		msg = przewinDo(msg, '[');
 80031c2:	215b      	movs	r1, #91	; 0x5b
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f9f4 	bl	80035b2 <przewinDo>
 80031ca:	6078      	str	r0, [r7, #4]
		uint8_t i = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while (!(*(++msg) == ']'))
 80031d2:	e00c      	b.n	80031ee <convertToStucture+0xd2>
			tempData.name[i++] = *msg; // tymczasowa nazwa
 80031d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80031de:	4619      	mov	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031e8:	440b      	add	r3, r1
 80031ea:	f803 2c5f 	strb.w	r2, [r3, #-95]
		while (!(*(++msg) == ']'))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3301      	adds	r3, #1
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b5d      	cmp	r3, #93	; 0x5d
 80031fa:	d1eb      	bne.n	80031d4 <convertToStucture+0xb8>
//----------odszyfrowanie temperatur----------
		for (uint8_t i = 0; i < 5; i++) {
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8003202:	e00d      	b.n	8003220 <convertToStucture+0x104>
			msg = readTemperature(msg, &tempData, i);
 8003204:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003208:	f107 0310 	add.w	r3, r7, #16
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f9e3 	bl	80035da <readTemperature>
 8003214:	6078      	str	r0, [r7, #4]
		for (uint8_t i = 0; i < 5; i++) {
 8003216:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800321a:	3301      	adds	r3, #1
 800321c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8003220:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003224:	2b04      	cmp	r3, #4
 8003226:	d9ed      	bls.n	8003204 <convertToStucture+0xe8>
		}
//----------nadanie nowego ID------------
		tempData.ID = ID;
 8003228:	4b7d      	ldr	r3, [pc, #500]	; (8003420 <convertToStucture+0x304>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	743b      	strb	r3, [r7, #16]
		ID++;
 800322e:	4b7c      	ldr	r3, [pc, #496]	; (8003420 <convertToStucture+0x304>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4b7a      	ldr	r3, [pc, #488]	; (8003420 <convertToStucture+0x304>)
 8003238:	701a      	strb	r2, [r3, #0]
		push_front(prog, tempData);
 800323a:	466d      	mov	r5, sp
 800323c:	f107 0418 	add.w	r4, r7, #24
 8003240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800324c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003250:	f107 0310 	add.w	r3, r7, #16
 8003254:	cb0c      	ldmia	r3, {r2, r3}
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f000 fa64 	bl	8003724 <push_front>
		(*prog)->data = tempData;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461d      	mov	r5, r3
 8003262:	f107 0410 	add.w	r4, r7, #16
 8003266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003272:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003276:	e0c7      	b.n	8003408 <convertToStucture+0x2ec>
	} else if (strncmp((char*) buffor, "LIST", 4) == 0) { //------------LIST--------------
 8003278:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800327c:	2204      	movs	r2, #4
 800327e:	4969      	ldr	r1, [pc, #420]	; (8003424 <convertToStucture+0x308>)
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fc60 	bl	8003b46 <strncmp>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <convertToStucture+0x17c>
		show(*prog);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fa6f 	bl	8003774 <show>
 8003296:	e0b7      	b.n	8003408 <convertToStucture+0x2ec>
	} else if (strncmp((char*) buffor, "READ", 4) == 0) {
 8003298:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800329c:	2204      	movs	r2, #4
 800329e:	4962      	ldr	r1, [pc, #392]	; (8003428 <convertToStucture+0x30c>)
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fc50 	bl	8003b46 <strncmp>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80ad 	beq.w	8003408 <convertToStucture+0x2ec>

	} else if (strncmp((char*) buffor, "SET", 3) == 0) { //-------------SET-------------
 80032ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032b2:	2203      	movs	r2, #3
 80032b4:	495d      	ldr	r1, [pc, #372]	; (800342c <convertToStucture+0x310>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fc45 	bl	8003b46 <strncmp>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d176      	bne.n	80033b0 <convertToStucture+0x294>
		msg = przewinDo(msg, '[');
 80032c2:	215b      	movs	r1, #91	; 0x5b
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f974 	bl	80035b2 <przewinDo>
 80032ca:	6078      	str	r0, [r7, #4]
		msg = conv(msg, &tempData.ID);
 80032cc:	f107 0310 	add.w	r3, r7, #16
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f9ea 	bl	80036ac <conv>
 80032d8:	6078      	str	r0, [r7, #4]
		msg = przewinDo(msg, '[');
 80032da:	215b      	movs	r1, #91	; 0x5b
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f968 	bl	80035b2 <przewinDo>
 80032e2:	6078      	str	r0, [r7, #4]
		uint8_t i = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		while (!(*(++msg) == ']'))
 80032ea:	e00c      	b.n	8003306 <convertToStucture+0x1ea>
			tempData.name[i++] = *msg; // tymczasowa nazwa
 80032ec:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	f887 205d 	strb.w	r2, [r7, #93]	; 0x5d
 80032f6:	4619      	mov	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003300:	440b      	add	r3, r1
 8003302:	f803 2c5f 	strb.w	r2, [r3, #-95]
		while (!(*(++msg) == ']'))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3301      	adds	r3, #1
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b5d      	cmp	r3, #93	; 0x5d
 8003312:	d1eb      	bne.n	80032ec <convertToStucture+0x1d0>
		//----------odszyfrowanie temperatur----------
		for (uint8_t i = 0; i < 5; i++) {
 8003314:	2300      	movs	r3, #0
 8003316:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800331a:	e00d      	b.n	8003338 <convertToStucture+0x21c>
			msg = readTemperature(msg, &tempData, i);
 800331c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f957 	bl	80035da <readTemperature>
 800332c:	6078      	str	r0, [r7, #4]
		for (uint8_t i = 0; i < 5; i++) {
 800332e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8003332:	3301      	adds	r3, #1
 8003334:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8003338:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800333c:	2b04      	cmp	r3, #4
 800333e:	d9ed      	bls.n	800331c <convertToStucture+0x200>
		}
		List *current = (*prog);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	65bb      	str	r3, [r7, #88]	; 0x58

		for (int i = 0; i < list_size((*prog));
 8003346:	2300      	movs	r3, #0
 8003348:	657b      	str	r3, [r7, #84]	; 0x54
 800334a:	e026      	b.n	800339a <convertToStucture+0x27e>
				i++, current = (current)->next) {
			if ((current)->data.ID == tempData.ID) {
 800334c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	7c3b      	ldrb	r3, [r7, #16]
 8003352:	429a      	cmp	r2, r3
 8003354:	d10c      	bne.n	8003370 <convertToStucture+0x254>
				(current)->data = tempData;
 8003356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003358:	461d      	mov	r5, r3
 800335a:	f107 0410 	add.w	r4, r7, #16
 800335e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003366:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800336a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				break;
 800336e:	e04b      	b.n	8003408 <convertToStucture+0x2ec>
			} else if (i == list_size(*prog) - 1)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fa7d 	bl	8003874 <list_size>
 800337a:	4603      	mov	r3, r0
 800337c:	3b01      	subs	r3, #1
 800337e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003380:	429a      	cmp	r2, r3
 8003382:	d104      	bne.n	800338e <convertToStucture+0x272>
				HAL_UART_Transmit_DMA(&huart2, "Nie ma programu o takim ID\n\r",
 8003384:	221d      	movs	r2, #29
 8003386:	492a      	ldr	r1, [pc, #168]	; (8003430 <convertToStucture+0x314>)
 8003388:	482a      	ldr	r0, [pc, #168]	; (8003434 <convertToStucture+0x318>)
 800338a:	f7ff fa39 	bl	8002800 <HAL_UART_Transmit_DMA>
				i++, current = (current)->next) {
 800338e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003390:	3301      	adds	r3, #1
 8003392:	657b      	str	r3, [r7, #84]	; 0x54
 8003394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	65bb      	str	r3, [r7, #88]	; 0x58
		for (int i = 0; i < list_size((*prog));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fa68 	bl	8003874 <list_size>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033aa:	4293      	cmp	r3, r2
 80033ac:	dbce      	blt.n	800334c <convertToStucture+0x230>
 80033ae:	e02b      	b.n	8003408 <convertToStucture+0x2ec>
						sizeof("Nie ma programu o takim ID\n\r"));

		}
		//------jeżeli nie ma takiego programu----------

	} else if (strncmp((char*) buffor, "ACTIVE", 6) == 0) { //----------ACTIVE-------------
 80033b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033b4:	2206      	movs	r2, #6
 80033b6:	4920      	ldr	r1, [pc, #128]	; (8003438 <convertToStucture+0x31c>)
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fbc4 	bl	8003b46 <strncmp>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d121      	bne.n	8003408 <convertToStucture+0x2ec>
		uint8_t tempID;
		msg = przewinDo(msg, '[');
 80033c4:	215b      	movs	r1, #91	; 0x5b
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8f3 	bl	80035b2 <przewinDo>
 80033cc:	6078      	str	r0, [r7, #4]
		msg = conv(msg, &tempID);
 80033ce:	f107 030f 	add.w	r3, r7, #15
 80033d2:	4619      	mov	r1, r3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f969 	bl	80036ac <conv>
 80033da:	6078      	str	r0, [r7, #4]
		Subroutine *p; // wskaznik do konkretnego programu, ktory bedzie aktywowany
		p = szukajID(*prog, tempID);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f829 	bl	800343c <szukajID>
 80033ea:	6538      	str	r0, [r7, #80]	; 0x50

		activeBrewing(*p);
 80033ec:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80033ee:	466d      	mov	r5, sp
 80033f0:	f106 0410 	add.w	r4, r6, #16
 80033f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80033fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003400:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003404:	f000 f83e 	bl	8003484 <activeBrewing>
	}
//--------przewin msg do konca------------
	msg = przewinDo(msg, '\0');
 8003408:	2100      	movs	r1, #0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8d1 	bl	80035b2 <przewinDo>
 8003410:	6078      	str	r0, [r7, #4]
}
 8003412:	bf00      	nop
 8003414:	3774      	adds	r7, #116	; 0x74
 8003416:	46bd      	mov	sp, r7
 8003418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800341a:	bf00      	nop
 800341c:	0800434c 	.word	0x0800434c
 8003420:	20000208 	.word	0x20000208
 8003424:	08004350 	.word	0x08004350
 8003428:	08004358 	.word	0x08004358
 800342c:	08004360 	.word	0x08004360
 8003430:	08004364 	.word	0x08004364
 8003434:	2000037c 	.word	0x2000037c
 8003438:	08004384 	.word	0x08004384

0800343c <szukajID>:
Subroutine* szukajID(List *prog, uint8_t ID) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
	List *current = prog;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < list_size(prog); i++, current = current->next) {
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	e00c      	b.n	800346c <szukajID+0x30>
		if ((prog)->data.ID == ID) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	429a      	cmp	r2, r3
 800345a:	d101      	bne.n	8003460 <szukajID+0x24>
			return &(prog)->data;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	e00d      	b.n	800347c <szukajID+0x40>
	for (int i = 0; i < list_size(prog); i++, current = current->next) {
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3301      	adds	r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fa01 	bl	8003874 <list_size>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4293      	cmp	r3, r2
 800347a:	dbea      	blt.n	8003452 <szukajID+0x16>
		}
	}
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <activeBrewing>:
void activeBrewing(Subroutine data) {
 8003484:	b084      	sub	sp, #16
 8003486:	b590      	push	{r4, r7, lr}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	f107 0418 	add.w	r4, r7, #24
 8003490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//-----pętla grzania-------
	for (int i = 0; i < 5; i++) {
 8003494:	2300      	movs	r3, #0
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e01f      	b.n	80034da <activeBrewing+0x56>
		if (data.regType == 1)
 800349a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00e      	beq.n	80034c0 <activeBrewing+0x3c>
			grzanieRegDwustawna(data.heatingCycle[i], data.hist);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3308      	adds	r3, #8
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	f107 0218 	add.w	r2, r7, #24
 80034ac:	4413      	add	r3, r2
 80034ae:	1d59      	adds	r1, r3, #5
 80034b0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80034b4:	461a      	mov	r2, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	4608      	mov	r0, r1
 80034ba:	f000 f819 	bl	80034f0 <grzanieRegDwustawna>
 80034be:	e009      	b.n	80034d4 <activeBrewing+0x50>
		else
			grzanieRegPID(data.heatingCycle[i]);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3308      	adds	r3, #8
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	f107 0218 	add.w	r2, r7, #24
 80034ca:	4413      	add	r3, r2
 80034cc:	3305      	adds	r3, #5
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f866 	bl	80035a0 <grzanieRegPID>
	for (int i = 0; i < 5; i++) {
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3301      	adds	r3, #1
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	dddc      	ble.n	800349a <activeBrewing+0x16>
	}
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80034ea:	b004      	add	sp, #16
 80034ec:	4770      	bx	lr
	...

080034f0 <grzanieRegDwustawna>:

void grzanieRegDwustawna(uint8_t *heatingCycle, double hysteresis) {
 80034f0:	b5b0      	push	{r4, r5, r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	e9c7 2300 	strd	r2, r3, [r7]
	extern bool isHeating;
	extern uint32_t startCounterTime;
	extern double measuredTemperature;
	uint32_t beginingOfHeating = startCounterTime;
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <grzanieRegDwustawna+0xa4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	617b      	str	r3, [r7, #20]

	while (beginingOfHeating <= heatingCycle[0] * 60) {
 8003502:	e037      	b.n	8003574 <grzanieRegDwustawna+0x84>
		if ((double) heatingCycle[1] <= measuredTemperature - hysteresis)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3301      	adds	r3, #1
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fc ff68 	bl	80003e0 <__aeabi_ui2d>
 8003510:	4604      	mov	r4, r0
 8003512:	460d      	mov	r5, r1
 8003514:	4b20      	ldr	r3, [pc, #128]	; (8003598 <grzanieRegDwustawna+0xa8>)
 8003516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800351a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800351e:	f7fc fe21 	bl	8000164 <__aeabi_dsub>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f7fd f83d 	bl	80005a8 <__aeabi_dcmple>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <grzanieRegDwustawna+0x4c>
			isHeating = true;
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <grzanieRegDwustawna+0xac>)
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e01b      	b.n	8003574 <grzanieRegDwustawna+0x84>
		else if ((double) heatingCycle[1] >= measuredTemperature + hysteresis)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fc ff4c 	bl	80003e0 <__aeabi_ui2d>
 8003548:	4604      	mov	r4, r0
 800354a:	460d      	mov	r5, r1
 800354c:	4b12      	ldr	r3, [pc, #72]	; (8003598 <grzanieRegDwustawna+0xa8>)
 800354e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003556:	f7fc fe07 	bl	8000168 <__adddf3>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fd f82b 	bl	80005bc <__aeabi_dcmpge>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d100      	bne.n	800356e <grzanieRegDwustawna+0x7e>
 800356c:	e002      	b.n	8003574 <grzanieRegDwustawna+0x84>
			isHeating = false;
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <grzanieRegDwustawna+0xac>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
	while (beginingOfHeating <= heatingCycle[0] * 60) {
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	461a      	mov	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	4293      	cmp	r3, r2
 8003588:	d9bc      	bls.n	8003504 <grzanieRegDwustawna+0x14>
	}
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bdb0      	pop	{r4, r5, r7, pc}
 8003592:	bf00      	nop
 8003594:	20000200 	.word	0x20000200
 8003598:	20000220 	.word	0x20000220
 800359c:	200001fc 	.word	0x200001fc

080035a0 <grzanieRegPID>:
void grzanieRegPID(uint8_t *heatingCycle){
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <przewinDo>:
uint8_t* przewinDo(uint8_t *msg, uint8_t znak) {
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70fb      	strb	r3, [r7, #3]
	while (!(*(++msg) == znak))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3301      	adds	r3, #1
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d1f7      	bne.n	80035be <przewinDo+0xc>
		;
	return msg;
 80035ce:	687b      	ldr	r3, [r7, #4]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <readTemperature>:
uint8_t* readTemperature(uint8_t *msg, Subroutine *dataTemp,
		uint8_t currentCycle) {
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
//--------jezeli faktycznieeee poprawnie uzyte----------
	if ((*msg) != '\0') {
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d04f      	beq.n	8003690 <readTemperature+0xb6>
		//-------przewiń do S------
		if (strstr((char*) msg, "S")) {
 80035f0:	2153      	movs	r1, #83	; 0x53
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fa9a 	bl	8003b2c <strchr>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d042      	beq.n	8003684 <readTemperature+0xaa>
			while ((*msg++) != 'S')
 80035fe:	bf00      	nop
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	60fa      	str	r2, [r7, #12]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b53      	cmp	r3, #83	; 0x53
 800360a:	d1f9      	bne.n	8003600 <readTemperature+0x26>
				;
			//-------PID lub dwustawna--------
			dataTemp->regType = *msg++ == 0 ? false : true;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	60fa      	str	r2, [r7, #12]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2da      	uxtb	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f883 2020 	strb.w	r2, [r3, #32]
		}
		//-------Wypełnienie cykli--------

		/*tymczasowa convna temp służy do
		 zamienienia kilkucyfrowego ciągu znaków w liczbę*/
		while (*msg != ';') {
 8003624:	e02e      	b.n	8003684 <readTemperature+0xaa>

			//-----Pobranie temperatury------
			if (*msg == 'T') {
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b54      	cmp	r3, #84	; 0x54
 800362c:	d10b      	bne.n	8003646 <readTemperature+0x6c>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][0]);
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	3308      	adds	r3, #8
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	4413      	add	r3, r2
 8003638:	3305      	adds	r3, #5
 800363a:	4619      	mov	r1, r3
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f835 	bl	80036ac <conv>
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	e01e      	b.n	8003684 <readTemperature+0xaa>

				//---------Pobranie czasu-------
			} else if (*msg == 't') {
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b74      	cmp	r3, #116	; 0x74
 800364c:	d10b      	bne.n	8003666 <readTemperature+0x8c>
				msg = conv(msg, &dataTemp->heatingCycle[currentCycle][1]);
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	3311      	adds	r3, #17
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	4413      	add	r3, r2
 8003658:	3305      	adds	r3, #5
 800365a:	4619      	mov	r1, r3
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f825 	bl	80036ac <conv>
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	e00e      	b.n	8003684 <readTemperature+0xaa>
			} else if (*msg == 'H') { //histereza
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b48      	cmp	r3, #72	; 0x48
 800366c:	d00a      	beq.n	8003684 <readTemperature+0xaa>

			} else if (*msg == 'P') {
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b50      	cmp	r3, #80	; 0x50
 8003674:	d10b      	bne.n	800368e <readTemperature+0xb4>
				msg = conv(msg, &dataTemp->pumpingTime);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	331f      	adds	r3, #31
 800367a:	4619      	mov	r1, r3
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f815 	bl	80036ac <conv>
 8003682:	60f8      	str	r0, [r7, #12]
		while (*msg != ';') {
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b3b      	cmp	r3, #59	; 0x3b
 800368a:	d1cc      	bne.n	8003626 <readTemperature+0x4c>
 800368c:	e000      	b.n	8003690 <readTemperature+0xb6>
			} else
				break;
 800368e:	bf00      	nop

		}
	}
	return (*msg) != '\0' ? ++msg : msg; //zwroc wskaznik w ostatnim polozeniu
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <readTemperature+0xc8>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3301      	adds	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	e000      	b.n	80036a4 <readTemperature+0xca>
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <conv>:
uint8_t* conv(uint8_t *msg, uint8_t *digit) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
	uint8_t temp[3] = { 'a' };
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	2100      	movs	r1, #0
 80036bc:	460a      	mov	r2, r1
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	460a      	mov	r2, r1
 80036c2:	709a      	strb	r2, [r3, #2]
 80036c4:	2361      	movs	r3, #97	; 0x61
 80036c6:	733b      	strb	r3, [r7, #12]
	uint8_t i;
	++msg;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3301      	adds	r3, #1
 80036cc:	607b      	str	r3, [r7, #4]
	for (i = 0; isdigit(*msg); i++) {
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	e00d      	b.n	80036f0 <conv+0x44>
		temp[i] = *msg++;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	7819      	ldrb	r1, [r3, #0]
 80036de:	f107 0310 	add.w	r3, r7, #16
 80036e2:	4413      	add	r3, r2
 80036e4:	460a      	mov	r2, r1
 80036e6:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (i = 0; isdigit(*msg); i++) {
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	3301      	adds	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	f000 f90e 	bl	8003910 <__locale_ctype_ptr>
 80036f4:	4602      	mov	r2, r0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	3301      	adds	r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e5      	bne.n	80036d4 <conv+0x28>
	}
	*digit = atoi((char*) temp);
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f8cd 	bl	80038ac <atoi>
 8003712:	4603      	mov	r3, r0
 8003714:	b2da      	uxtb	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	701a      	strb	r2, [r3, #0]
	return msg;
 800371a:	687b      	ldr	r3, [r7, #4]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <push_front>:
void push_front(List **head, Subroutine data) {
 8003724:	b082      	sub	sp, #8
 8003726:	b5b0      	push	{r4, r5, r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	f107 0120 	add.w	r1, r7, #32
 8003732:	e881 000c 	stmia.w	r1, {r2, r3}
	List *current;
	current = (List*) malloc(sizeof(List));
 8003736:	2038      	movs	r0, #56	; 0x38
 8003738:	f000 f8f8 	bl	800392c <malloc>
 800373c:	4603      	mov	r3, r0
 800373e:	60fb      	str	r3, [r7, #12]

	current->data = data;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	461c      	mov	r4, r3
 8003744:	f107 0520 	add.w	r5, r7, #32
 8003748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800374a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800374c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800374e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003750:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	current->next = (*head);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
	*head = current;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	601a      	str	r2, [r3, #0]
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003770:	b002      	add	sp, #8
 8003772:	4770      	bx	lr

08003774 <show>:

		current->next = (List*) malloc(sizeof(List));
		current->next->next = NULL;
	}
}
void show(List *head) {
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b08d      	sub	sp, #52	; 0x34
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
	char tekst1[] = "List is empty\n\r";
 800377c:	4b38      	ldr	r3, [pc, #224]	; (8003860 <show+0xec>)
 800377e:	f107 040c 	add.w	r4, r7, #12
 8003782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (head == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <show+0x2a>
		HAL_UART_Transmit_DMA(&huart2, tekst1, sizeof(tekst1));
 800378e:	f107 030c 	add.w	r3, r7, #12
 8003792:	2210      	movs	r2, #16
 8003794:	4619      	mov	r1, r3
 8003796:	4833      	ldr	r0, [pc, #204]	; (8003864 <show+0xf0>)
 8003798:	f7ff f832 	bl	8002800 <HAL_UART_Transmit_DMA>

		HAL_UART_Transmit_DMA(&huart2, wysylanaWiadomosc,
				strlen((char*) wysylanaWiadomosc));
		free(wysylanaWiadomosc);
	}
}
 800379c:	e05c      	b.n	8003858 <show+0xe4>
		List *current = head;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
				list_size(head) * sizeof(uint8_t)
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f866 	bl	8003874 <list_size>
 80037a8:	4603      	mov	r3, r0
 80037aa:	461a      	mov	r2, r3
						* strlen("ID: %d\n\rNazwa: %s\n\rTyp regulacji: %s\n\r")
 80037ac:	2326      	movs	r3, #38	; 0x26
 80037ae:	fb03 f302 	mul.w	r3, r3, r2
		wysylanaWiadomosc = (uint8_t*) malloc(
 80037b2:	330d      	adds	r3, #13
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f8b9 	bl	800392c <malloc>
 80037ba:	4603      	mov	r3, r0
 80037bc:	61fb      	str	r3, [r7, #28]
		uint8_t i = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if (i == 0) {
 80037c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d114      	bne.n	80037f6 <show+0x82>
						current->data.ID, current->data.name,
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	781b      	ldrb	r3, [r3, #0]
				sprintf((char*) wysylanaWiadomosc,
 80037d0:	4619      	mov	r1, r3
						current->data.ID, current->data.name,
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
						current->data.regType == 1 ? "PID" : "Dwustawna");
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f893 3020 	ldrb.w	r3, [r3, #32]
				sprintf((char*) wysylanaWiadomosc,
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <show+0x70>
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <show+0xf4>)
 80037e2:	e000      	b.n	80037e6 <show+0x72>
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <show+0xf8>)
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	460a      	mov	r2, r1
 80037ec:	4920      	ldr	r1, [pc, #128]	; (8003870 <show+0xfc>)
 80037ee:	69f8      	ldr	r0, [r7, #28]
 80037f0:	f000 f97c 	bl	8003aec <siprintf>
 80037f4:	e018      	b.n	8003828 <show+0xb4>
								+ strlen((char*) wysylanaWiadomosc),
 80037f6:	69f8      	ldr	r0, [r7, #28]
 80037f8:	f7fc fca8 	bl	800014c <strlen>
 80037fc:	4602      	mov	r2, r0
				sprintf(
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	1898      	adds	r0, r3, r2
						current->data.ID, current->data.name,
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	781b      	ldrb	r3, [r3, #0]
				sprintf(
 8003806:	4619      	mov	r1, r3
						current->data.ID, current->data.name,
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	1c5a      	adds	r2, r3, #1
						current->data.regType == 1 ? "PID" : "Dwustawna");
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	f893 3020 	ldrb.w	r3, [r3, #32]
				sprintf(
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <show+0xa6>
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <show+0xf4>)
 8003818:	e000      	b.n	800381c <show+0xa8>
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <show+0xf8>)
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	460a      	mov	r2, r1
 8003822:	4913      	ldr	r1, [pc, #76]	; (8003870 <show+0xfc>)
 8003824:	f000 f962 	bl	8003aec <siprintf>
			current = current->next;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
			i++;
 800382e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003832:	3301      	adds	r3, #1
 8003834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		} while (current != NULL);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1c2      	bne.n	80037c4 <show+0x50>
				strlen((char*) wysylanaWiadomosc));
 800383e:	69f8      	ldr	r0, [r7, #28]
 8003840:	f7fc fc84 	bl	800014c <strlen>
 8003844:	4603      	mov	r3, r0
		HAL_UART_Transmit_DMA(&huart2, wysylanaWiadomosc,
 8003846:	b29b      	uxth	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	69f9      	ldr	r1, [r7, #28]
 800384c:	4805      	ldr	r0, [pc, #20]	; (8003864 <show+0xf0>)
 800384e:	f7fe ffd7 	bl	8002800 <HAL_UART_Transmit_DMA>
		free(wysylanaWiadomosc);
 8003852:	69f8      	ldr	r0, [r7, #28]
 8003854:	f000 f872 	bl	800393c <free>
}
 8003858:	bf00      	nop
 800385a:	372c      	adds	r7, #44	; 0x2c
 800385c:	46bd      	mov	sp, r7
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	080043c4 	.word	0x080043c4
 8003864:	2000037c 	.word	0x2000037c
 8003868:	0800438c 	.word	0x0800438c
 800386c:	08004390 	.word	0x08004390
 8003870:	0800439c 	.word	0x0800439c

08003874 <list_size>:
uint16_t list_size(List *head) {
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	uint16_t counter = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	81fb      	strh	r3, [r7, #14]
	if (head == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <list_size+0x16>
		return counter;
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	e00b      	b.n	80038a2 <list_size+0x2e>
	else {
		List *current = head;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60bb      	str	r3, [r7, #8]
		do {
			counter++;
 800388e:	89fb      	ldrh	r3, [r7, #14]
 8003890:	3301      	adds	r3, #1
 8003892:	81fb      	strh	r3, [r7, #14]
			current = current->next;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	60bb      	str	r3, [r7, #8]
		} while (current != NULL);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f6      	bne.n	800388e <list_size+0x1a>
	}
	return counter;
 80038a0:	89fb      	ldrh	r3, [r7, #14]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <atoi>:
 80038ac:	220a      	movs	r2, #10
 80038ae:	2100      	movs	r1, #0
 80038b0:	f000 b9d6 	b.w	8003c60 <strtol>

080038b4 <__errno>:
 80038b4:	4b01      	ldr	r3, [pc, #4]	; (80038bc <__errno+0x8>)
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	2000000c 	.word	0x2000000c

080038c0 <__libc_init_array>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	2500      	movs	r5, #0
 80038c4:	4e0c      	ldr	r6, [pc, #48]	; (80038f8 <__libc_init_array+0x38>)
 80038c6:	4c0d      	ldr	r4, [pc, #52]	; (80038fc <__libc_init_array+0x3c>)
 80038c8:	1ba4      	subs	r4, r4, r6
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	42a5      	cmp	r5, r4
 80038ce:	d109      	bne.n	80038e4 <__libc_init_array+0x24>
 80038d0:	f000 fd26 	bl	8004320 <_init>
 80038d4:	2500      	movs	r5, #0
 80038d6:	4e0a      	ldr	r6, [pc, #40]	; (8003900 <__libc_init_array+0x40>)
 80038d8:	4c0a      	ldr	r4, [pc, #40]	; (8003904 <__libc_init_array+0x44>)
 80038da:	1ba4      	subs	r4, r4, r6
 80038dc:	10a4      	asrs	r4, r4, #2
 80038de:	42a5      	cmp	r5, r4
 80038e0:	d105      	bne.n	80038ee <__libc_init_array+0x2e>
 80038e2:	bd70      	pop	{r4, r5, r6, pc}
 80038e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038e8:	4798      	blx	r3
 80038ea:	3501      	adds	r5, #1
 80038ec:	e7ee      	b.n	80038cc <__libc_init_array+0xc>
 80038ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038f2:	4798      	blx	r3
 80038f4:	3501      	adds	r5, #1
 80038f6:	e7f2      	b.n	80038de <__libc_init_array+0x1e>
 80038f8:	0800452c 	.word	0x0800452c
 80038fc:	0800452c 	.word	0x0800452c
 8003900:	0800452c 	.word	0x0800452c
 8003904:	08004530 	.word	0x08004530

08003908 <__locale_ctype_ptr_l>:
 8003908:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800390c:	4770      	bx	lr
	...

08003910 <__locale_ctype_ptr>:
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <__locale_ctype_ptr+0x14>)
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <__locale_ctype_ptr+0x18>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf08      	it	eq
 800391c:	4613      	moveq	r3, r2
 800391e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8003922:	4770      	bx	lr
 8003924:	2000000c 	.word	0x2000000c
 8003928:	20000070 	.word	0x20000070

0800392c <malloc>:
 800392c:	4b02      	ldr	r3, [pc, #8]	; (8003938 <malloc+0xc>)
 800392e:	4601      	mov	r1, r0
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	f000 b871 	b.w	8003a18 <_malloc_r>
 8003936:	bf00      	nop
 8003938:	2000000c 	.word	0x2000000c

0800393c <free>:
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <free+0xc>)
 800393e:	4601      	mov	r1, r0
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	f000 b81d 	b.w	8003980 <_free_r>
 8003946:	bf00      	nop
 8003948:	2000000c 	.word	0x2000000c

0800394c <__ascii_mbtowc>:
 800394c:	b082      	sub	sp, #8
 800394e:	b901      	cbnz	r1, 8003952 <__ascii_mbtowc+0x6>
 8003950:	a901      	add	r1, sp, #4
 8003952:	b142      	cbz	r2, 8003966 <__ascii_mbtowc+0x1a>
 8003954:	b14b      	cbz	r3, 800396a <__ascii_mbtowc+0x1e>
 8003956:	7813      	ldrb	r3, [r2, #0]
 8003958:	600b      	str	r3, [r1, #0]
 800395a:	7812      	ldrb	r2, [r2, #0]
 800395c:	1c10      	adds	r0, r2, #0
 800395e:	bf18      	it	ne
 8003960:	2001      	movne	r0, #1
 8003962:	b002      	add	sp, #8
 8003964:	4770      	bx	lr
 8003966:	4610      	mov	r0, r2
 8003968:	e7fb      	b.n	8003962 <__ascii_mbtowc+0x16>
 800396a:	f06f 0001 	mvn.w	r0, #1
 800396e:	e7f8      	b.n	8003962 <__ascii_mbtowc+0x16>

08003970 <memset>:
 8003970:	4603      	mov	r3, r0
 8003972:	4402      	add	r2, r0
 8003974:	4293      	cmp	r3, r2
 8003976:	d100      	bne.n	800397a <memset+0xa>
 8003978:	4770      	bx	lr
 800397a:	f803 1b01 	strb.w	r1, [r3], #1
 800397e:	e7f9      	b.n	8003974 <memset+0x4>

08003980 <_free_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4605      	mov	r5, r0
 8003984:	2900      	cmp	r1, #0
 8003986:	d043      	beq.n	8003a10 <_free_r+0x90>
 8003988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800398c:	1f0c      	subs	r4, r1, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	bfb8      	it	lt
 8003992:	18e4      	addlt	r4, r4, r3
 8003994:	f000 f987 	bl	8003ca6 <__malloc_lock>
 8003998:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <_free_r+0x94>)
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	4610      	mov	r0, r2
 800399e:	b933      	cbnz	r3, 80039ae <_free_r+0x2e>
 80039a0:	6063      	str	r3, [r4, #4]
 80039a2:	6014      	str	r4, [r2, #0]
 80039a4:	4628      	mov	r0, r5
 80039a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039aa:	f000 b97d 	b.w	8003ca8 <__malloc_unlock>
 80039ae:	42a3      	cmp	r3, r4
 80039b0:	d90b      	bls.n	80039ca <_free_r+0x4a>
 80039b2:	6821      	ldr	r1, [r4, #0]
 80039b4:	1862      	adds	r2, r4, r1
 80039b6:	4293      	cmp	r3, r2
 80039b8:	bf01      	itttt	eq
 80039ba:	681a      	ldreq	r2, [r3, #0]
 80039bc:	685b      	ldreq	r3, [r3, #4]
 80039be:	1852      	addeq	r2, r2, r1
 80039c0:	6022      	streq	r2, [r4, #0]
 80039c2:	6063      	str	r3, [r4, #4]
 80039c4:	6004      	str	r4, [r0, #0]
 80039c6:	e7ed      	b.n	80039a4 <_free_r+0x24>
 80039c8:	4613      	mov	r3, r2
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	b10a      	cbz	r2, 80039d2 <_free_r+0x52>
 80039ce:	42a2      	cmp	r2, r4
 80039d0:	d9fa      	bls.n	80039c8 <_free_r+0x48>
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	1858      	adds	r0, r3, r1
 80039d6:	42a0      	cmp	r0, r4
 80039d8:	d10b      	bne.n	80039f2 <_free_r+0x72>
 80039da:	6820      	ldr	r0, [r4, #0]
 80039dc:	4401      	add	r1, r0
 80039de:	1858      	adds	r0, r3, r1
 80039e0:	4282      	cmp	r2, r0
 80039e2:	6019      	str	r1, [r3, #0]
 80039e4:	d1de      	bne.n	80039a4 <_free_r+0x24>
 80039e6:	6810      	ldr	r0, [r2, #0]
 80039e8:	6852      	ldr	r2, [r2, #4]
 80039ea:	4401      	add	r1, r0
 80039ec:	6019      	str	r1, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	e7d8      	b.n	80039a4 <_free_r+0x24>
 80039f2:	d902      	bls.n	80039fa <_free_r+0x7a>
 80039f4:	230c      	movs	r3, #12
 80039f6:	602b      	str	r3, [r5, #0]
 80039f8:	e7d4      	b.n	80039a4 <_free_r+0x24>
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	1821      	adds	r1, r4, r0
 80039fe:	428a      	cmp	r2, r1
 8003a00:	bf01      	itttt	eq
 8003a02:	6811      	ldreq	r1, [r2, #0]
 8003a04:	6852      	ldreq	r2, [r2, #4]
 8003a06:	1809      	addeq	r1, r1, r0
 8003a08:	6021      	streq	r1, [r4, #0]
 8003a0a:	6062      	str	r2, [r4, #4]
 8003a0c:	605c      	str	r4, [r3, #4]
 8003a0e:	e7c9      	b.n	80039a4 <_free_r+0x24>
 8003a10:	bd38      	pop	{r3, r4, r5, pc}
 8003a12:	bf00      	nop
 8003a14:	2000020c 	.word	0x2000020c

08003a18 <_malloc_r>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	1ccd      	adds	r5, r1, #3
 8003a1c:	f025 0503 	bic.w	r5, r5, #3
 8003a20:	3508      	adds	r5, #8
 8003a22:	2d0c      	cmp	r5, #12
 8003a24:	bf38      	it	cc
 8003a26:	250c      	movcc	r5, #12
 8003a28:	2d00      	cmp	r5, #0
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	db01      	blt.n	8003a32 <_malloc_r+0x1a>
 8003a2e:	42a9      	cmp	r1, r5
 8003a30:	d903      	bls.n	8003a3a <_malloc_r+0x22>
 8003a32:	230c      	movs	r3, #12
 8003a34:	6033      	str	r3, [r6, #0]
 8003a36:	2000      	movs	r0, #0
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
 8003a3a:	f000 f934 	bl	8003ca6 <__malloc_lock>
 8003a3e:	4a21      	ldr	r2, [pc, #132]	; (8003ac4 <_malloc_r+0xac>)
 8003a40:	6814      	ldr	r4, [r2, #0]
 8003a42:	4621      	mov	r1, r4
 8003a44:	b991      	cbnz	r1, 8003a6c <_malloc_r+0x54>
 8003a46:	4c20      	ldr	r4, [pc, #128]	; (8003ac8 <_malloc_r+0xb0>)
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	b91b      	cbnz	r3, 8003a54 <_malloc_r+0x3c>
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f000 f83d 	bl	8003acc <_sbrk_r>
 8003a52:	6020      	str	r0, [r4, #0]
 8003a54:	4629      	mov	r1, r5
 8003a56:	4630      	mov	r0, r6
 8003a58:	f000 f838 	bl	8003acc <_sbrk_r>
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d124      	bne.n	8003aaa <_malloc_r+0x92>
 8003a60:	230c      	movs	r3, #12
 8003a62:	4630      	mov	r0, r6
 8003a64:	6033      	str	r3, [r6, #0]
 8003a66:	f000 f91f 	bl	8003ca8 <__malloc_unlock>
 8003a6a:	e7e4      	b.n	8003a36 <_malloc_r+0x1e>
 8003a6c:	680b      	ldr	r3, [r1, #0]
 8003a6e:	1b5b      	subs	r3, r3, r5
 8003a70:	d418      	bmi.n	8003aa4 <_malloc_r+0x8c>
 8003a72:	2b0b      	cmp	r3, #11
 8003a74:	d90f      	bls.n	8003a96 <_malloc_r+0x7e>
 8003a76:	600b      	str	r3, [r1, #0]
 8003a78:	18cc      	adds	r4, r1, r3
 8003a7a:	50cd      	str	r5, [r1, r3]
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f000 f913 	bl	8003ca8 <__malloc_unlock>
 8003a82:	f104 000b 	add.w	r0, r4, #11
 8003a86:	1d23      	adds	r3, r4, #4
 8003a88:	f020 0007 	bic.w	r0, r0, #7
 8003a8c:	1ac3      	subs	r3, r0, r3
 8003a8e:	d0d3      	beq.n	8003a38 <_malloc_r+0x20>
 8003a90:	425a      	negs	r2, r3
 8003a92:	50e2      	str	r2, [r4, r3]
 8003a94:	e7d0      	b.n	8003a38 <_malloc_r+0x20>
 8003a96:	684b      	ldr	r3, [r1, #4]
 8003a98:	428c      	cmp	r4, r1
 8003a9a:	bf16      	itet	ne
 8003a9c:	6063      	strne	r3, [r4, #4]
 8003a9e:	6013      	streq	r3, [r2, #0]
 8003aa0:	460c      	movne	r4, r1
 8003aa2:	e7eb      	b.n	8003a7c <_malloc_r+0x64>
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	6849      	ldr	r1, [r1, #4]
 8003aa8:	e7cc      	b.n	8003a44 <_malloc_r+0x2c>
 8003aaa:	1cc4      	adds	r4, r0, #3
 8003aac:	f024 0403 	bic.w	r4, r4, #3
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d005      	beq.n	8003ac0 <_malloc_r+0xa8>
 8003ab4:	1a21      	subs	r1, r4, r0
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 f808 	bl	8003acc <_sbrk_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d0cf      	beq.n	8003a60 <_malloc_r+0x48>
 8003ac0:	6025      	str	r5, [r4, #0]
 8003ac2:	e7db      	b.n	8003a7c <_malloc_r+0x64>
 8003ac4:	2000020c 	.word	0x2000020c
 8003ac8:	20000210 	.word	0x20000210

08003acc <_sbrk_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4c05      	ldr	r4, [pc, #20]	; (8003ae8 <_sbrk_r+0x1c>)
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	6023      	str	r3, [r4, #0]
 8003ad8:	f7fc ff56 	bl	8000988 <_sbrk>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_sbrk_r+0x1a>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_sbrk_r+0x1a>
 8003ae4:	602b      	str	r3, [r5, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	200003c0 	.word	0x200003c0

08003aec <siprintf>:
 8003aec:	b40e      	push	{r1, r2, r3}
 8003aee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003af2:	b500      	push	{lr}
 8003af4:	b09c      	sub	sp, #112	; 0x70
 8003af6:	ab1d      	add	r3, sp, #116	; 0x74
 8003af8:	9002      	str	r0, [sp, #8]
 8003afa:	9006      	str	r0, [sp, #24]
 8003afc:	9107      	str	r1, [sp, #28]
 8003afe:	9104      	str	r1, [sp, #16]
 8003b00:	4808      	ldr	r0, [pc, #32]	; (8003b24 <siprintf+0x38>)
 8003b02:	4909      	ldr	r1, [pc, #36]	; (8003b28 <siprintf+0x3c>)
 8003b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b08:	9105      	str	r1, [sp, #20]
 8003b0a:	6800      	ldr	r0, [r0, #0]
 8003b0c:	a902      	add	r1, sp, #8
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	f000 f926 	bl	8003d60 <_svfiprintf_r>
 8003b14:	2200      	movs	r2, #0
 8003b16:	9b02      	ldr	r3, [sp, #8]
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	b01c      	add	sp, #112	; 0x70
 8003b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b20:	b003      	add	sp, #12
 8003b22:	4770      	bx	lr
 8003b24:	2000000c 	.word	0x2000000c
 8003b28:	ffff0208 	.word	0xffff0208

08003b2c <strchr>:
 8003b2c:	b2c9      	uxtb	r1, r1
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b34:	b11a      	cbz	r2, 8003b3e <strchr+0x12>
 8003b36:	428a      	cmp	r2, r1
 8003b38:	d1f9      	bne.n	8003b2e <strchr+0x2>
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	4770      	bx	lr
 8003b3e:	2900      	cmp	r1, #0
 8003b40:	bf18      	it	ne
 8003b42:	2300      	movne	r3, #0
 8003b44:	e7f9      	b.n	8003b3a <strchr+0xe>

08003b46 <strncmp>:
 8003b46:	b510      	push	{r4, lr}
 8003b48:	b16a      	cbz	r2, 8003b66 <strncmp+0x20>
 8003b4a:	3901      	subs	r1, #1
 8003b4c:	1884      	adds	r4, r0, r2
 8003b4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003b52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d103      	bne.n	8003b62 <strncmp+0x1c>
 8003b5a:	42a0      	cmp	r0, r4
 8003b5c:	d001      	beq.n	8003b62 <strncmp+0x1c>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f5      	bne.n	8003b4e <strncmp+0x8>
 8003b62:	1a98      	subs	r0, r3, r2
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	4610      	mov	r0, r2
 8003b68:	e7fc      	b.n	8003b64 <strncmp+0x1e>

08003b6a <_strtol_l.isra.0>:
 8003b6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6e:	4680      	mov	r8, r0
 8003b70:	4689      	mov	r9, r1
 8003b72:	4692      	mov	sl, r2
 8003b74:	461e      	mov	r6, r3
 8003b76:	460f      	mov	r7, r1
 8003b78:	463d      	mov	r5, r7
 8003b7a:	9808      	ldr	r0, [sp, #32]
 8003b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b80:	f7ff fec2 	bl	8003908 <__locale_ctype_ptr_l>
 8003b84:	4420      	add	r0, r4
 8003b86:	7843      	ldrb	r3, [r0, #1]
 8003b88:	f013 0308 	ands.w	r3, r3, #8
 8003b8c:	d132      	bne.n	8003bf4 <_strtol_l.isra.0+0x8a>
 8003b8e:	2c2d      	cmp	r4, #45	; 0x2d
 8003b90:	d132      	bne.n	8003bf8 <_strtol_l.isra.0+0x8e>
 8003b92:	2201      	movs	r2, #1
 8003b94:	787c      	ldrb	r4, [r7, #1]
 8003b96:	1cbd      	adds	r5, r7, #2
 8003b98:	2e00      	cmp	r6, #0
 8003b9a:	d05d      	beq.n	8003c58 <_strtol_l.isra.0+0xee>
 8003b9c:	2e10      	cmp	r6, #16
 8003b9e:	d109      	bne.n	8003bb4 <_strtol_l.isra.0+0x4a>
 8003ba0:	2c30      	cmp	r4, #48	; 0x30
 8003ba2:	d107      	bne.n	8003bb4 <_strtol_l.isra.0+0x4a>
 8003ba4:	782b      	ldrb	r3, [r5, #0]
 8003ba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003baa:	2b58      	cmp	r3, #88	; 0x58
 8003bac:	d14f      	bne.n	8003c4e <_strtol_l.isra.0+0xe4>
 8003bae:	2610      	movs	r6, #16
 8003bb0:	786c      	ldrb	r4, [r5, #1]
 8003bb2:	3502      	adds	r5, #2
 8003bb4:	2a00      	cmp	r2, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003bbc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003bc0:	2700      	movs	r7, #0
 8003bc2:	fbb1 fcf6 	udiv	ip, r1, r6
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003bcc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003bd0:	2b09      	cmp	r3, #9
 8003bd2:	d817      	bhi.n	8003c04 <_strtol_l.isra.0+0x9a>
 8003bd4:	461c      	mov	r4, r3
 8003bd6:	42a6      	cmp	r6, r4
 8003bd8:	dd23      	ble.n	8003c22 <_strtol_l.isra.0+0xb8>
 8003bda:	1c7b      	adds	r3, r7, #1
 8003bdc:	d007      	beq.n	8003bee <_strtol_l.isra.0+0x84>
 8003bde:	4584      	cmp	ip, r0
 8003be0:	d31c      	bcc.n	8003c1c <_strtol_l.isra.0+0xb2>
 8003be2:	d101      	bne.n	8003be8 <_strtol_l.isra.0+0x7e>
 8003be4:	45a6      	cmp	lr, r4
 8003be6:	db19      	blt.n	8003c1c <_strtol_l.isra.0+0xb2>
 8003be8:	2701      	movs	r7, #1
 8003bea:	fb00 4006 	mla	r0, r0, r6, r4
 8003bee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bf2:	e7eb      	b.n	8003bcc <_strtol_l.isra.0+0x62>
 8003bf4:	462f      	mov	r7, r5
 8003bf6:	e7bf      	b.n	8003b78 <_strtol_l.isra.0+0xe>
 8003bf8:	2c2b      	cmp	r4, #43	; 0x2b
 8003bfa:	bf04      	itt	eq
 8003bfc:	1cbd      	addeq	r5, r7, #2
 8003bfe:	787c      	ldrbeq	r4, [r7, #1]
 8003c00:	461a      	mov	r2, r3
 8003c02:	e7c9      	b.n	8003b98 <_strtol_l.isra.0+0x2e>
 8003c04:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003c08:	2b19      	cmp	r3, #25
 8003c0a:	d801      	bhi.n	8003c10 <_strtol_l.isra.0+0xa6>
 8003c0c:	3c37      	subs	r4, #55	; 0x37
 8003c0e:	e7e2      	b.n	8003bd6 <_strtol_l.isra.0+0x6c>
 8003c10:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003c14:	2b19      	cmp	r3, #25
 8003c16:	d804      	bhi.n	8003c22 <_strtol_l.isra.0+0xb8>
 8003c18:	3c57      	subs	r4, #87	; 0x57
 8003c1a:	e7dc      	b.n	8003bd6 <_strtol_l.isra.0+0x6c>
 8003c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8003c20:	e7e5      	b.n	8003bee <_strtol_l.isra.0+0x84>
 8003c22:	1c7b      	adds	r3, r7, #1
 8003c24:	d108      	bne.n	8003c38 <_strtol_l.isra.0+0xce>
 8003c26:	2322      	movs	r3, #34	; 0x22
 8003c28:	4608      	mov	r0, r1
 8003c2a:	f8c8 3000 	str.w	r3, [r8]
 8003c2e:	f1ba 0f00 	cmp.w	sl, #0
 8003c32:	d107      	bne.n	8003c44 <_strtol_l.isra.0+0xda>
 8003c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c38:	b102      	cbz	r2, 8003c3c <_strtol_l.isra.0+0xd2>
 8003c3a:	4240      	negs	r0, r0
 8003c3c:	f1ba 0f00 	cmp.w	sl, #0
 8003c40:	d0f8      	beq.n	8003c34 <_strtol_l.isra.0+0xca>
 8003c42:	b10f      	cbz	r7, 8003c48 <_strtol_l.isra.0+0xde>
 8003c44:	f105 39ff 	add.w	r9, r5, #4294967295
 8003c48:	f8ca 9000 	str.w	r9, [sl]
 8003c4c:	e7f2      	b.n	8003c34 <_strtol_l.isra.0+0xca>
 8003c4e:	2430      	movs	r4, #48	; 0x30
 8003c50:	2e00      	cmp	r6, #0
 8003c52:	d1af      	bne.n	8003bb4 <_strtol_l.isra.0+0x4a>
 8003c54:	2608      	movs	r6, #8
 8003c56:	e7ad      	b.n	8003bb4 <_strtol_l.isra.0+0x4a>
 8003c58:	2c30      	cmp	r4, #48	; 0x30
 8003c5a:	d0a3      	beq.n	8003ba4 <_strtol_l.isra.0+0x3a>
 8003c5c:	260a      	movs	r6, #10
 8003c5e:	e7a9      	b.n	8003bb4 <_strtol_l.isra.0+0x4a>

08003c60 <strtol>:
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <strtol+0x24>)
 8003c62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c64:	681c      	ldr	r4, [r3, #0]
 8003c66:	4d08      	ldr	r5, [pc, #32]	; (8003c88 <strtol+0x28>)
 8003c68:	6a23      	ldr	r3, [r4, #32]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf08      	it	eq
 8003c6e:	462b      	moveq	r3, r5
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	460a      	mov	r2, r1
 8003c76:	4601      	mov	r1, r0
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7ff ff76 	bl	8003b6a <_strtol_l.isra.0>
 8003c7e:	b003      	add	sp, #12
 8003c80:	bd30      	pop	{r4, r5, pc}
 8003c82:	bf00      	nop
 8003c84:	2000000c 	.word	0x2000000c
 8003c88:	20000070 	.word	0x20000070

08003c8c <__ascii_wctomb>:
 8003c8c:	b149      	cbz	r1, 8003ca2 <__ascii_wctomb+0x16>
 8003c8e:	2aff      	cmp	r2, #255	; 0xff
 8003c90:	bf8b      	itete	hi
 8003c92:	238a      	movhi	r3, #138	; 0x8a
 8003c94:	700a      	strbls	r2, [r1, #0]
 8003c96:	6003      	strhi	r3, [r0, #0]
 8003c98:	2001      	movls	r0, #1
 8003c9a:	bf88      	it	hi
 8003c9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003ca0:	4770      	bx	lr
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	4770      	bx	lr

08003ca6 <__malloc_lock>:
 8003ca6:	4770      	bx	lr

08003ca8 <__malloc_unlock>:
 8003ca8:	4770      	bx	lr

08003caa <__ssputs_r>:
 8003caa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cae:	688e      	ldr	r6, [r1, #8]
 8003cb0:	4682      	mov	sl, r0
 8003cb2:	429e      	cmp	r6, r3
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	4690      	mov	r8, r2
 8003cb8:	4699      	mov	r9, r3
 8003cba:	d837      	bhi.n	8003d2c <__ssputs_r+0x82>
 8003cbc:	898a      	ldrh	r2, [r1, #12]
 8003cbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cc2:	d031      	beq.n	8003d28 <__ssputs_r+0x7e>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	6825      	ldr	r5, [r4, #0]
 8003cc8:	6909      	ldr	r1, [r1, #16]
 8003cca:	1a6f      	subs	r7, r5, r1
 8003ccc:	6965      	ldr	r5, [r4, #20]
 8003cce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cd2:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cd6:	f109 0301 	add.w	r3, r9, #1
 8003cda:	443b      	add	r3, r7
 8003cdc:	429d      	cmp	r5, r3
 8003cde:	bf38      	it	cc
 8003ce0:	461d      	movcc	r5, r3
 8003ce2:	0553      	lsls	r3, r2, #21
 8003ce4:	d530      	bpl.n	8003d48 <__ssputs_r+0x9e>
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	f7ff fe96 	bl	8003a18 <_malloc_r>
 8003cec:	4606      	mov	r6, r0
 8003cee:	b950      	cbnz	r0, 8003d06 <__ssputs_r+0x5c>
 8003cf0:	230c      	movs	r3, #12
 8003cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf6:	f8ca 3000 	str.w	r3, [sl]
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d06:	463a      	mov	r2, r7
 8003d08:	6921      	ldr	r1, [r4, #16]
 8003d0a:	f000 fab7 	bl	800427c <memcpy>
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d18:	81a3      	strh	r3, [r4, #12]
 8003d1a:	6126      	str	r6, [r4, #16]
 8003d1c:	443e      	add	r6, r7
 8003d1e:	6026      	str	r6, [r4, #0]
 8003d20:	464e      	mov	r6, r9
 8003d22:	6165      	str	r5, [r4, #20]
 8003d24:	1bed      	subs	r5, r5, r7
 8003d26:	60a5      	str	r5, [r4, #8]
 8003d28:	454e      	cmp	r6, r9
 8003d2a:	d900      	bls.n	8003d2e <__ssputs_r+0x84>
 8003d2c:	464e      	mov	r6, r9
 8003d2e:	4632      	mov	r2, r6
 8003d30:	4641      	mov	r1, r8
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	f000 faad 	bl	8004292 <memmove>
 8003d38:	68a3      	ldr	r3, [r4, #8]
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	1b9b      	subs	r3, r3, r6
 8003d3e:	60a3      	str	r3, [r4, #8]
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	441e      	add	r6, r3
 8003d44:	6026      	str	r6, [r4, #0]
 8003d46:	e7dc      	b.n	8003d02 <__ssputs_r+0x58>
 8003d48:	462a      	mov	r2, r5
 8003d4a:	f000 fabb 	bl	80042c4 <_realloc_r>
 8003d4e:	4606      	mov	r6, r0
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d1e2      	bne.n	8003d1a <__ssputs_r+0x70>
 8003d54:	6921      	ldr	r1, [r4, #16]
 8003d56:	4650      	mov	r0, sl
 8003d58:	f7ff fe12 	bl	8003980 <_free_r>
 8003d5c:	e7c8      	b.n	8003cf0 <__ssputs_r+0x46>
	...

08003d60 <_svfiprintf_r>:
 8003d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d64:	461d      	mov	r5, r3
 8003d66:	898b      	ldrh	r3, [r1, #12]
 8003d68:	b09d      	sub	sp, #116	; 0x74
 8003d6a:	061f      	lsls	r7, r3, #24
 8003d6c:	4680      	mov	r8, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	4616      	mov	r6, r2
 8003d72:	d50f      	bpl.n	8003d94 <_svfiprintf_r+0x34>
 8003d74:	690b      	ldr	r3, [r1, #16]
 8003d76:	b96b      	cbnz	r3, 8003d94 <_svfiprintf_r+0x34>
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	f7ff fe4d 	bl	8003a18 <_malloc_r>
 8003d7e:	6020      	str	r0, [r4, #0]
 8003d80:	6120      	str	r0, [r4, #16]
 8003d82:	b928      	cbnz	r0, 8003d90 <_svfiprintf_r+0x30>
 8003d84:	230c      	movs	r3, #12
 8003d86:	f8c8 3000 	str.w	r3, [r8]
 8003d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8e:	e0c8      	b.n	8003f22 <_svfiprintf_r+0x1c2>
 8003d90:	2340      	movs	r3, #64	; 0x40
 8003d92:	6163      	str	r3, [r4, #20]
 8003d94:	2300      	movs	r3, #0
 8003d96:	9309      	str	r3, [sp, #36]	; 0x24
 8003d98:	2320      	movs	r3, #32
 8003d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d9e:	2330      	movs	r3, #48	; 0x30
 8003da0:	f04f 0b01 	mov.w	fp, #1
 8003da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003da8:	9503      	str	r5, [sp, #12]
 8003daa:	4637      	mov	r7, r6
 8003dac:	463d      	mov	r5, r7
 8003dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003db2:	b10b      	cbz	r3, 8003db8 <_svfiprintf_r+0x58>
 8003db4:	2b25      	cmp	r3, #37	; 0x25
 8003db6:	d13e      	bne.n	8003e36 <_svfiprintf_r+0xd6>
 8003db8:	ebb7 0a06 	subs.w	sl, r7, r6
 8003dbc:	d00b      	beq.n	8003dd6 <_svfiprintf_r+0x76>
 8003dbe:	4653      	mov	r3, sl
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	f7ff ff70 	bl	8003caa <__ssputs_r>
 8003dca:	3001      	adds	r0, #1
 8003dcc:	f000 80a4 	beq.w	8003f18 <_svfiprintf_r+0x1b8>
 8003dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd2:	4453      	add	r3, sl
 8003dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd6:	783b      	ldrb	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 809d 	beq.w	8003f18 <_svfiprintf_r+0x1b8>
 8003dde:	2300      	movs	r3, #0
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295
 8003de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003de8:	9304      	str	r3, [sp, #16]
 8003dea:	9307      	str	r3, [sp, #28]
 8003dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003df0:	931a      	str	r3, [sp, #104]	; 0x68
 8003df2:	462f      	mov	r7, r5
 8003df4:	2205      	movs	r2, #5
 8003df6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003dfa:	4850      	ldr	r0, [pc, #320]	; (8003f3c <_svfiprintf_r+0x1dc>)
 8003dfc:	f000 fa30 	bl	8004260 <memchr>
 8003e00:	9b04      	ldr	r3, [sp, #16]
 8003e02:	b9d0      	cbnz	r0, 8003e3a <_svfiprintf_r+0xda>
 8003e04:	06d9      	lsls	r1, r3, #27
 8003e06:	bf44      	itt	mi
 8003e08:	2220      	movmi	r2, #32
 8003e0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e0e:	071a      	lsls	r2, r3, #28
 8003e10:	bf44      	itt	mi
 8003e12:	222b      	movmi	r2, #43	; 0x2b
 8003e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e18:	782a      	ldrb	r2, [r5, #0]
 8003e1a:	2a2a      	cmp	r2, #42	; 0x2a
 8003e1c:	d015      	beq.n	8003e4a <_svfiprintf_r+0xea>
 8003e1e:	462f      	mov	r7, r5
 8003e20:	2000      	movs	r0, #0
 8003e22:	250a      	movs	r5, #10
 8003e24:	9a07      	ldr	r2, [sp, #28]
 8003e26:	4639      	mov	r1, r7
 8003e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e2c:	3b30      	subs	r3, #48	; 0x30
 8003e2e:	2b09      	cmp	r3, #9
 8003e30:	d94d      	bls.n	8003ece <_svfiprintf_r+0x16e>
 8003e32:	b1b8      	cbz	r0, 8003e64 <_svfiprintf_r+0x104>
 8003e34:	e00f      	b.n	8003e56 <_svfiprintf_r+0xf6>
 8003e36:	462f      	mov	r7, r5
 8003e38:	e7b8      	b.n	8003dac <_svfiprintf_r+0x4c>
 8003e3a:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <_svfiprintf_r+0x1dc>)
 8003e3c:	463d      	mov	r5, r7
 8003e3e:	1a80      	subs	r0, r0, r2
 8003e40:	fa0b f000 	lsl.w	r0, fp, r0
 8003e44:	4318      	orrs	r0, r3
 8003e46:	9004      	str	r0, [sp, #16]
 8003e48:	e7d3      	b.n	8003df2 <_svfiprintf_r+0x92>
 8003e4a:	9a03      	ldr	r2, [sp, #12]
 8003e4c:	1d11      	adds	r1, r2, #4
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	9103      	str	r1, [sp, #12]
 8003e52:	2a00      	cmp	r2, #0
 8003e54:	db01      	blt.n	8003e5a <_svfiprintf_r+0xfa>
 8003e56:	9207      	str	r2, [sp, #28]
 8003e58:	e004      	b.n	8003e64 <_svfiprintf_r+0x104>
 8003e5a:	4252      	negs	r2, r2
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	9207      	str	r2, [sp, #28]
 8003e62:	9304      	str	r3, [sp, #16]
 8003e64:	783b      	ldrb	r3, [r7, #0]
 8003e66:	2b2e      	cmp	r3, #46	; 0x2e
 8003e68:	d10c      	bne.n	8003e84 <_svfiprintf_r+0x124>
 8003e6a:	787b      	ldrb	r3, [r7, #1]
 8003e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e6e:	d133      	bne.n	8003ed8 <_svfiprintf_r+0x178>
 8003e70:	9b03      	ldr	r3, [sp, #12]
 8003e72:	3702      	adds	r7, #2
 8003e74:	1d1a      	adds	r2, r3, #4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	9203      	str	r2, [sp, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bfb8      	it	lt
 8003e7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	4d2e      	ldr	r5, [pc, #184]	; (8003f40 <_svfiprintf_r+0x1e0>)
 8003e86:	2203      	movs	r2, #3
 8003e88:	7839      	ldrb	r1, [r7, #0]
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f9e8 	bl	8004260 <memchr>
 8003e90:	b138      	cbz	r0, 8003ea2 <_svfiprintf_r+0x142>
 8003e92:	2340      	movs	r3, #64	; 0x40
 8003e94:	1b40      	subs	r0, r0, r5
 8003e96:	fa03 f000 	lsl.w	r0, r3, r0
 8003e9a:	9b04      	ldr	r3, [sp, #16]
 8003e9c:	3701      	adds	r7, #1
 8003e9e:	4303      	orrs	r3, r0
 8003ea0:	9304      	str	r3, [sp, #16]
 8003ea2:	7839      	ldrb	r1, [r7, #0]
 8003ea4:	2206      	movs	r2, #6
 8003ea6:	4827      	ldr	r0, [pc, #156]	; (8003f44 <_svfiprintf_r+0x1e4>)
 8003ea8:	1c7e      	adds	r6, r7, #1
 8003eaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eae:	f000 f9d7 	bl	8004260 <memchr>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d038      	beq.n	8003f28 <_svfiprintf_r+0x1c8>
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <_svfiprintf_r+0x1e8>)
 8003eb8:	bb13      	cbnz	r3, 8003f00 <_svfiprintf_r+0x1a0>
 8003eba:	9b03      	ldr	r3, [sp, #12]
 8003ebc:	3307      	adds	r3, #7
 8003ebe:	f023 0307 	bic.w	r3, r3, #7
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	9303      	str	r3, [sp, #12]
 8003ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec8:	444b      	add	r3, r9
 8003eca:	9309      	str	r3, [sp, #36]	; 0x24
 8003ecc:	e76d      	b.n	8003daa <_svfiprintf_r+0x4a>
 8003ece:	fb05 3202 	mla	r2, r5, r2, r3
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	460f      	mov	r7, r1
 8003ed6:	e7a6      	b.n	8003e26 <_svfiprintf_r+0xc6>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	250a      	movs	r5, #10
 8003edc:	4619      	mov	r1, r3
 8003ede:	3701      	adds	r7, #1
 8003ee0:	9305      	str	r3, [sp, #20]
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ee8:	3a30      	subs	r2, #48	; 0x30
 8003eea:	2a09      	cmp	r2, #9
 8003eec:	d903      	bls.n	8003ef6 <_svfiprintf_r+0x196>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0c8      	beq.n	8003e84 <_svfiprintf_r+0x124>
 8003ef2:	9105      	str	r1, [sp, #20]
 8003ef4:	e7c6      	b.n	8003e84 <_svfiprintf_r+0x124>
 8003ef6:	fb05 2101 	mla	r1, r5, r1, r2
 8003efa:	2301      	movs	r3, #1
 8003efc:	4607      	mov	r7, r0
 8003efe:	e7f0      	b.n	8003ee2 <_svfiprintf_r+0x182>
 8003f00:	ab03      	add	r3, sp, #12
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	4622      	mov	r2, r4
 8003f06:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <_svfiprintf_r+0x1ec>)
 8003f08:	a904      	add	r1, sp, #16
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	f3af 8000 	nop.w
 8003f10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f14:	4681      	mov	r9, r0
 8003f16:	d1d6      	bne.n	8003ec6 <_svfiprintf_r+0x166>
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	065b      	lsls	r3, r3, #25
 8003f1c:	f53f af35 	bmi.w	8003d8a <_svfiprintf_r+0x2a>
 8003f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f22:	b01d      	add	sp, #116	; 0x74
 8003f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f28:	ab03      	add	r3, sp, #12
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <_svfiprintf_r+0x1ec>)
 8003f30:	a904      	add	r1, sp, #16
 8003f32:	4640      	mov	r0, r8
 8003f34:	f000 f882 	bl	800403c <_printf_i>
 8003f38:	e7ea      	b.n	8003f10 <_svfiprintf_r+0x1b0>
 8003f3a:	bf00      	nop
 8003f3c:	080044f7 	.word	0x080044f7
 8003f40:	080044fd 	.word	0x080044fd
 8003f44:	08004501 	.word	0x08004501
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	08003cab 	.word	0x08003cab

08003f50 <_printf_common>:
 8003f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	4691      	mov	r9, r2
 8003f56:	461f      	mov	r7, r3
 8003f58:	688a      	ldr	r2, [r1, #8]
 8003f5a:	690b      	ldr	r3, [r1, #16]
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bfb8      	it	lt
 8003f62:	4613      	movlt	r3, r2
 8003f64:	f8c9 3000 	str.w	r3, [r9]
 8003f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f72:	b112      	cbz	r2, 8003f7a <_printf_common+0x2a>
 8003f74:	3301      	adds	r3, #1
 8003f76:	f8c9 3000 	str.w	r3, [r9]
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	0699      	lsls	r1, r3, #26
 8003f7e:	bf42      	ittt	mi
 8003f80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f84:	3302      	addmi	r3, #2
 8003f86:	f8c9 3000 	strmi.w	r3, [r9]
 8003f8a:	6825      	ldr	r5, [r4, #0]
 8003f8c:	f015 0506 	ands.w	r5, r5, #6
 8003f90:	d107      	bne.n	8003fa2 <_printf_common+0x52>
 8003f92:	f104 0a19 	add.w	sl, r4, #25
 8003f96:	68e3      	ldr	r3, [r4, #12]
 8003f98:	f8d9 2000 	ldr.w	r2, [r9]
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	42ab      	cmp	r3, r5
 8003fa0:	dc29      	bgt.n	8003ff6 <_printf_common+0xa6>
 8003fa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	3300      	adds	r3, #0
 8003faa:	bf18      	it	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	0692      	lsls	r2, r2, #26
 8003fb0:	d42e      	bmi.n	8004010 <_printf_common+0xc0>
 8003fb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	4630      	mov	r0, r6
 8003fba:	47c0      	blx	r8
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d021      	beq.n	8004004 <_printf_common+0xb4>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	68e5      	ldr	r5, [r4, #12]
 8003fc4:	f003 0306 	and.w	r3, r3, #6
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	bf18      	it	ne
 8003fcc:	2500      	movne	r5, #0
 8003fce:	f8d9 2000 	ldr.w	r2, [r9]
 8003fd2:	f04f 0900 	mov.w	r9, #0
 8003fd6:	bf08      	it	eq
 8003fd8:	1aad      	subeq	r5, r5, r2
 8003fda:	68a3      	ldr	r3, [r4, #8]
 8003fdc:	6922      	ldr	r2, [r4, #16]
 8003fde:	bf08      	it	eq
 8003fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bfc4      	itt	gt
 8003fe8:	1a9b      	subgt	r3, r3, r2
 8003fea:	18ed      	addgt	r5, r5, r3
 8003fec:	341a      	adds	r4, #26
 8003fee:	454d      	cmp	r5, r9
 8003ff0:	d11a      	bne.n	8004028 <_printf_common+0xd8>
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e008      	b.n	8004008 <_printf_common+0xb8>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	4652      	mov	r2, sl
 8003ffa:	4639      	mov	r1, r7
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	47c0      	blx	r8
 8004000:	3001      	adds	r0, #1
 8004002:	d103      	bne.n	800400c <_printf_common+0xbc>
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400c:	3501      	adds	r5, #1
 800400e:	e7c2      	b.n	8003f96 <_printf_common+0x46>
 8004010:	2030      	movs	r0, #48	; 0x30
 8004012:	18e1      	adds	r1, r4, r3
 8004014:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800401e:	4422      	add	r2, r4
 8004020:	3302      	adds	r3, #2
 8004022:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004026:	e7c4      	b.n	8003fb2 <_printf_common+0x62>
 8004028:	2301      	movs	r3, #1
 800402a:	4622      	mov	r2, r4
 800402c:	4639      	mov	r1, r7
 800402e:	4630      	mov	r0, r6
 8004030:	47c0      	blx	r8
 8004032:	3001      	adds	r0, #1
 8004034:	d0e6      	beq.n	8004004 <_printf_common+0xb4>
 8004036:	f109 0901 	add.w	r9, r9, #1
 800403a:	e7d8      	b.n	8003fee <_printf_common+0x9e>

0800403c <_printf_i>:
 800403c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004040:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004044:	460c      	mov	r4, r1
 8004046:	7e09      	ldrb	r1, [r1, #24]
 8004048:	b085      	sub	sp, #20
 800404a:	296e      	cmp	r1, #110	; 0x6e
 800404c:	4617      	mov	r7, r2
 800404e:	4606      	mov	r6, r0
 8004050:	4698      	mov	r8, r3
 8004052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004054:	f000 80b3 	beq.w	80041be <_printf_i+0x182>
 8004058:	d822      	bhi.n	80040a0 <_printf_i+0x64>
 800405a:	2963      	cmp	r1, #99	; 0x63
 800405c:	d036      	beq.n	80040cc <_printf_i+0x90>
 800405e:	d80a      	bhi.n	8004076 <_printf_i+0x3a>
 8004060:	2900      	cmp	r1, #0
 8004062:	f000 80b9 	beq.w	80041d8 <_printf_i+0x19c>
 8004066:	2958      	cmp	r1, #88	; 0x58
 8004068:	f000 8083 	beq.w	8004172 <_printf_i+0x136>
 800406c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004070:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004074:	e032      	b.n	80040dc <_printf_i+0xa0>
 8004076:	2964      	cmp	r1, #100	; 0x64
 8004078:	d001      	beq.n	800407e <_printf_i+0x42>
 800407a:	2969      	cmp	r1, #105	; 0x69
 800407c:	d1f6      	bne.n	800406c <_printf_i+0x30>
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	6813      	ldr	r3, [r2, #0]
 8004082:	0605      	lsls	r5, r0, #24
 8004084:	f103 0104 	add.w	r1, r3, #4
 8004088:	d52a      	bpl.n	80040e0 <_printf_i+0xa4>
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6011      	str	r1, [r2, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	da03      	bge.n	800409a <_printf_i+0x5e>
 8004092:	222d      	movs	r2, #45	; 0x2d
 8004094:	425b      	negs	r3, r3
 8004096:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800409a:	486f      	ldr	r0, [pc, #444]	; (8004258 <_printf_i+0x21c>)
 800409c:	220a      	movs	r2, #10
 800409e:	e039      	b.n	8004114 <_printf_i+0xd8>
 80040a0:	2973      	cmp	r1, #115	; 0x73
 80040a2:	f000 809d 	beq.w	80041e0 <_printf_i+0x1a4>
 80040a6:	d808      	bhi.n	80040ba <_printf_i+0x7e>
 80040a8:	296f      	cmp	r1, #111	; 0x6f
 80040aa:	d020      	beq.n	80040ee <_printf_i+0xb2>
 80040ac:	2970      	cmp	r1, #112	; 0x70
 80040ae:	d1dd      	bne.n	800406c <_printf_i+0x30>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	f043 0320 	orr.w	r3, r3, #32
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	e003      	b.n	80040c2 <_printf_i+0x86>
 80040ba:	2975      	cmp	r1, #117	; 0x75
 80040bc:	d017      	beq.n	80040ee <_printf_i+0xb2>
 80040be:	2978      	cmp	r1, #120	; 0x78
 80040c0:	d1d4      	bne.n	800406c <_printf_i+0x30>
 80040c2:	2378      	movs	r3, #120	; 0x78
 80040c4:	4865      	ldr	r0, [pc, #404]	; (800425c <_printf_i+0x220>)
 80040c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ca:	e055      	b.n	8004178 <_printf_i+0x13c>
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d2:	1d19      	adds	r1, r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6011      	str	r1, [r2, #0]
 80040d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040dc:	2301      	movs	r3, #1
 80040de:	e08c      	b.n	80041fa <_printf_i+0x1be>
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040e6:	6011      	str	r1, [r2, #0]
 80040e8:	bf18      	it	ne
 80040ea:	b21b      	sxthne	r3, r3
 80040ec:	e7cf      	b.n	800408e <_printf_i+0x52>
 80040ee:	6813      	ldr	r3, [r2, #0]
 80040f0:	6825      	ldr	r5, [r4, #0]
 80040f2:	1d18      	adds	r0, r3, #4
 80040f4:	6010      	str	r0, [r2, #0]
 80040f6:	0628      	lsls	r0, r5, #24
 80040f8:	d501      	bpl.n	80040fe <_printf_i+0xc2>
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	e002      	b.n	8004104 <_printf_i+0xc8>
 80040fe:	0668      	lsls	r0, r5, #25
 8004100:	d5fb      	bpl.n	80040fa <_printf_i+0xbe>
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	296f      	cmp	r1, #111	; 0x6f
 8004106:	bf14      	ite	ne
 8004108:	220a      	movne	r2, #10
 800410a:	2208      	moveq	r2, #8
 800410c:	4852      	ldr	r0, [pc, #328]	; (8004258 <_printf_i+0x21c>)
 800410e:	2100      	movs	r1, #0
 8004110:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004114:	6865      	ldr	r5, [r4, #4]
 8004116:	2d00      	cmp	r5, #0
 8004118:	60a5      	str	r5, [r4, #8]
 800411a:	f2c0 8095 	blt.w	8004248 <_printf_i+0x20c>
 800411e:	6821      	ldr	r1, [r4, #0]
 8004120:	f021 0104 	bic.w	r1, r1, #4
 8004124:	6021      	str	r1, [r4, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13d      	bne.n	80041a6 <_printf_i+0x16a>
 800412a:	2d00      	cmp	r5, #0
 800412c:	f040 808e 	bne.w	800424c <_printf_i+0x210>
 8004130:	4665      	mov	r5, ip
 8004132:	2a08      	cmp	r2, #8
 8004134:	d10b      	bne.n	800414e <_printf_i+0x112>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	07db      	lsls	r3, r3, #31
 800413a:	d508      	bpl.n	800414e <_printf_i+0x112>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	6862      	ldr	r2, [r4, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	bfde      	ittt	le
 8004144:	2330      	movle	r3, #48	; 0x30
 8004146:	f805 3c01 	strble.w	r3, [r5, #-1]
 800414a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800414e:	ebac 0305 	sub.w	r3, ip, r5
 8004152:	6123      	str	r3, [r4, #16]
 8004154:	f8cd 8000 	str.w	r8, [sp]
 8004158:	463b      	mov	r3, r7
 800415a:	aa03      	add	r2, sp, #12
 800415c:	4621      	mov	r1, r4
 800415e:	4630      	mov	r0, r6
 8004160:	f7ff fef6 	bl	8003f50 <_printf_common>
 8004164:	3001      	adds	r0, #1
 8004166:	d14d      	bne.n	8004204 <_printf_i+0x1c8>
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	b005      	add	sp, #20
 800416e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004172:	4839      	ldr	r0, [pc, #228]	; (8004258 <_printf_i+0x21c>)
 8004174:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004178:	6813      	ldr	r3, [r2, #0]
 800417a:	6821      	ldr	r1, [r4, #0]
 800417c:	1d1d      	adds	r5, r3, #4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6015      	str	r5, [r2, #0]
 8004182:	060a      	lsls	r2, r1, #24
 8004184:	d50b      	bpl.n	800419e <_printf_i+0x162>
 8004186:	07ca      	lsls	r2, r1, #31
 8004188:	bf44      	itt	mi
 800418a:	f041 0120 	orrmi.w	r1, r1, #32
 800418e:	6021      	strmi	r1, [r4, #0]
 8004190:	b91b      	cbnz	r3, 800419a <_printf_i+0x15e>
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	f022 0220 	bic.w	r2, r2, #32
 8004198:	6022      	str	r2, [r4, #0]
 800419a:	2210      	movs	r2, #16
 800419c:	e7b7      	b.n	800410e <_printf_i+0xd2>
 800419e:	064d      	lsls	r5, r1, #25
 80041a0:	bf48      	it	mi
 80041a2:	b29b      	uxthmi	r3, r3
 80041a4:	e7ef      	b.n	8004186 <_printf_i+0x14a>
 80041a6:	4665      	mov	r5, ip
 80041a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80041ac:	fb02 3311 	mls	r3, r2, r1, r3
 80041b0:	5cc3      	ldrb	r3, [r0, r3]
 80041b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80041b6:	460b      	mov	r3, r1
 80041b8:	2900      	cmp	r1, #0
 80041ba:	d1f5      	bne.n	80041a8 <_printf_i+0x16c>
 80041bc:	e7b9      	b.n	8004132 <_printf_i+0xf6>
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	6825      	ldr	r5, [r4, #0]
 80041c2:	1d18      	adds	r0, r3, #4
 80041c4:	6961      	ldr	r1, [r4, #20]
 80041c6:	6010      	str	r0, [r2, #0]
 80041c8:	0628      	lsls	r0, r5, #24
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	d501      	bpl.n	80041d2 <_printf_i+0x196>
 80041ce:	6019      	str	r1, [r3, #0]
 80041d0:	e002      	b.n	80041d8 <_printf_i+0x19c>
 80041d2:	066a      	lsls	r2, r5, #25
 80041d4:	d5fb      	bpl.n	80041ce <_printf_i+0x192>
 80041d6:	8019      	strh	r1, [r3, #0]
 80041d8:	2300      	movs	r3, #0
 80041da:	4665      	mov	r5, ip
 80041dc:	6123      	str	r3, [r4, #16]
 80041de:	e7b9      	b.n	8004154 <_printf_i+0x118>
 80041e0:	6813      	ldr	r3, [r2, #0]
 80041e2:	1d19      	adds	r1, r3, #4
 80041e4:	6011      	str	r1, [r2, #0]
 80041e6:	681d      	ldr	r5, [r3, #0]
 80041e8:	6862      	ldr	r2, [r4, #4]
 80041ea:	2100      	movs	r1, #0
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 f837 	bl	8004260 <memchr>
 80041f2:	b108      	cbz	r0, 80041f8 <_printf_i+0x1bc>
 80041f4:	1b40      	subs	r0, r0, r5
 80041f6:	6060      	str	r0, [r4, #4]
 80041f8:	6863      	ldr	r3, [r4, #4]
 80041fa:	6123      	str	r3, [r4, #16]
 80041fc:	2300      	movs	r3, #0
 80041fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004202:	e7a7      	b.n	8004154 <_printf_i+0x118>
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	462a      	mov	r2, r5
 8004208:	4639      	mov	r1, r7
 800420a:	4630      	mov	r0, r6
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d0aa      	beq.n	8004168 <_printf_i+0x12c>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	079b      	lsls	r3, r3, #30
 8004216:	d413      	bmi.n	8004240 <_printf_i+0x204>
 8004218:	68e0      	ldr	r0, [r4, #12]
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	4298      	cmp	r0, r3
 800421e:	bfb8      	it	lt
 8004220:	4618      	movlt	r0, r3
 8004222:	e7a3      	b.n	800416c <_printf_i+0x130>
 8004224:	2301      	movs	r3, #1
 8004226:	464a      	mov	r2, r9
 8004228:	4639      	mov	r1, r7
 800422a:	4630      	mov	r0, r6
 800422c:	47c0      	blx	r8
 800422e:	3001      	adds	r0, #1
 8004230:	d09a      	beq.n	8004168 <_printf_i+0x12c>
 8004232:	3501      	adds	r5, #1
 8004234:	68e3      	ldr	r3, [r4, #12]
 8004236:	9a03      	ldr	r2, [sp, #12]
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	42ab      	cmp	r3, r5
 800423c:	dcf2      	bgt.n	8004224 <_printf_i+0x1e8>
 800423e:	e7eb      	b.n	8004218 <_printf_i+0x1dc>
 8004240:	2500      	movs	r5, #0
 8004242:	f104 0919 	add.w	r9, r4, #25
 8004246:	e7f5      	b.n	8004234 <_printf_i+0x1f8>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ac      	bne.n	80041a6 <_printf_i+0x16a>
 800424c:	7803      	ldrb	r3, [r0, #0]
 800424e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004252:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004256:	e76c      	b.n	8004132 <_printf_i+0xf6>
 8004258:	08004508 	.word	0x08004508
 800425c:	08004519 	.word	0x08004519

08004260 <memchr>:
 8004260:	b510      	push	{r4, lr}
 8004262:	b2c9      	uxtb	r1, r1
 8004264:	4402      	add	r2, r0
 8004266:	4290      	cmp	r0, r2
 8004268:	4603      	mov	r3, r0
 800426a:	d101      	bne.n	8004270 <memchr+0x10>
 800426c:	2300      	movs	r3, #0
 800426e:	e003      	b.n	8004278 <memchr+0x18>
 8004270:	781c      	ldrb	r4, [r3, #0]
 8004272:	3001      	adds	r0, #1
 8004274:	428c      	cmp	r4, r1
 8004276:	d1f6      	bne.n	8004266 <memchr+0x6>
 8004278:	4618      	mov	r0, r3
 800427a:	bd10      	pop	{r4, pc}

0800427c <memcpy>:
 800427c:	b510      	push	{r4, lr}
 800427e:	1e43      	subs	r3, r0, #1
 8004280:	440a      	add	r2, r1
 8004282:	4291      	cmp	r1, r2
 8004284:	d100      	bne.n	8004288 <memcpy+0xc>
 8004286:	bd10      	pop	{r4, pc}
 8004288:	f811 4b01 	ldrb.w	r4, [r1], #1
 800428c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004290:	e7f7      	b.n	8004282 <memcpy+0x6>

08004292 <memmove>:
 8004292:	4288      	cmp	r0, r1
 8004294:	b510      	push	{r4, lr}
 8004296:	eb01 0302 	add.w	r3, r1, r2
 800429a:	d807      	bhi.n	80042ac <memmove+0x1a>
 800429c:	1e42      	subs	r2, r0, #1
 800429e:	4299      	cmp	r1, r3
 80042a0:	d00a      	beq.n	80042b8 <memmove+0x26>
 80042a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80042aa:	e7f8      	b.n	800429e <memmove+0xc>
 80042ac:	4283      	cmp	r3, r0
 80042ae:	d9f5      	bls.n	800429c <memmove+0xa>
 80042b0:	1881      	adds	r1, r0, r2
 80042b2:	1ad2      	subs	r2, r2, r3
 80042b4:	42d3      	cmn	r3, r2
 80042b6:	d100      	bne.n	80042ba <memmove+0x28>
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80042c2:	e7f7      	b.n	80042b4 <memmove+0x22>

080042c4 <_realloc_r>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	4607      	mov	r7, r0
 80042c8:	4614      	mov	r4, r2
 80042ca:	460e      	mov	r6, r1
 80042cc:	b921      	cbnz	r1, 80042d8 <_realloc_r+0x14>
 80042ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042d2:	4611      	mov	r1, r2
 80042d4:	f7ff bba0 	b.w	8003a18 <_malloc_r>
 80042d8:	b922      	cbnz	r2, 80042e4 <_realloc_r+0x20>
 80042da:	f7ff fb51 	bl	8003980 <_free_r>
 80042de:	4625      	mov	r5, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e4:	f000 f814 	bl	8004310 <_malloc_usable_size_r>
 80042e8:	42a0      	cmp	r0, r4
 80042ea:	d20f      	bcs.n	800430c <_realloc_r+0x48>
 80042ec:	4621      	mov	r1, r4
 80042ee:	4638      	mov	r0, r7
 80042f0:	f7ff fb92 	bl	8003a18 <_malloc_r>
 80042f4:	4605      	mov	r5, r0
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d0f2      	beq.n	80042e0 <_realloc_r+0x1c>
 80042fa:	4631      	mov	r1, r6
 80042fc:	4622      	mov	r2, r4
 80042fe:	f7ff ffbd 	bl	800427c <memcpy>
 8004302:	4631      	mov	r1, r6
 8004304:	4638      	mov	r0, r7
 8004306:	f7ff fb3b 	bl	8003980 <_free_r>
 800430a:	e7e9      	b.n	80042e0 <_realloc_r+0x1c>
 800430c:	4635      	mov	r5, r6
 800430e:	e7e7      	b.n	80042e0 <_realloc_r+0x1c>

08004310 <_malloc_usable_size_r>:
 8004310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004314:	1f18      	subs	r0, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfbc      	itt	lt
 800431a:	580b      	ldrlt	r3, [r1, r0]
 800431c:	18c0      	addlt	r0, r0, r3
 800431e:	4770      	bx	lr

08004320 <_init>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr

0800432c <_fini>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr
